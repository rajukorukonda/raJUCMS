{"ast":null,"code":"import { __rest } from \"tslib\";\nimport { assign, cloneDeep, omit } from 'lodash-es';\nimport * as moment from 'moment';\nimport { rrulestr } from 'rrule';\nimport { FuseMockApiUtils } from '@fuse/lib/mock-api';\nimport { calendars as calendarsData, events as eventsData, exceptions as exceptionsData, settings as settingsData, weekdays as weekdaysData } from 'app/mock-api/apps/calendar/data';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@fuse/lib/mock-api\";\nexport let CalendarMockApi = /*#__PURE__*/(() => {\n  class CalendarMockApi {\n    /**\r\n     * Constructor\r\n     */\n    constructor(_fuseMockApiService) {\n      this._fuseMockApiService = _fuseMockApiService;\n      this._calendars = calendarsData;\n      this._events = eventsData;\n      this._exceptions = exceptionsData;\n      this._settings = settingsData;\n      this._weekdays = weekdaysData;\n      // Register Mock API handlers\n      this.registerHandlers();\n    }\n    // -----------------------------------------------------------------------------------------------------\n    // @ Public methods\n    // -----------------------------------------------------------------------------------------------------\n    /**\r\n     * Register Mock API handlers\r\n     */\n    registerHandlers() {\n      // -----------------------------------------------------------------------------------------------------\n      // @ Calendars - GET\n      // -----------------------------------------------------------------------------------------------------\n      this._fuseMockApiService.onGet('api/apps/calendar/calendars').reply(() => {\n        // Clone the calendars\n        const calendars = cloneDeep(this._calendars);\n        // Return the response\n        return [200, calendars];\n      });\n      // -----------------------------------------------------------------------------------------------------\n      // @ Calendars - POST\n      // -----------------------------------------------------------------------------------------------------\n      this._fuseMockApiService.onPost('api/apps/calendar/calendars').reply(({\n        request\n      }) => {\n        // Get the calendar as the new calendar\n        const newCalendar = cloneDeep(request.body.calendar);\n        // Add an id to the new calendar\n        newCalendar.id = FuseMockApiUtils.guid();\n        // Push the new calendar\n        this._calendars.push(newCalendar);\n        // Return the response\n        return [200, newCalendar];\n      });\n      // -----------------------------------------------------------------------------------------------------\n      // @ Calendars - PATCH\n      // -----------------------------------------------------------------------------------------------------\n      this._fuseMockApiService.onPatch('api/apps/calendar/calendars').reply(({\n        request\n      }) => {\n        // Get the id and calendar\n        const id = request.body.id;\n        const calendar = cloneDeep(request.body.calendar);\n        // Prepare the updated calendar\n        let updatedCalendar = null;\n        // Find the calendar and update it\n        this._calendars.forEach((item, index, calendars) => {\n          if (item.id === id) {\n            // Update the calendar\n            calendars[index] = assign({}, calendars[index], calendar);\n            // Store the updated calendar\n            updatedCalendar = calendars[index];\n          }\n        });\n        // Return the response\n        return [200, updatedCalendar];\n      });\n      // -----------------------------------------------------------------------------------------------------\n      // @ Calendars - DELETE\n      // -----------------------------------------------------------------------------------------------------\n      this._fuseMockApiService.onDelete('api/apps/calendar/calendars').reply(({\n        request\n      }) => {\n        // Get the id\n        const id = request.params.get('id');\n        // Find the calendar and delete it\n        const index = this._calendars.findIndex(calendar => calendar.id === id);\n        this._calendars.splice(index, 1);\n        // Find the events that belong to the calendar and remove them as well\n        this._events = this._events.filter(event => event.calendarId !== id);\n        // Return the response\n        return [200, true];\n      });\n      // -----------------------------------------------------------------------------------------------------\n      // @ Events - GET\n      // -----------------------------------------------------------------------------------------------------\n      this._fuseMockApiService.onGet('api/apps/calendar/events').reply(({\n        request\n      }) => {\n        // Get the start and end dates as moment\n        const viewStart = moment(request.params.get('start')).startOf('day');\n        const viewEnd = moment(request.params.get('end')).endOf('day');\n        // Clone the events\n        const events = cloneDeep(this._events);\n        // Prepare the results\n        const results = [];\n        // Go through the events...\n        events.forEach(event => {\n          // Get the event's start and end dates as moment\n          const eventStart = moment(event.start);\n          const eventEnd = moment(event.end);\n          // If it's a normal event...\n          if (!event.recurrence) {\n            // Only grab the event if it's within the range\n            if (eventStart.isSameOrAfter(viewStart, 'day') && eventEnd.isSameOrBefore(viewEnd, 'day')) {\n              // Push the event into the results array\n              results.push(event);\n            }\n          }\n          // If it's a recurring event...\n          else {\n            // Skip if the event does not recur within the view range\n            if (eventStart.isAfter(viewEnd, 'day') || eventEnd.isBefore(viewStart, 'day')) {\n              return;\n            }\n            // Set the DTSTART and UNTIL for RRule\n            const dtStart = eventStart.clone();\n            const until = viewEnd.isBefore(eventEnd) ? viewEnd.clone().utc() : eventEnd.clone().utc();\n            // Create an RRuleSet\n            const rruleset = this._generateRuleset(event, dtStart, until);\n            // Generate the recurring dates and loop through them\n            rruleset.all().forEach(date => {\n              // Get the rule date as a moment\n              const ruleDate = moment(date);\n              // Subtract the UTC Offset from the rule date as we use local time for DTSTART.\n              // The reason for this is simple; if we use UTC dates for DTSTART, RRule generated\n              // dates can shift. Since we have to store the dates as UTC, we can figure out the\n              // UTC value by simply subtracting the UTC Offset (minutes) from the rule date rather\n              // than using UTC dates in the first place. This will ensure there will be no time/day\n              // shift on generated rules since they will be generated based on the local time.\n              ruleDate.subtract(ruleDate.utcOffset(), 'minutes');\n              // Skip the date if it's not in between the view start and view end\n              // to prevent generating unnecessary amount of instances and to\n              // prevent instance duplication\n              if (!ruleDate.isBetween(viewStart, viewEnd, 'day', '[]')) {\n                return;\n              }\n              // Prepare the event instance\n              const eventInstance = {\n                // Generate an instance id using the event id and rule date\n                id: event.id + '_' + ruleDate.clone().utc().format('YYYYMMDD[T]HHmmss[Z]'),\n                // Set the recurringEventId on the event so we don't lose the event's origin\n                recurringEventId: event.id,\n                // Whether this is the first instance of the recurring event or not\n                isFirstInstance: event.start === ruleDate.clone().toISOString(),\n                // Get the rest of the mock-api\n                calendarId: event.calendarId,\n                title: event.title,\n                description: event.description,\n                start: ruleDate.toISOString(),\n                end: ruleDate.add(event.duration, 'minutes').toISOString(),\n                duration: event.duration,\n                allDay: event.allDay,\n                recurrence: event.recurrence\n              };\n              // Push the event instance to the results array\n              results.push(eventInstance);\n            });\n          }\n        });\n        // Return the response\n        return [200, results];\n      });\n      // -----------------------------------------------------------------------------------------------------\n      // @ Event - POST\n      // -----------------------------------------------------------------------------------------------------\n      this._fuseMockApiService.onPost('api/apps/calendar/event').reply(({\n        request\n      }) => {\n        debugger;\n        // Get the event as the new event\n        const newEvent = cloneDeep(request.body.event);\n        // Add an id to the new event\n        newEvent.id = FuseMockApiUtils.guid();\n        // Unshift the new event\n        this._events.unshift(newEvent);\n        // Return the response\n        return [200, newEvent];\n      });\n      // -----------------------------------------------------------------------------------------------------\n      // @ Event - PATCH\n      // -----------------------------------------------------------------------------------------------------\n      this._fuseMockApiService.onPatch('api/apps/calendar/event').reply(({\n        request\n      }) => {\n        // Get the id and event\n        const id = request.body.id;\n        const event = cloneDeep(request.body.event);\n        // Prepare the updated event\n        let updatedEvent = null;\n        // Find the event and update it\n        this._events.forEach((item, index, events) => {\n          if (item.id === id) {\n            // Update the event\n            events[index] = assign({}, events[index], event);\n            // Store the updated event\n            updatedEvent = events[index];\n          }\n        });\n        // Return the response\n        return [200, updatedEvent];\n      });\n      // -----------------------------------------------------------------------------------------------------\n      // @ Event - DELETE\n      // -----------------------------------------------------------------------------------------------------\n      this._fuseMockApiService.onDelete('api/apps/calendar/event').reply(({\n        request\n      }) => {\n        // Get the id and event\n        const id = request.params.get('id');\n        // Find the event and delete it\n        const index = this._events.findIndex(item => item.id === id);\n        this._events.splice(index, 1);\n        // Return the response\n        return [200, true];\n      });\n      // -----------------------------------------------------------------------------------------------------\n      // @ Recurring Event - PATCH\n      // -----------------------------------------------------------------------------------------------------\n      this._fuseMockApiService.onPatch('api/apps/calendar/recurring-event').reply(({\n        request\n      }) => {\n        // Get the event, original event and mode\n        const event = cloneDeep(request.body.event);\n        const originalEvent = cloneDeep(request.body.originalEvent);\n        const mode = request.body.mode;\n        // Find the original recurring event from db\n        const recurringEvent = this._events.find(item => item.id === event.recurringEventId);\n        // Single\n        if (mode === 'single') {\n          // Create a new event from the event while ignoring the range and recurringEventId\n          const {\n              range,\n              recurringEventId\n            } = event,\n            newEvent = __rest(event, [\"range\", \"recurringEventId\"]);\n          // Generate a unique id for the event\n          newEvent.id = FuseMockApiUtils.guid();\n          // Calculate the end date using the start date and the duration\n          newEvent.end = moment(newEvent.start).add(newEvent.duration, 'minutes');\n          // Null-ify the recurrence and duration\n          newEvent.duration = null;\n          newEvent.recurrence = null;\n          // Push the new event to the events array\n          this._events.push(newEvent);\n          // If this is the first instance of the recurring event...\n          if (originalEvent.start === recurringEvent.start) {\n            // Generate the rruleset\n            const rruleset = this._generateRuleset(recurringEvent, moment(recurringEvent.start), moment(recurringEvent.end).utc());\n            // Generate the dates using rruleset and get the 2nd date from start\n            const ruleDate = moment(rruleset.all((date, i) => i < 2)[1]);\n            // Subtract the UTC Offset from the rule date as we use local time for DTSTART.\n            // The reason for this is simple; if we use UTC dates for DTSTART, RRule generated\n            // dates can shift. Since we have to store the dates as UTC, we can figure out the\n            // UTC value by simply subtracting the UTC Offset (minutes) from the rule date rather\n            // than using UTC dates in the first place. This will ensure there will be no time/day\n            // shift on generated rules since they will be generated based on the local time.\n            ruleDate.subtract(ruleDate.utcOffset(), 'minutes');\n            // Update the recurring event's start date\n            recurringEvent.start = ruleDate.toISOString();\n          }\n          // Otherwise...\n          else {\n            // Add a new exception for the recurring event that ignores this single event's start date\n            this._exceptions.push({\n              id: FuseMockApiUtils.guid(),\n              eventId: originalEvent.recurringEventId,\n              exdate: moment(originalEvent.start).toISOString()\n            });\n          }\n        }\n        // Future\n        if (mode === 'future') {\n          // Update the end date\n          recurringEvent.end = moment(originalEvent.start).subtract(1, 'day').endOf('day').toISOString();\n          // Parse the recurrence rules from the original event\n          const parsedRules = {};\n          originalEvent.recurrence.split(';').forEach(rule => {\n            const parsedRule = rule.split('=');\n            parsedRules[parsedRule[0]] = parsedRule[1];\n          });\n          // Add/Update the UNTIL rule\n          parsedRules['UNTIL'] = moment(recurringEvent.end).utc().format('YYYYMMDD[T]HHmmss[Z]');\n          // Generate the rule string from the parsed rules\n          const rules = [];\n          Object.keys(parsedRules).forEach(key => {\n            rules.push(key + '=' + parsedRules[key]);\n          });\n          // Update the recurrence on the original recurring event\n          recurringEvent.recurrence = rules.join(';');\n          // Create a new event from the event while ignoring the recurringEventId\n          const {\n              recurringEventId\n            } = event,\n            newEvent = __rest(event, [\"recurringEventId\"]);\n          // Generate a unique id for the event\n          newEvent.id = FuseMockApiUtils.guid();\n          // Push the new event to the events array\n          this._events.push(newEvent);\n        }\n        // All\n        if (mode === 'all') {\n          // Find the event index\n          const eventIndex = this._events.findIndex(item => item.id === event.recurringEventId);\n          // Update the recurring event\n          this._events[eventIndex] = assign({}, this._events[eventIndex], omit(event, ['id', 'recurringEventId', 'range']));\n        }\n        // Return the response\n        return [200, true];\n      });\n      // -----------------------------------------------------------------------------------------------------\n      // @ Recurring Event - DELETE\n      // -----------------------------------------------------------------------------------------------------\n      this._fuseMockApiService.onDelete('api/apps/calendar/recurring-event').reply(({\n        request\n      }) => {\n        var _a;\n        // Get the event and mode\n        const event = JSON.parse((_a = request.params.get('event')) !== null && _a !== void 0 ? _a : '');\n        const mode = request.params.get('mode');\n        // Find the recurring event\n        const recurringEvent = this._events.find(item => item.id === event.recurringEventId);\n        // Single\n        if (mode === 'single') {\n          // If this is the first instance of the recurring event...\n          if (event.start === recurringEvent.start) {\n            // Generate the rruleset\n            const rruleset = this._generateRuleset(recurringEvent, moment(recurringEvent.start), moment(recurringEvent.end).utc());\n            // Generate the dates using rruleset and get the 2nd date from start\n            const ruleDate = moment(rruleset.all((date, i) => i < 2)[1]);\n            // Subtract the UTC Offset from the rule date as we use local time for DTSTART.\n            // The reason for this is simple; if we use UTC dates for DTSTART, RRule generated\n            // dates can shift. Since we have to store the dates as UTC, we can figure out the\n            // UTC value by simply subtracting the UTC Offset (minutes) from the rule date rather\n            // than using UTC dates in the first place. This will ensure there will be no time/day\n            // shift on generated rules since they will be generated based on the local time.\n            ruleDate.subtract(ruleDate.utcOffset(), 'minutes');\n            // Update the recurring event's start date\n            recurringEvent.start = ruleDate.toISOString();\n          }\n          // Otherwise...\n          else {\n            // Add a new exception for the recurring event that ignores this single event's start date\n            this._exceptions.push({\n              id: FuseMockApiUtils.guid(),\n              eventId: event.recurringEventId,\n              exdate: moment(event.start).toISOString()\n            });\n          }\n        }\n        // Future\n        if (mode === 'future') {\n          // Update the end date of the event\n          recurringEvent.end = moment(event.start).subtract(1, 'day').endOf('day').toISOString();\n          // Parse the recurrence rules of the event\n          const parsedRules = {};\n          recurringEvent.recurrence.split(';').forEach(rule => {\n            const parsedRule = rule.split('=');\n            parsedRules[parsedRule[0]] = parsedRule[1];\n          });\n          // Add/Update the UNTIL rule\n          parsedRules['UNTIL'] = moment(event.end).utc().format('YYYYMMDD[T]HHmmss[Z]');\n          // Generate the rule string from the parsed rules\n          const rules = [];\n          Object.keys(parsedRules).forEach(key => {\n            rules.push(key + '=' + parsedRules[key]);\n          });\n          // Update the recurrence of the event\n          recurringEvent.recurrence = rules.join(';');\n        }\n        // All\n        if (mode === 'all') {\n          // Find the event and delete it\n          const index = this._events.findIndex(item => item.id === event.recurringEventId);\n          this._events.splice(index, 1);\n        }\n        // Return the response\n        return [200, true];\n      });\n      // -----------------------------------------------------------------------------------------------------\n      // @ Settings - GET\n      // -----------------------------------------------------------------------------------------------------\n      this._fuseMockApiService.onGet('api/apps/calendar/settings').reply(() => [200, cloneDeep(this._settings)]);\n      // -----------------------------------------------------------------------------------------------------\n      // @ Settings - PATCH\n      // -----------------------------------------------------------------------------------------------------\n      this._fuseMockApiService.onPatch('api/apps/calendar/settings').reply(({\n        request\n      }) => {\n        // Get the settings\n        const settings = cloneDeep(request.body.settings);\n        // Store the updated settings\n        this._settings = settings;\n        // Return the response\n        return [200, settings];\n      });\n      // -----------------------------------------------------------------------------------------------------\n      // @ Weekdays - GET\n      // -----------------------------------------------------------------------------------------------------\n      this._fuseMockApiService.onGet('api/apps/calendar/weekdays').reply(() => {\n        // Clone the weekdays\n        const weekdays = cloneDeep(this._weekdays);\n        // If the startWeekOn setting is set to Sunday...\n        if (this._settings.startWeekOn === 0) {\n          // Move the Sunday to the beginning\n          weekdays.unshift(weekdays.pop());\n        }\n        // If the startWeekOn is set to Saturday...\n        if (this._settings.startWeekOn === 6) {\n          // Move the Sunday to the beginning\n          weekdays.unshift(weekdays.pop());\n          // Then move the Saturday to the beginning\n          weekdays.unshift(weekdays.pop());\n        }\n        // Return the response\n        return [200, weekdays];\n      });\n    }\n    // -----------------------------------------------------------------------------------------------------\n    // @ Private methods\n    // -----------------------------------------------------------------------------------------------------\n    /**\r\n     * Generates an RRuleSet from given event\r\n     *\r\n     * @param event\r\n     * @param dtStart\r\n     * @param until\r\n     * @private\r\n     */\n    _generateRuleset(event, dtStart, until) {\n      // Parse the recurrence rules\n      const parsedRules = {};\n      event.recurrence.split(';').forEach(rule => {\n        // Split the rule\n        const parsedRule = rule.split('=');\n        // Omit UNTIL or COUNT from the parsed rules since we only\n        // need them for calculating the event's end date. We will\n        // add an UNTIL later based on the above calculations.\n        if (parsedRule[0] === 'UNTIL' || parsedRule[0] === 'COUNT') {\n          return;\n        }\n        // Add the rule to the parsed rules\n        parsedRules[parsedRule[0]] = parsedRule[1];\n      });\n      // Generate the rule array from the parsed rules\n      const rules = [];\n      Object.keys(parsedRules).forEach(key => {\n        rules.push(key + '=' + parsedRules[key]);\n      });\n      // Prepare the ruleSet\n      const ruleSet = [];\n      // Add DTSTART\n      ruleSet.push('DTSTART:' + dtStart.format('YYYYMMDD[T]HHmmss[Z]'));\n      // Add RRULE\n      ruleSet.push('RRULE:' + rules.join(';') + ';UNTIL=' + until.format('YYYYMMDD[T]HHmmss[Z]'));\n      // Find and add any available exceptions to the rule\n      this._exceptions.forEach(item => {\n        // If the item is an exception to this event...\n        if (item.eventId === event.id) {\n          // Add it as an EXDATE to the rrule\n          ruleSet.push('EXDATE:' + moment(item.exdate).format('YYYYMMDD[T]HHmmss[Z]'));\n        }\n      });\n      // Create an RRuleSet from the ruleSet array\n      return rrulestr(ruleSet.join('\\n'), {\n        forceset: true\n      });\n    }\n  }\n  CalendarMockApi.ɵfac = function CalendarMockApi_Factory(t) {\n    return new (t || CalendarMockApi)(i0.ɵɵinject(i1.FuseMockApiService));\n  };\n  CalendarMockApi.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: CalendarMockApi,\n    factory: CalendarMockApi.ɵfac,\n    providedIn: 'root'\n  });\n  return CalendarMockApi;\n})();","map":null,"metadata":{},"sourceType":"module"}