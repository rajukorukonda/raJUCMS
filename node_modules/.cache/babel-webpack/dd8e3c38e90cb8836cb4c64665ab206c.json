{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport { fuseAnimations } from '@fuse/animations';\nimport { PatientsService } from 'app/modules/pages/patients/patients.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"app/core/auth/auth.service\";\nimport * as i3 from \"@angular/forms\";\nimport * as i4 from \"app/modules/pages/patients/patients.service\";\nimport * as i5 from \"@angular/common\";\nimport * as i6 from \"@angular/material/form-field\";\nimport * as i7 from \"@angular/material/input\";\nimport * as i8 from \"@angular/material/button\";\nimport * as i9 from \"@angular/material/checkbox\";\nimport * as i10 from \"@fuse/components/alert/alert.component\";\nimport * as i11 from \"@angular/material/icon\";\nimport * as i12 from \"@angular/material/progress-spinner\";\nconst _c0 = [\"signInNgForm\"];\nfunction AuthSignInComponent_fuse_alert_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"fuse-alert\", 31);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"appearance\", \"outline\")(\"showIcon\", false)(\"type\", ctx_r0.alert.type)(\"@shake\", ctx_r0.alert.type === \"error\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r0.alert.message, \" \");\n  }\n}\nfunction AuthSignInComponent_mat_error_14_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \" Username is required \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction AuthSignInComponent_mat_error_15_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \" Please enter a valid Username \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction AuthSignInComponent_mat_icon_22_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"mat-icon\", 32);\n  }\n  if (rf & 2) {\n    i0.ɵɵproperty(\"svgIcon\", \"heroicons_solid:eye\");\n  }\n}\nfunction AuthSignInComponent_mat_icon_23_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"mat-icon\", 32);\n  }\n  if (rf & 2) {\n    i0.ɵɵproperty(\"svgIcon\", \"heroicons_solid:eye-off\");\n  }\n}\nfunction AuthSignInComponent_span_30_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\");\n    i0.ɵɵtext(1, \" Sign in \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction AuthSignInComponent_mat_progress_spinner_31_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"mat-progress-spinner\", 33);\n  }\n  if (rf & 2) {\n    i0.ɵɵproperty(\"diameter\", 24)(\"mode\", \"indeterminate\");\n  }\n}\nexport let AuthSignInComponent = /*#__PURE__*/(() => {\n  class AuthSignInComponent {\n    /**\r\n     * Constructor\r\n     */\n    constructor(_activatedRoute, _authService, _formBuilder, _router, patientsService) {\n      this._activatedRoute = _activatedRoute;\n      this._authService = _authService;\n      this._formBuilder = _formBuilder;\n      this._router = _router;\n      this.patientsService = patientsService;\n      this.alert = {\n        type: 'success',\n        message: ''\n      };\n      this.showAlert = false;\n    }\n    // -----------------------------------------------------------------------------------------------------\n    // @ Lifecycle hooks\n    // -----------------------------------------------------------------------------------------------------\n    /**\r\n     * On init\r\n     */\n    ngOnInit() {\n      // Create the form\n      this.signInForm = this._formBuilder.group({\n        name: ['', [Validators.required]],\n        password: ['', Validators.required],\n        rememberMe: ['']\n      });\n      this.signInForm1 = this._formBuilder.group({\n        email: ['hughes.brian@company.com', [Validators.required, Validators.email]],\n        password: ['admin', Validators.required],\n        rememberMe: ['']\n      });\n    }\n    // -----------------------------------------------------------------------------------------------------\n    // @ Public methods\n    // -----------------------------------------------------------------------------------------------------\n    signIn() {\n      debugger;\n      this.patientsService.signIn(this.signInForm.value).subscribe(data => {\n        if (data) {\n          this.loginDetails = data;\n          localStorage.removeItem('roleID');\n          localStorage.setItem('roleID', data.roleID);\n          localStorage.removeItem('loginDetails');\n          localStorage.setItem('loginDetails', JSON.stringify(data));\n          this.signIn1();\n        } else {\n          // Re-enable the form\n          this.signInForm.enable();\n          // Reset the form\n          this.signInNgForm.resetForm();\n          // Set the alert\n          this.alert = {\n            type: 'error',\n            message: 'Wrong username or password'\n          };\n          // Show the alert\n          this.showAlert = true;\n        }\n      }, () => {});\n    }\n    /**\r\n     * Sign in\r\n     */\n    signIn2() {\n      // Return if the form is invalid\n      if (this.signInForm.invalid) {\n        return;\n      }\n      // Disable the form\n      this.signInForm.disable();\n      // Hide the alert\n      this.showAlert = false;\n      // Sign in\n      this._authService.signIn(this.signInForm.value).subscribe(() => {\n        // Set the redirect url.\n        // The '/signed-in-redirect' is a dummy url to catch the request and redirect the user\n        // to the correct page after a successful sign in. This way, that url can be set via\n        // routing file and we don't have to touch here.\n        const redirectURL = this._activatedRoute.snapshot.queryParamMap.get('redirectURL') || '/signed-in-redirect';\n        // Navigate to the redirect url\n        this._router.navigateByUrl(redirectURL);\n      }, response => {\n        // Re-enable the form\n        this.signInForm.enable();\n        localStorage.removeItem('loginDetails');\n        localStorage.setItem('loginDetails', response);\n        alert(response);\n        // Reset the form\n        this.signInNgForm.resetForm();\n        // Set the alert\n        this.alert = {\n          type: 'error',\n          message: 'Wrong username or password'\n        };\n        // Show the alert\n        this.showAlert = true;\n      });\n    }\n    signIn1() {\n      // Return if the form is invalid\n      if (this.signInForm.invalid) {\n        return;\n      }\n      // Disable the form\n      this.signInForm.disable();\n      // Hide the alert\n      this.showAlert = false;\n      // Sign in\n      this._authService.signIn1(this.signInForm1.value).subscribe(() => {\n        // Set the redirect url.\n        // The '/signed-in-redirect' is a dummy url to catch the request and redirect the user\n        // to the correct page after a successful sign in. This way, that url can be set via\n        // routing file and we don't have to touch here.\n        const redirectURL = this._activatedRoute.snapshot.queryParamMap.get('redirectURL') || '/signed-in-redirect';\n        // Navigate to the redirect url\n        this._router.navigateByUrl('/Appointments');\n      }, response => {\n        // Re-enable the form\n        this.signInForm.enable();\n        // Reset the form\n        this.signInNgForm.resetForm();\n        // Set the alert\n        this.alert = {\n          type: 'error',\n          message: 'Wrong email or password'\n        };\n        // Show the alert\n        this.showAlert = true;\n      });\n    }\n  }\n  AuthSignInComponent.ɵfac = function AuthSignInComponent_Factory(t) {\n    return new (t || AuthSignInComponent)(i0.ɵɵdirectiveInject(i1.ActivatedRoute), i0.ɵɵdirectiveInject(i2.AuthService), i0.ɵɵdirectiveInject(i3.FormBuilder), i0.ɵɵdirectiveInject(i1.Router), i0.ɵɵdirectiveInject(i4.PatientsService));\n  };\n  AuthSignInComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: AuthSignInComponent,\n    selectors: [[\"auth-sign-in\"]],\n    viewQuery: function AuthSignInComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 5);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.signInNgForm = _t.first);\n      }\n    },\n    features: [i0.ɵɵProvidersFeature([PatientsService])],\n    decls: 48,\n    vars: 14,\n    consts: [[1, \"flex\", \"flex-col\", \"sm:flex-row\", \"items-center\", \"md:items-start\", \"sm:justify-center\", \"md:justify-start\", \"flex-auto\", \"min-w-0\"], [1, \"md:flex\", \"md:items-center\", \"md:justify-end\", \"w-full\", \"sm:w-auto\", \"md:h-full\", \"md:w-1/2\", \"py-8\", \"px-4\", \"sm:p-12\", \"md:p-16\", \"sm:rounded-2xl\", \"md:rounded-none\", \"sm:shadow\", \"md:shadow-none\", \"sm:bg-card\", 2, \"justify-content\", \"center !important\"], [1, \"w-full\", \"max-w-80\", \"sm:w-80\", \"mx-auto\", \"sm:mx-0\"], [2, \"width\", \"60%\"], [\"src\", \"assets/images/logo/LOGO-Clinic.svg\"], [1, \"mt-8\", \"text-4xl\", \"font-extrabold\", \"tracking-tight\", \"leading-tight\"], [\"class\", \"mt-8 -mb-4\", 3, \"appearance\", \"showIcon\", \"type\", 4, \"ngIf\"], [1, \"mt-8\", 3, \"formGroup\"], [\"signInNgForm\", \"ngForm\"], [1, \"w-full\"], [\"id\", \"name\", \"matInput\", \"\", 3, \"formControlName\"], [4, \"ngIf\"], [\"id\", \"password\", \"matInput\", \"\", \"type\", \"password\", 3, \"formControlName\"], [\"passwordField\", \"\"], [\"mat-icon-button\", \"\", \"type\", \"button\", \"matSuffix\", \"\", 3, \"click\"], [\"class\", \"icon-size-5\", 3, \"svgIcon\", 4, \"ngIf\"], [1, \"inline-flex\", \"items-end\", \"justify-between\", \"w-full\", \"mt-1.5\"], [3, \"color\", \"formControlName\"], [\"mat-flat-button\", \"\", 1, \"fuse-mat-button-large\", \"w-full\", \"mt-6\", 3, \"color\", \"disabled\", \"click\"], [3, \"diameter\", \"mode\", 4, \"ngIf\"], [1, \"relative\", \"hidden\", \"md:flex\", \"flex-auto\", \"items-center\", \"justify-center\", \"w-1/2\", \"h-full\", \"p-16\", \"lg:px-28\", \"overflow-hidden\", \"bg-gray-800\", \"dark:border-l\"], [\"viewBox\", \"0 0 960 540\", \"width\", \"100%\", \"height\", \"100%\", \"preserveAspectRatio\", \"xMidYMax slice\", \"xmlns\", \"http://www.w3.org/2000/svg\", 1, \"absolute\", \"inset-0\", \"pointer-events-none\"], [\"fill\", \"none\", \"stroke\", \"currentColor\", \"stroke-width\", \"100\", 1, \"text-gray-700\", \"opacity-25\"], [\"r\", \"234\", \"cx\", \"196\", \"cy\", \"23\"], [\"r\", \"234\", \"cx\", \"790\", \"cy\", \"491\"], [\"viewBox\", \"0 0 220 192\", \"width\", \"220\", \"height\", \"192\", \"fill\", \"none\", 1, \"absolute\", \"-top-16\", \"-right-16\", \"text-gray-700\"], [\"id\", \"837c3e70-6c3a-44e6-8854-cc48c737b659\", \"x\", \"0\", \"y\", \"0\", \"width\", \"20\", \"height\", \"20\", \"patternUnits\", \"userSpaceOnUse\"], [\"x\", \"0\", \"y\", \"0\", \"width\", \"4\", \"height\", \"4\", \"fill\", \"currentColor\"], [\"width\", \"220\", \"height\", \"192\", \"fill\", \"url(#837c3e70-6c3a-44e6-8854-cc48c737b659)\"], [1, \"z-10\", \"relative\", \"w-full\", \"max-w-2xl\"], [1, \"text-7xl\", \"font-bold\", \"leading-none\", \"text-gray-100\"], [1, \"mt-8\", \"-mb-4\", 3, \"appearance\", \"showIcon\", \"type\"], [1, \"icon-size-5\", 3, \"svgIcon\"], [3, \"diameter\", \"mode\"]],\n    template: function AuthSignInComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        const _r9 = i0.ɵɵgetCurrentView();\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵelementStart(1, \"div\", 1);\n        i0.ɵɵelementStart(2, \"div\", 2);\n        i0.ɵɵelementStart(3, \"div\", 3);\n        i0.ɵɵelement(4, \"img\", 4);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(5, \"div\", 5);\n        i0.ɵɵtext(6, \" Sign in \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(7, AuthSignInComponent_fuse_alert_7_Template, 2, 5, \"fuse-alert\", 6);\n        i0.ɵɵelementStart(8, \"form\", 7, 8);\n        i0.ɵɵelementStart(10, \"mat-form-field\", 9);\n        i0.ɵɵelementStart(11, \"mat-label\");\n        i0.ɵɵtext(12, \"Username\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(13, \"input\", 10);\n        i0.ɵɵtemplate(14, AuthSignInComponent_mat_error_14_Template, 2, 0, \"mat-error\", 11);\n        i0.ɵɵtemplate(15, AuthSignInComponent_mat_error_15_Template, 2, 0, \"mat-error\", 11);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(16, \"mat-form-field\", 9);\n        i0.ɵɵelementStart(17, \"mat-label\");\n        i0.ɵɵtext(18, \"Password\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(19, \"input\", 12, 13);\n        i0.ɵɵelementStart(21, \"button\", 14);\n        i0.ɵɵlistener(\"click\", function AuthSignInComponent_Template_button_click_21_listener() {\n          i0.ɵɵrestoreView(_r9);\n          const _r4 = i0.ɵɵreference(20);\n          return _r4.type === \"password\" ? _r4.type = \"text\" : _r4.type = \"password\";\n        });\n        i0.ɵɵtemplate(22, AuthSignInComponent_mat_icon_22_Template, 1, 1, \"mat-icon\", 15);\n        i0.ɵɵtemplate(23, AuthSignInComponent_mat_icon_23_Template, 1, 1, \"mat-icon\", 15);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(24, \"mat-error\");\n        i0.ɵɵtext(25, \" Password is required \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(26, \"div\", 16);\n        i0.ɵɵelementStart(27, \"mat-checkbox\", 17);\n        i0.ɵɵtext(28, \" Remember me \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(29, \"button\", 18);\n        i0.ɵɵlistener(\"click\", function AuthSignInComponent_Template_button_click_29_listener() {\n          return ctx.signIn();\n        });\n        i0.ɵɵtemplate(30, AuthSignInComponent_span_30_Template, 2, 0, \"span\", 11);\n        i0.ɵɵtemplate(31, AuthSignInComponent_mat_progress_spinner_31_Template, 1, 2, \"mat-progress-spinner\", 19);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(32, \"div\", 20);\n        i0.ɵɵnamespaceSVG();\n        i0.ɵɵelementStart(33, \"svg\", 21);\n        i0.ɵɵelementStart(34, \"g\", 22);\n        i0.ɵɵelement(35, \"circle\", 23);\n        i0.ɵɵelement(36, \"circle\", 24);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(37, \"svg\", 25);\n        i0.ɵɵelementStart(38, \"defs\");\n        i0.ɵɵelementStart(39, \"pattern\", 26);\n        i0.ɵɵelement(40, \"rect\", 27);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(41, \"rect\", 28);\n        i0.ɵɵelementEnd();\n        i0.ɵɵnamespaceHTML();\n        i0.ɵɵelementStart(42, \"div\", 29);\n        i0.ɵɵelementStart(43, \"div\", 30);\n        i0.ɵɵelementStart(44, \"div\");\n        i0.ɵɵtext(45, \"Welcome to\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(46, \"div\");\n        i0.ɵɵtext(47, \"ARC Clinic Management System\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n      if (rf & 2) {\n        const _r4 = i0.ɵɵreference(20);\n        i0.ɵɵadvance(7);\n        i0.ɵɵproperty(\"ngIf\", ctx.showAlert);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"formGroup\", ctx.signInForm);\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"formControlName\", \"name\");\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.signInForm.get(\"name\").hasError(\"required\"));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.signInForm.get(\"name\").hasError(\"name\"));\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"formControlName\", \"password\");\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngIf\", _r4.type === \"password\");\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", _r4.type === \"text\");\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"color\", \"primary\")(\"formControlName\", \"rememberMe\");\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"color\", \"primary\")(\"disabled\", ctx.signInForm.disabled);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", !ctx.signInForm.disabled);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.signInForm.disabled);\n      }\n    },\n    directives: [i5.NgIf, i3.ɵNgNoValidate, i3.NgControlStatusGroup, i3.FormGroupDirective, i6.MatFormField, i6.MatLabel, i7.MatInput, i3.DefaultValueAccessor, i3.NgControlStatus, i3.FormControlName, i8.MatButton, i6.MatSuffix, i6.MatError, i9.MatCheckbox, i10.FuseAlertComponent, i11.MatIcon, i12.MatProgressSpinner],\n    encapsulation: 2,\n    data: {\n      animation: fuseAnimations\n    }\n  });\n  return AuthSignInComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}