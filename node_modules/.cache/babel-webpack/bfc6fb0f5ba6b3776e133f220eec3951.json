{"ast":null,"code":"import { BehaviorSubject, of, throwError } from 'rxjs';\nimport { catchError, switchMap } from 'rxjs/operators';\nimport { AuthUtils } from 'app/core/auth/auth.utils';\nimport { environment } from 'environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"app/core/user/user.service\";\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    /**\r\n     * Constructor\r\n     */\n    constructor(_httpClient, _userService) {\n      this._httpClient = _httpClient;\n      this._userService = _userService;\n      this._authenticated = false;\n      this.messageSource = new BehaviorSubject(1);\n      this.currentMessage = this.messageSource.asObservable();\n      this.API_URL = environment.API_URL;\n    }\n    // -----------------------------------------------------------------------------------------------------\n    // @ Accessors\n    // -----------------------------------------------------------------------------------------------------\n    /**\r\n     * Setter & getter for access token\r\n     */\n    set accessToken(token) {\n      localStorage.setItem('accessToken', token);\n    }\n    get accessToken() {\n      var _a;\n      return (_a = localStorage.getItem('accessToken')) !== null && _a !== void 0 ? _a : '';\n    }\n    // -----------------------------------------------------------------------------------------------------\n    // @ Public methods\n    // -----------------------------------------------------------------------------------------------------\n    /**\r\n     * Forgot password\r\n     *\r\n     * @param email\r\n     */\n    forgotPassword(email) {\n      return this._httpClient.post('api/auth/forgot-password', email);\n    }\n    /**\r\n     * Reset password\r\n     *\r\n     * @param password\r\n     */\n    resetPassword(password) {\n      return this._httpClient.post('api/auth/reset-password', password);\n    }\n    /**\r\n     * Sign in\r\n     *\r\n     * @param credentials\r\n     */\n    signIn(credentials) {\n      // Throw error, if the user is already logged in\n      if (this._authenticated) {\n        return throwError('User is already logged in.');\n      }\n      return this._httpClient.post(this.API_URL + 'Login/UserExist', credentials).pipe(switchMap(response => {\n        // Store the access token in the local storage\n        this.accessToken = response.accessToken;\n        this.accessToken = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpYXQiOjE2MzY2MzcxNDgsImlzcyI6IkZ1c2UiLCJleHAiOjE2MzcyNDE5NDh9.W7Ei5N32qzsipVBpjpZm0PQhxDfSJvwSgHzzBh3gqaE';\n        // Set the authenticated flag to true\n        this._authenticated = true;\n        // Store the user on the user service\n        this._userService.user = response;\n        // Return a new observable with the response\n        return of(response);\n      }));\n    }\n    /**\r\n     * Sign in using the access token\r\n     */\n    signInUsingToken() {\n      // Renew token\n      return this._httpClient.post('api/auth/refresh-access-token', {\n        accessToken: this.accessToken\n      }).pipe(catchError(() =>\n      // Return false\n      of(false)), switchMap(response => {\n        // Store the access token in the local storage\n        this.accessToken = response.accessToken;\n        // Set the authenticated flag to true\n        this._authenticated = true;\n        // Store the user on the user service\n        this._userService.user = response.user;\n        // Return true\n        return of(true);\n      }));\n    }\n    /**\r\n     * Sign out\r\n     */\n    signOut() {\n      // Remove the access token from the local storage\n      localStorage.removeItem('accessToken');\n      // Set the authenticated flag to false\n      this._authenticated = false;\n      // Return the observable\n      return of(true);\n    }\n    /**\r\n     * Sign up\r\n     *\r\n     * @param user\r\n     */\n    signUp(user) {\n      return this._httpClient.post('api/auth/sign-up', user);\n    }\n    /**\r\n     * Unlock session\r\n     *\r\n     * @param credentials\r\n     */\n    unlockSession(credentials) {\n      return this._httpClient.post('api/auth/unlock-session', credentials);\n    }\n    /**\r\n     * Check the authentication status\r\n     */\n    check() {\n      // Check if the user is logged in\n      if (this._authenticated) {\n        return of(true);\n      }\n      // Check the access token availability\n      if (!this.accessToken) {\n        return of(false);\n      }\n      // Check the access token expire date\n      if (AuthUtils.isTokenExpired(this.accessToken)) {\n        return of(false);\n      }\n      // If the access token exists and it didn't expire, sign in using it\n      return this.signInUsingToken();\n    }\n    signIn1(credentials) {\n      // Throw error, if the user is already logged in\n      if (this._authenticated) {\n        return throwError('User is already logged in.');\n      }\n      return this._httpClient.post('api/auth/sign-in', credentials).pipe(switchMap(response => {\n        // Store the access token in the local storage\n        this.accessToken = response.accessToken;\n        // Set the authenticated flag to true\n        this._authenticated = true;\n        // Store the user on the user service\n        this._userService.user = response.user;\n        // Return a new observable with the response\n        return of(response);\n      }));\n    }\n  }\n  AuthService.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.UserService));\n  };\n  AuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac\n  });\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module"}