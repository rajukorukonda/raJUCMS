{"ast":null,"code":"import { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"@fuse/services/config\";\nimport * as i3 from \"@fuse/services/tailwind\";\nexport let SettingsComponent = /*#__PURE__*/(() => {\n  class SettingsComponent {\n    /**\r\n     * Constructor\r\n     */\n    constructor(_router, _fuseConfigService, _fuseTailwindService) {\n      this._router = _router;\n      this._fuseConfigService = _fuseConfigService;\n      this._fuseTailwindService = _fuseTailwindService;\n      this.themes = [];\n      this._unsubscribeAll = new Subject();\n    }\n    // -----------------------------------------------------------------------------------------------------\n    // @ Lifecycle hooks\n    // -----------------------------------------------------------------------------------------------------\n    /**\r\n     * On init\r\n     */\n    ngOnInit() {\n      // Get the themes\n      this._fuseTailwindService.tailwindConfig$.pipe(takeUntil(this._unsubscribeAll)).subscribe(config => {\n        this.themes = Object.entries(config.themes);\n      });\n      // Subscribe to config changes\n      this._fuseConfigService.config$.pipe(takeUntil(this._unsubscribeAll)).subscribe(config => {\n        // Store the config\n        this.config = config;\n      });\n    }\n    /**\r\n     * On destroy\r\n     */\n    ngOnDestroy() {\n      // Unsubscribe from all subscriptions\n      this._unsubscribeAll.next();\n      this._unsubscribeAll.complete();\n    }\n    // -----------------------------------------------------------------------------------------------------\n    // @ Public methods\n    // -----------------------------------------------------------------------------------------------------\n    /**\r\n     * Set the layout on the config\r\n     *\r\n     * @param layout\r\n     */\n    setLayout(layout) {\n      // Clear the 'layout' query param to allow layout changes\n      this._router.navigate([], {\n        queryParams: {\n          layout: null\n        },\n        queryParamsHandling: 'merge'\n      }).then(() => {\n        // Set the config\n        this._fuseConfigService.config = {\n          layout\n        };\n      });\n    }\n    /**\r\n     * Set the scheme on the config\r\n     *\r\n     * @param scheme\r\n     */\n    setScheme(scheme) {\n      this._fuseConfigService.config = {\n        scheme\n      };\n    }\n    /**\r\n     * Set the theme on the config\r\n     *\r\n     * @param theme\r\n     */\n    setTheme(theme) {\n      this._fuseConfigService.config = {\n        theme\n      };\n    }\n  }\n  SettingsComponent.ɵfac = function SettingsComponent_Factory(t) {\n    return new (t || SettingsComponent)(i0.ɵɵdirectiveInject(i1.Router), i0.ɵɵdirectiveInject(i2.FuseConfigService), i0.ɵɵdirectiveInject(i3.FuseTailwindService));\n  };\n  SettingsComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: SettingsComponent,\n    selectors: [[\"settings\"]],\n    decls: 0,\n    vars: 0,\n    template: function SettingsComponent_Template(rf, ctx) {},\n    styles: [\"settings{position:static;display:block;flex:none;width:auto}\\n\"],\n    encapsulation: 2\n  });\n  return SettingsComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}