{"ast":null,"code":"import { HttpErrorResponse, HttpResponse } from '@angular/common/http';\nimport { of, throwError } from 'rxjs';\nimport { delay, switchMap } from 'rxjs/operators';\nimport { FUSE_MOCK_API_DEFAULT_DELAY } from '@fuse/lib/mock-api/mock-api.constants';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@fuse/lib/mock-api/mock-api.service\";\nexport let FuseMockApiInterceptor = /*#__PURE__*/(() => {\n  class FuseMockApiInterceptor {\n    /**\r\n     * Constructor\r\n     */\n    constructor(_defaultDelay, _fuseMockApiService) {\n      this._defaultDelay = _defaultDelay;\n      this._fuseMockApiService = _fuseMockApiService;\n    }\n    /**\r\n     * Intercept\r\n     *\r\n     * @param request\r\n     * @param next\r\n     */\n    intercept(request, next) {\n      var _a, _b;\n      // Try to get the request handler\n      const {\n        handler,\n        urlParams\n      } = this._fuseMockApiService.findHandler(request.method.toUpperCase(), request.url);\n      // Pass through if the request handler does not exist\n      if (!handler) {\n        return next.handle(request);\n      }\n      // Set the intercepted request on the handler\n      handler.request = request;\n      // Set the url params on the handler\n      handler.urlParams = urlParams;\n      // Subscribe to the response function observable\n      return handler.response.pipe(delay((_b = (_a = handler.delay) !== null && _a !== void 0 ? _a : this._defaultDelay) !== null && _b !== void 0 ? _b : 0), switchMap(response => {\n        // If there is no response data,\n        // throw an error response\n        if (!response) {\n          response = new HttpErrorResponse({\n            error: 'NOT FOUND',\n            status: 404,\n            statusText: 'NOT FOUND'\n          });\n          return throwError(response);\n        }\n        // Parse the response data\n        const data = {\n          status: response[0],\n          body: response[1]\n        };\n        // If the status code is in between 200 and 300,\n        // return a success response\n        if (data.status >= 200 && data.status < 300) {\n          response = new HttpResponse({\n            body: data.body,\n            status: data.status,\n            statusText: 'OK'\n          });\n          return of(response);\n        }\n        // For other status codes,\n        // throw an error response\n        response = new HttpErrorResponse({\n          error: data.body.error,\n          status: data.status,\n          statusText: 'ERROR'\n        });\n        return throwError(response);\n      }));\n    }\n  }\n  FuseMockApiInterceptor.ɵfac = function FuseMockApiInterceptor_Factory(t) {\n    return new (t || FuseMockApiInterceptor)(i0.ɵɵinject(FUSE_MOCK_API_DEFAULT_DELAY), i0.ɵɵinject(i1.FuseMockApiService));\n  };\n  FuseMockApiInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: FuseMockApiInterceptor,\n    factory: FuseMockApiInterceptor.ɵfac,\n    providedIn: 'root'\n  });\n  return FuseMockApiInterceptor;\n})();","map":null,"metadata":{},"sourceType":"module"}