{"ast":null,"code":"import { ReplaySubject } from 'rxjs';\nimport { map, switchMap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/cdk/layout\";\nimport * as i2 from \"@fuse/services/tailwind/tailwind.service\";\nexport let FuseMediaWatcherService = /*#__PURE__*/(() => {\n  class FuseMediaWatcherService {\n    /**\r\n     * Constructor\r\n     */\n    constructor(_breakpointObserver, _fuseTailwindConfigService) {\n      this._breakpointObserver = _breakpointObserver;\n      this._fuseTailwindConfigService = _fuseTailwindConfigService;\n      this._onMediaChange = new ReplaySubject(1);\n      this._fuseTailwindConfigService.tailwindConfig$.pipe(switchMap(config => this._breakpointObserver.observe(Object.values(config.breakpoints)).pipe(map(state => {\n        var _a;\n        // Prepare the observable values and set their defaults\n        const matchingAliases = [];\n        const matchingQueries = {};\n        // Get the matching breakpoints and use them to fill the subject\n        const matchingBreakpoints = (_a = Object.entries(state.breakpoints).filter(([query, matches]) => matches)) !== null && _a !== void 0 ? _a : [];\n        for (const [query] of matchingBreakpoints) {\n          // Find the alias of the matching query\n          const matchingAlias = Object.entries(config.breakpoints).find(([alias, q]) => q === query)[0];\n          // Add the matching query to the observable values\n          if (matchingAlias) {\n            matchingAliases.push(matchingAlias);\n            matchingQueries[matchingAlias] = query;\n          }\n        }\n        // Execute the observable\n        this._onMediaChange.next({\n          matchingAliases,\n          matchingQueries\n        });\n      })))).subscribe();\n    }\n    // -----------------------------------------------------------------------------------------------------\n    // @ Accessors\n    // -----------------------------------------------------------------------------------------------------\n    /**\r\n     * Getter for _onMediaChange\r\n     */\n    get onMediaChange$() {\n      return this._onMediaChange.asObservable();\n    }\n    // -----------------------------------------------------------------------------------------------------\n    // @ Public methods\n    // -----------------------------------------------------------------------------------------------------\n    /**\r\n     * On media query change\r\n     *\r\n     * @param query\r\n     */\n    onMediaQueryChange$(query) {\n      return this._breakpointObserver.observe(query);\n    }\n  }\n  FuseMediaWatcherService.ɵfac = function FuseMediaWatcherService_Factory(t) {\n    return new (t || FuseMediaWatcherService)(i0.ɵɵinject(i1.BreakpointObserver), i0.ɵɵinject(i2.FuseTailwindService));\n  };\n  FuseMediaWatcherService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: FuseMediaWatcherService,\n    factory: FuseMediaWatcherService.ɵfac\n  });\n  return FuseMediaWatcherService;\n})();","map":null,"metadata":{},"sourceType":"module"}