{"ast":null,"code":"import { assign, cloneDeep } from 'lodash-es';\nimport { FuseMockApiUtils } from '@fuse/lib/mock-api';\nimport { messages as messagesData } from 'app/mock-api/common/messages/data';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@fuse/lib/mock-api\";\nexport let MessagesMockApi = /*#__PURE__*/(() => {\n  class MessagesMockApi {\n    /**\r\n     * Constructor\r\n     */\n    constructor(_fuseMockApiService) {\n      this._fuseMockApiService = _fuseMockApiService;\n      this._messages = messagesData;\n      // Register Mock API handlers\n      this.registerHandlers();\n    }\n    // -----------------------------------------------------------------------------------------------------\n    // @ Public methods\n    // -----------------------------------------------------------------------------------------------------\n    /**\r\n     * Register Mock API handlers\r\n     */\n    registerHandlers() {\n      // -----------------------------------------------------------------------------------------------------\n      // @ Messages - GET\n      // -----------------------------------------------------------------------------------------------------\n      this._fuseMockApiService.onGet('api/common/messages').reply(() => [200, cloneDeep(this._messages)]);\n      // -----------------------------------------------------------------------------------------------------\n      // @ Messages - POST\n      // -----------------------------------------------------------------------------------------------------\n      this._fuseMockApiService.onPost('api/common/messages').reply(({\n        request\n      }) => {\n        // Get the message\n        const newMessage = cloneDeep(request.body.message);\n        // Generate a new GUID\n        newMessage.id = FuseMockApiUtils.guid();\n        // Unshift the new message\n        this._messages.unshift(newMessage);\n        // Return the response\n        return [200, newMessage];\n      });\n      // -----------------------------------------------------------------------------------------------------\n      // @ Messages - PATCH\n      // -----------------------------------------------------------------------------------------------------\n      this._fuseMockApiService.onPatch('api/common/messages').reply(({\n        request\n      }) => {\n        // Get the id and message\n        const id = request.body.id;\n        const message = cloneDeep(request.body.message);\n        // Prepare the updated message\n        let updatedMessage = null;\n        // Find the message and update it\n        this._messages.forEach((item, index, messages) => {\n          if (item.id === id) {\n            // Update the message\n            messages[index] = assign({}, messages[index], message);\n            // Store the updated message\n            updatedMessage = messages[index];\n          }\n        });\n        // Return the response\n        return [200, updatedMessage];\n      });\n      // -----------------------------------------------------------------------------------------------------\n      // @ Messages - DELETE\n      // -----------------------------------------------------------------------------------------------------\n      this._fuseMockApiService.onDelete('api/common/messages').reply(({\n        request\n      }) => {\n        // Get the id\n        const id = request.params.get('id');\n        // Prepare the deleted message\n        let deletedMessage = null;\n        // Find the message\n        const index = this._messages.findIndex(item => item.id === id);\n        // Store the deleted message\n        deletedMessage = cloneDeep(this._messages[index]);\n        // Delete the message\n        this._messages.splice(index, 1);\n        // Return the response\n        return [200, deletedMessage];\n      });\n      // -----------------------------------------------------------------------------------------------------\n      // @ Mark all as read - GET\n      // -----------------------------------------------------------------------------------------------------\n      this._fuseMockApiService.onGet('api/common/messages/mark-all-as-read').reply(() => {\n        // Go through all messages\n        this._messages.forEach((item, index, messages) => {\n          // Mark it as read\n          messages[index].read = true;\n          messages[index].seen = true;\n        });\n        // Return the response\n        return [200, true];\n      });\n      // -----------------------------------------------------------------------------------------------------\n      // @ Toggle read status - POST\n      // -----------------------------------------------------------------------------------------------------\n      this._fuseMockApiService.onPost('api/common/messages/toggle-read-status').reply(({\n        request\n      }) => {\n        // Get the message\n        const message = cloneDeep(request.body.message);\n        // Prepare the updated message\n        let updatedMessage = null;\n        // Find the message and update it\n        this._messages.forEach((item, index, messages) => {\n          if (item.id === message.id) {\n            // Update the message\n            messages[index].read = message.read;\n            // Store the updated message\n            updatedMessage = messages[index];\n          }\n        });\n        // Return the response\n        return [200, updatedMessage];\n      });\n    }\n  }\n  MessagesMockApi.ɵfac = function MessagesMockApi_Factory(t) {\n    return new (t || MessagesMockApi)(i0.ɵɵinject(i1.FuseMockApiService));\n  };\n  MessagesMockApi.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: MessagesMockApi,\n    factory: MessagesMockApi.ɵfac,\n    providedIn: 'root'\n  });\n  return MessagesMockApi;\n})();","map":null,"metadata":{},"sourceType":"module"}