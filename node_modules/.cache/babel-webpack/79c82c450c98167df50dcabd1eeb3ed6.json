{"ast":null,"code":"import { __rest } from \"tslib\";\nimport { DOCUMENT } from '@angular/common';\nimport { TemplatePortal } from '@angular/cdk/portal';\nimport dayGridPlugin from '@fullcalendar/daygrid';\nimport listPlugin from '@fullcalendar/list';\nimport interactionPlugin from '@fullcalendar/interaction';\nimport momentPlugin from '@fullcalendar/moment';\nimport rrulePlugin from '@fullcalendar/rrule';\nimport timeGridPlugin from '@fullcalendar/timegrid';\nimport { clone, cloneDeep, isEqual, omit } from 'lodash-es';\nimport * as moment from 'moment';\nimport { RRule } from 'rrule';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { CalendarRecurrenceComponent } from 'app/modules/admin/apps/calendar/recurrence/recurrence.component';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"app/modules/admin/apps/calendar/calendar.service\";\nimport * as i2 from \"@angular/forms\";\nimport * as i3 from \"@angular/material/dialog\";\nimport * as i4 from \"@angular/cdk/overlay\";\nimport * as i5 from \"@fuse/services/media-watcher\";\nimport * as i6 from \"app/Services/utilities.service\";\nimport * as i7 from \"@angular/material/sidenav\";\nimport * as i8 from \"@angular/material/button\";\nimport * as i9 from \"@angular/material/icon\";\nimport * as i10 from \"@angular/material/form-field\";\nimport * as i11 from \"@angular/material/select\";\nimport * as i12 from \"@angular/material/core\";\nimport * as i13 from \"@angular/material/menu\";\nimport * as i14 from \"@fullcalendar/angular\";\nimport * as i15 from \"@angular/common\";\nimport * as i16 from \"@angular/material/input\";\nimport * as i17 from \"@fuse/components/date-range/date-range.component\";\nimport * as i18 from \"@angular/material/checkbox\";\nconst _c0 = [\"eventPanel\"];\nconst _c1 = [\"fullCalendar\"];\nconst _c2 = [\"drawer\"];\nfunction CalendarComponent_ng_template_57_ng_container_0_ng_container_14_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r12 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"button\", 5);\n    i0.ɵɵlistener(\"click\", function CalendarComponent_ng_template_57_ng_container_0_ng_container_14_Template_button_click_1_listener() {\n      i0.ɵɵrestoreView(_r12);\n      const ctx_r11 = i0.ɵɵnextContext(3);\n      return ctx_r11.changeEventPanelMode(\"edit\", \"single\");\n    });\n    i0.ɵɵelement(2, \"mat-icon\", 6);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"button\", 5);\n    i0.ɵɵlistener(\"click\", function CalendarComponent_ng_template_57_ng_container_0_ng_container_14_Template_button_click_3_listener() {\n      i0.ɵɵrestoreView(_r12);\n      const ctx_r13 = i0.ɵɵnextContext(3);\n      return ctx_r13.deleteEvent(ctx_r13.event);\n    });\n    i0.ɵɵelement(4, \"mat-icon\", 6);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"svgIcon\", \"heroicons_outline:pencil-alt\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"svgIcon\", \"heroicons_outline:trash\");\n  }\n}\nfunction CalendarComponent_ng_template_57_ng_container_0_ng_container_15_button_7_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r19 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"button\", 19);\n    i0.ɵɵlistener(\"click\", function CalendarComponent_ng_template_57_ng_container_0_ng_container_15_button_7_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r19);\n      const ctx_r18 = i0.ɵɵnextContext(4);\n      return ctx_r18.changeEventPanelMode(\"edit\", \"future\");\n    });\n    i0.ɵɵtext(1, \" This and following events \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction CalendarComponent_ng_template_57_ng_container_0_ng_container_15_button_16_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r21 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"button\", 19);\n    i0.ɵɵlistener(\"click\", function CalendarComponent_ng_template_57_ng_container_0_ng_container_15_button_16_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r21);\n      const ctx_r20 = i0.ɵɵnextContext(4);\n      return ctx_r20.deleteEvent(ctx_r20.event, \"future\");\n    });\n    i0.ɵɵtext(1, \" This and following events \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction CalendarComponent_ng_template_57_ng_container_0_ng_container_15_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r23 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"button\", 38);\n    i0.ɵɵelement(2, \"mat-icon\", 6);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"mat-menu\", null, 39);\n    i0.ɵɵelementStart(5, \"button\", 19);\n    i0.ɵɵlistener(\"click\", function CalendarComponent_ng_template_57_ng_container_0_ng_container_15_Template_button_click_5_listener() {\n      i0.ɵɵrestoreView(_r23);\n      const ctx_r22 = i0.ɵɵnextContext(3);\n      return ctx_r22.changeEventPanelMode(\"edit\", \"single\");\n    });\n    i0.ɵɵtext(6, \" This event \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(7, CalendarComponent_ng_template_57_ng_container_0_ng_container_15_button_7_Template, 2, 0, \"button\", 40);\n    i0.ɵɵelementStart(8, \"button\", 19);\n    i0.ɵɵlistener(\"click\", function CalendarComponent_ng_template_57_ng_container_0_ng_container_15_Template_button_click_8_listener() {\n      i0.ɵɵrestoreView(_r23);\n      const ctx_r24 = i0.ɵɵnextContext(3);\n      return ctx_r24.changeEventPanelMode(\"edit\", \"all\");\n    });\n    i0.ɵɵtext(9, \" All events \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(10, \"button\", 38);\n    i0.ɵɵelement(11, \"mat-icon\", 6);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(12, \"mat-menu\", null, 41);\n    i0.ɵɵelementStart(14, \"button\", 19);\n    i0.ɵɵlistener(\"click\", function CalendarComponent_ng_template_57_ng_container_0_ng_container_15_Template_button_click_14_listener() {\n      i0.ɵɵrestoreView(_r23);\n      const ctx_r25 = i0.ɵɵnextContext(3);\n      return ctx_r25.deleteEvent(ctx_r25.event, \"single\");\n    });\n    i0.ɵɵtext(15, \" This event \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(16, CalendarComponent_ng_template_57_ng_container_0_ng_container_15_button_16_Template, 2, 0, \"button\", 40);\n    i0.ɵɵelementStart(17, \"button\", 19);\n    i0.ɵɵlistener(\"click\", function CalendarComponent_ng_template_57_ng_container_0_ng_container_15_Template_button_click_17_listener() {\n      i0.ɵɵrestoreView(_r23);\n      const ctx_r26 = i0.ɵɵnextContext(3);\n      return ctx_r26.deleteEvent(ctx_r26.event, \"all\");\n    });\n    i0.ɵɵtext(18, \" All events \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const _r14 = i0.ɵɵreference(4);\n    const _r16 = i0.ɵɵreference(13);\n    const ctx_r9 = i0.ɵɵnextContext(3);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"matMenuTriggerFor\", _r14);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"svgIcon\", \"heroicons_outline:pencil-alt\");\n    i0.ɵɵadvance(5);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r9.event.isFirstInstance);\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"matMenuTriggerFor\", _r16);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"svgIcon\", \"heroicons_outline:trash\");\n    i0.ɵɵadvance(5);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r9.event.isFirstInstance);\n  }\n}\nfunction CalendarComponent_ng_template_57_ng_container_0_div_16_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 34);\n    i0.ɵɵelement(1, \"mat-icon\", 6);\n    i0.ɵɵelementStart(2, \"div\", 42);\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r10 = i0.ɵɵnextContext(3);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"svgIcon\", \"heroicons_outline:menu-alt-2\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r10.event.description);\n  }\n}\nfunction CalendarComponent_ng_template_57_ng_container_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"div\", 27);\n    i0.ɵɵelementStart(2, \"div\", 2);\n    i0.ɵɵelement(3, \"mat-icon\", 6);\n    i0.ɵɵelementStart(4, \"div\", 28);\n    i0.ɵɵelementStart(5, \"div\");\n    i0.ɵɵelementStart(6, \"div\", 29);\n    i0.ɵɵtext(7);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(8, \"div\", 30);\n    i0.ɵɵtext(9);\n    i0.ɵɵpipe(10, \"date\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(11, \"div\", 31);\n    i0.ɵɵtext(12);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(13, \"div\", 32);\n    i0.ɵɵtemplate(14, CalendarComponent_ng_template_57_ng_container_0_ng_container_14_Template, 5, 2, \"ng-container\", 26);\n    i0.ɵɵtemplate(15, CalendarComponent_ng_template_57_ng_container_0_ng_container_15_Template, 19, 6, \"ng-container\", 26);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(16, CalendarComponent_ng_template_57_ng_container_0_div_16_Template, 4, 2, \"div\", 33);\n    i0.ɵɵelementStart(17, \"div\", 34);\n    i0.ɵɵelement(18, \"mat-icon\", 6);\n    i0.ɵɵelementStart(19, \"div\", 35);\n    i0.ɵɵelement(20, \"div\", 36);\n    i0.ɵɵelementStart(21, \"div\", 37);\n    i0.ɵɵtext(22);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r6 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"svgIcon\", \"heroicons_outline:information-circle\");\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate(ctx_r6.event.title || \"(No title)\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind2(10, 10, ctx_r6.event.start, \"EEEE, MMMM d\"));\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(ctx_r6.recurrenceStatus);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r6.event.recurrence);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r6.event.recurrence);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r6.event.description);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"svgIcon\", \"heroicons_outline:calendar\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngClass\", ctx_r6.getCalendar(ctx_r6.event.calendarId).color);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r6.getCalendar(ctx_r6.event.calendarId).title);\n  }\n}\nfunction CalendarComponent_ng_template_57_ng_container_1_div_12_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r32 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 54);\n    i0.ɵɵelement(1, \"mat-icon\", 66);\n    i0.ɵɵelementStart(2, \"div\", 67);\n    i0.ɵɵlistener(\"click\", function CalendarComponent_ng_template_57_ng_container_1_div_12_Template_div_click_2_listener() {\n      i0.ɵɵrestoreView(_r32);\n      const ctx_r31 = i0.ɵɵnextContext(3);\n      return ctx_r31.openRecurrenceDialog();\n    });\n    i0.ɵɵelementStart(3, \"div\", 50);\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r27 = i0.ɵɵnextContext(3);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"svgIcon\", \"heroicons_outline:refresh\");\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r27.recurrenceStatus || \"Does not repeat\", \" \");\n  }\n}\nfunction CalendarComponent_ng_template_57_ng_container_1_ng_container_21_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"mat-option\", 15);\n    i0.ɵɵelementStart(2, \"div\", 68);\n    i0.ɵɵelement(3, \"span\", 57);\n    i0.ɵɵelementStart(4, \"span\", 58);\n    i0.ɵɵtext(5);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const calendar_r33 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"value\", calendar_r33.id);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngClass\", calendar_r33.color);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(calendar_r33.title);\n  }\n}\nfunction CalendarComponent_ng_template_57_ng_container_1_button_28_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r35 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"button\", 69);\n    i0.ɵɵlistener(\"click\", function CalendarComponent_ng_template_57_ng_container_1_button_28_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r35);\n      const ctx_r34 = i0.ɵɵnextContext(3);\n      return ctx_r34.addEvent();\n    });\n    i0.ɵɵtext(1, \" Add \");\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    i0.ɵɵproperty(\"color\", \"primary\");\n  }\n}\nfunction CalendarComponent_ng_template_57_ng_container_1_button_29_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r37 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"button\", 70);\n    i0.ɵɵlistener(\"click\", function CalendarComponent_ng_template_57_ng_container_1_button_29_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r37);\n      const ctx_r36 = i0.ɵɵnextContext(3);\n      return ctx_r36.updateEvent();\n    });\n    i0.ɵɵtext(1, \" Save \");\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    i0.ɵɵproperty(\"color\", \"primary\");\n  }\n}\nfunction CalendarComponent_ng_template_57_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"form\", 43);\n    i0.ɵɵelementStart(2, \"div\", 44);\n    i0.ɵɵelement(3, \"mat-icon\", 45);\n    i0.ɵɵelementStart(4, \"mat-form-field\", 46);\n    i0.ɵɵelement(5, \"input\", 47);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"div\", 48);\n    i0.ɵɵelement(7, \"mat-icon\", 49);\n    i0.ɵɵelementStart(8, \"div\", 50);\n    i0.ɵɵelement(9, \"fuse-date-range\", 51);\n    i0.ɵɵelementStart(10, \"mat-checkbox\", 52);\n    i0.ɵɵtext(11, \" All day \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(12, CalendarComponent_ng_template_57_ng_container_1_div_12_Template, 5, 2, \"div\", 53);\n    i0.ɵɵelementStart(13, \"div\", 54);\n    i0.ɵɵelement(14, \"mat-icon\", 45);\n    i0.ɵɵelementStart(15, \"mat-form-field\", 46);\n    i0.ɵɵelementStart(16, \"mat-select\", 55);\n    i0.ɵɵlistener(\"change\", function CalendarComponent_ng_template_57_ng_container_1_Template_mat_select_change_16_listener($event) {\n      return $event.stopImmediatePropagation();\n    });\n    i0.ɵɵelementStart(17, \"mat-select-trigger\", 56);\n    i0.ɵɵelement(18, \"span\", 57);\n    i0.ɵɵelementStart(19, \"span\", 58);\n    i0.ɵɵtext(20);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(21, CalendarComponent_ng_template_57_ng_container_1_ng_container_21_Template, 6, 3, \"ng-container\", 59);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(22, \"div\", 48);\n    i0.ɵɵelement(23, \"mat-icon\", 60);\n    i0.ɵɵelementStart(24, \"mat-form-field\", 61);\n    i0.ɵɵelementStart(25, \"textarea\", 62);\n    i0.ɵɵtext(26, \"                                    \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(27, \"div\", 63);\n    i0.ɵɵtemplate(28, CalendarComponent_ng_template_57_ng_container_1_button_28_Template, 2, 1, \"button\", 64);\n    i0.ɵɵtemplate(29, CalendarComponent_ng_template_57_ng_container_1_button_29_Template, 2, 1, \"button\", 65);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r7 = i0.ɵɵnextContext(2);\n    let tmp_14_0;\n    let tmp_15_0;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"formGroup\", ctx_r7.eventForm);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"svgIcon\", \"heroicons_outline:pencil-alt\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"formControlName\", \"title\")(\"placeholder\", \"Event title\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"svgIcon\", \"heroicons_outline:calendar\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"formControlName\", \"range\")(\"dateFormat\", ctx_r7.settings.dateFormat)(\"timeRange\", !ctx_r7.eventForm.get(\"allDay\").value)(\"timeFormat\", ctx_r7.settings.timeFormat);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"color\", \"primary\")(\"formControlName\", \"allDay\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r7.event.recurrence || ctx_r7.eventEditMode !== \"single\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"svgIcon\", \"heroicons_outline:tag\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"formControlName\", \"calendarId\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngClass\", (tmp_14_0 = ctx_r7.getCalendar(ctx_r7.eventForm.get(\"calendarId\").value)) == null ? null : tmp_14_0.color);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate((tmp_15_0 = ctx_r7.getCalendar(ctx_r7.eventForm.get(\"calendarId\").value)) == null ? null : tmp_15_0.title);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r7.calendars);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"svgIcon\", \"heroicons_outline:menu-alt-2\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"matAutosizeMinRows\", 1)(\"formControlName\", \"description\")(\"placeholder\", \"Event description\");\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngIf\", ctx_r7.panelMode === \"add\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r7.panelMode === \"edit\");\n  }\n}\nfunction CalendarComponent_ng_template_57_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, CalendarComponent_ng_template_57_ng_container_0_Template, 23, 13, \"ng-container\", 26);\n    i0.ɵɵtemplate(1, CalendarComponent_ng_template_57_ng_container_1_Template, 30, 23, \"ng-container\", 26);\n  }\n  if (rf & 2) {\n    const ctx_r5 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngIf\", ctx_r5.panelMode === \"view\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r5.panelMode === \"add\" || ctx_r5.panelMode === \"edit\");\n  }\n}\nexport let CalendarComponent = /*#__PURE__*/(() => {\n  class CalendarComponent {\n    /**\r\n     * Constructor\r\n     */\n    constructor(_calendarService, _changeDetectorRef, _document, _formBuilder, _matDialog, _overlay, _fuseMediaWatcherService, _viewContainerRef, utilitiesService) {\n      this._calendarService = _calendarService;\n      this._changeDetectorRef = _changeDetectorRef;\n      this._document = _document;\n      this._formBuilder = _formBuilder;\n      this._matDialog = _matDialog;\n      this._overlay = _overlay;\n      this._fuseMediaWatcherService = _fuseMediaWatcherService;\n      this._viewContainerRef = _viewContainerRef;\n      this.utilitiesService = utilitiesService;\n      this.calendarPlugins = [dayGridPlugin, interactionPlugin, listPlugin, momentPlugin, rrulePlugin, timeGridPlugin];\n      this.drawerMode = 'side';\n      this.drawerOpened = true;\n      this.eventEditMode = 'single';\n      this.events = [];\n      this.panelMode = 'view';\n      this.view = 'dayGridMonth';\n      this._unsubscribeAll = new Subject();\n      this.allAppointments = [];\n    }\n    // -----------------------------------------------------------------------------------------------------\n    // @ Accessors\n    // -----------------------------------------------------------------------------------------------------\n    /**\r\n     * Getter for event's recurrence status\r\n     */\n    get recurrenceStatus() {\n      // Get the recurrence from event form\n      const recurrence = this.eventForm.get('recurrence').value;\n      // Return null, if there is no recurrence on the event\n      if (!recurrence) {\n        return null;\n      }\n      // Convert the recurrence rule to text\n      let ruleText = RRule.fromString(recurrence).toText();\n      ruleText = ruleText.charAt(0).toUpperCase() + ruleText.slice(1);\n      // Return the rule text\n      return ruleText;\n    }\n    // -----------------------------------------------------------------------------------------------------\n    // @ Lifecycle hooks\n    // -----------------------------------------------------------------------------------------------------\n    /**\r\n     * On init\r\n     */\n    ngOnInit() {\n      this.getAllAppointments();\n      // Create the event form\n      this.eventForm = this._formBuilder.group({\n        id: [''],\n        calendarId: [''],\n        recurringEventId: [null],\n        title: [''],\n        description: [''],\n        start: [null],\n        end: [null],\n        duration: [null],\n        allDay: [true],\n        recurrence: [null],\n        range: [{}]\n      });\n      // Subscribe to 'range' field value changes\n      this.eventForm.get('range').valueChanges.subscribe(value => {\n        if (!value) {\n          return;\n        }\n        // Set the 'start' field value from the range\n        this.eventForm.get('start').setValue(value.start, {\n          emitEvent: false\n        });\n        // If this is a recurring event...\n        if (this.eventForm.get('recurrence').value) {\n          // Update the recurrence rules if needed\n          this._updateRecurrenceRule();\n          // Set the duration field\n          const duration = moment(value.end).diff(moment(value.start), 'minutes');\n          this.eventForm.get('duration').setValue(duration, {\n            emitEvent: false\n          });\n          // Update the end value\n          this._updateEndValue();\n        }\n        // Otherwise...\n        else {\n          // Set the end field\n          this.eventForm.get('end').setValue(value.end, {\n            emitEvent: false\n          });\n        }\n      });\n      // Subscribe to 'recurrence' field changes\n      this.eventForm.get('recurrence').valueChanges.subscribe(value => {\n        // If this is a recurring event...\n        if (value) {\n          // Update the end value\n          this._updateEndValue();\n        }\n      });\n      // Get calendars\n      this._calendarService.calendars$.pipe(takeUntil(this._unsubscribeAll)).subscribe(calendars => {\n        // Store the calendars\n        this.calendars = calendars;\n        // Mark for check\n        this._changeDetectorRef.markForCheck();\n      });\n      // Get events\n      this._calendarService.events$.pipe(takeUntil(this._unsubscribeAll)).subscribe(events => {\n        debugger;\n        // Clone the events to change the object reference so\n        // that the FullCalendar can trigger a re-render.\n        this.events = cloneDeep(events);\n        // Mark for check\n        this._changeDetectorRef.markForCheck();\n      });\n      // Get settings\n      this._calendarService.settings$.pipe(takeUntil(this._unsubscribeAll)).subscribe(settings => {\n        // Store the settings\n        this.settings = settings;\n        // Set the FullCalendar event time format based on the time format setting\n        this.eventTimeFormat = {\n          hour: settings.timeFormat === '12' ? 'numeric' : '2-digit',\n          hour12: settings.timeFormat === '12',\n          minute: '2-digit',\n          meridiem: settings.timeFormat === '12' ? 'short' : false\n        };\n        // Mark for check\n        this._changeDetectorRef.markForCheck();\n      });\n      // Subscribe to media changes\n      this._fuseMediaWatcherService.onMediaChange$.pipe(takeUntil(this._unsubscribeAll)).subscribe(({\n        matchingAliases\n      }) => {\n        // Set the drawerMode and drawerOpened if the given breakpoint is active\n        if (matchingAliases.includes('md')) {\n          this.drawerMode = 'side';\n          this.drawerOpened = true;\n        } else {\n          this.drawerMode = 'over';\n          this.drawerOpened = false;\n        }\n        // Mark for check\n        this._changeDetectorRef.markForCheck();\n      });\n      // Build the view specific FullCalendar options\n      this.views = {\n        dayGridMonth: {\n          eventLimit: 3,\n          eventTimeFormat: this.eventTimeFormat,\n          fixedWeekCount: false\n        },\n        timeGrid: {\n          allDayText: '',\n          columnHeaderFormat: {\n            weekday: 'short',\n            day: 'numeric',\n            omitCommas: true\n          },\n          columnHeaderHtml: date => `<span class=\"fc-weekday\">${moment(date).format('ddd')}</span>\n                                                       <span class=\"fc-date\">${moment(date).format('D')}</span>`,\n          slotDuration: '01:00:00',\n          slotLabelFormat: this.eventTimeFormat\n        },\n        timeGridWeek: {},\n        timeGridDay: {},\n        listYear: {\n          allDayText: 'All day',\n          eventTimeFormat: this.eventTimeFormat,\n          listDayFormat: false,\n          listDayAltFormat: false\n        }\n      };\n    }\n    /**\r\n     * After view init\r\n     */\n    ngAfterViewInit() {\n      // Get the full calendar API\n      this._fullCalendarApi = this._fullCalendar.getApi();\n      // Get the current view's title\n      this.viewTitle = this._fullCalendarApi.view.title;\n      // Get the view's current start and end dates, add/subtract\n      // 60 days to create a ~150 days period to fetch the data for\n      const viewStart = moment(this._fullCalendarApi.view.currentStart).subtract(60, 'days');\n      const viewEnd = moment(this._fullCalendarApi.view.currentEnd).add(60, 'days');\n      // Get events\n      this._calendarService.getEvents(viewStart, viewEnd, true).subscribe();\n    }\n    /**\r\n     * On destroy\r\n     */\n    ngOnDestroy() {\n      // Unsubscribe from all subscriptions\n      this._unsubscribeAll.next();\n      this._unsubscribeAll.complete();\n      // Dispose the overlay\n      if (this._eventPanelOverlayRef) {\n        this._eventPanelOverlayRef.dispose();\n      }\n    }\n    // -----------------------------------------------------------------------------------------------------\n    // @ Public methods\n    // -----------------------------------------------------------------------------------------------------\n    /**\r\n     * Toggle Drawer\r\n     */\n    toggleDrawer() {\n      // Toggle the drawer\n      this._drawer.toggle();\n    }\n    /**\r\n     * Open recurrence panel\r\n     */\n    openRecurrenceDialog() {\n      debugger;\n      // Open the dialog\n      const dialogRef = this._matDialog.open(CalendarRecurrenceComponent, {\n        panelClass: 'calendar-event-recurrence-dialog',\n        data: {\n          event: this.eventForm.value\n        }\n      });\n      // After dialog closed\n      dialogRef.afterClosed().subscribe(result => {\n        // Return if canceled\n        if (!result || !result.recurrence) {\n          return;\n        }\n        // Only update the recurrence if it actually changed\n        if (this.eventForm.get('recurrence').value === result.recurrence) {\n          return;\n        }\n        // If returned value is 'cleared'...\n        if (result.recurrence === 'cleared') {\n          // Clear the recurrence field if recurrence cleared\n          this.eventForm.get('recurrence').setValue(null);\n        }\n        // Otherwise...\n        else {\n          // Update the recurrence field with the result\n          this.eventForm.get('recurrence').setValue(result.recurrence);\n        }\n      });\n    }\n    /**\r\n     * Change the event panel mode between view and edit\r\n     * mode while setting the event edit mode\r\n     *\r\n     * @param panelMode\r\n     * @param eventEditMode\r\n     */\n    changeEventPanelMode(panelMode, eventEditMode = 'single') {\n      // Set the panel mode\n      this.panelMode = panelMode;\n      // Set the event edit mode\n      this.eventEditMode = eventEditMode;\n      // Update the panel position\n      setTimeout(() => {\n        this._eventPanelOverlayRef.updatePosition();\n      });\n    }\n    /**\r\n     * Get calendar by id\r\n     *\r\n     * @param id\r\n     */\n    getCalendar(id) {\n      if (!id) {\n        return;\n      }\n      return this.calendars.find(calendar => calendar.id === id);\n    }\n    /**\r\n     * Change the calendar view\r\n     *\r\n     * @param view\r\n     */\n    changeView(view) {\n      debugger;\n      // Store the view\n      this.view = view;\n      // If the FullCalendar API is available...\n      if (this._fullCalendarApi) {\n        // Set the view\n        this._fullCalendarApi.changeView(view);\n        // Update the view title\n        this.viewTitle = this._fullCalendarApi.view.title;\n      }\n    }\n    /**\r\n     * Moves the calendar one stop back\r\n     */\n    previous() {\n      // Go to previous stop\n      this._fullCalendarApi.prev();\n      // Update the view title\n      this.viewTitle = this._fullCalendarApi.view.title;\n      // Get the view's current start date\n      const start = moment(this._fullCalendarApi.view.currentStart);\n      // Prefetch past events\n      this._calendarService.prefetchPastEvents(start).subscribe();\n    }\n    /**\r\n     * Moves the calendar to the current date\r\n     */\n    today() {\n      // Go to today\n      this._fullCalendarApi.today();\n      // Update the view title\n      this.viewTitle = this._fullCalendarApi.view.title;\n    }\n    /**\r\n     * Moves the calendar one stop forward\r\n     */\n    next() {\n      // Go to next stop\n      this._fullCalendarApi.next();\n      // Update the view title\n      this.viewTitle = this._fullCalendarApi.view.title;\n      // Get the view's current end date\n      const end = moment(this._fullCalendarApi.view.currentEnd);\n      // Prefetch future events\n      this._calendarService.prefetchFutureEvents(end).subscribe();\n    }\n    /**\r\n     * On date click\r\n     *\r\n     * @param calendarEvent\r\n     */\n    onDateClick(calendarEvent) {\n      // Prepare the event\n      const event = {\n        appointmentID: null,\n        id: null,\n        calendarId: this.calendars[0].id,\n        recurringEventId: null,\n        isFirstInstance: false,\n        title: '',\n        description: '',\n        start: moment(calendarEvent.date).startOf('day').toISOString(),\n        end: moment(calendarEvent.date).endOf('day').toISOString(),\n        duration: null,\n        allDay: true,\n        recurrence: null,\n        range: {\n          start: moment(calendarEvent.date).startOf('day').toISOString(),\n          end: moment(calendarEvent.date).endOf('day').toISOString()\n        }\n      };\n      // Set the event\n      this.event = event;\n      // Set the el on calendarEvent for consistency\n      calendarEvent.el = calendarEvent.dayEl;\n      // Reset the form and fill the event\n      this.eventForm.reset();\n      this.eventForm.patchValue(event);\n      // Open the event panel\n      this._openEventPanel(calendarEvent);\n      // Change the event panel mode\n      this.changeEventPanelMode('add');\n    }\n    /**\r\n     * On event click\r\n     *\r\n     * @param calendarEvent\r\n     */\n    onEventClick(calendarEvent) {\n      debugger;\n      // Find the event with the clicked event's id\n      const event = cloneDeep(this.allAppointments.find(item => item.appointmentID === calendarEvent.event._def.extendedProps.appointmentID));\n      // const event: any = cloneDeep(this.events.find(item => item.id === calendarEvent.event.id));\n      // Set the event\n      this.event = event;\n      // Prepare the end value\n      let end;\n      // If this is a recurring event...\n      if (event.recuringEventId) {\n        // Calculate the end value using the duration\n        end = moment(event.start).add(event.duration, 'minutes').toISOString();\n      }\n      // Otherwise...\n      else {\n        // Set the end value from the end\n        end = event.end;\n      }\n      // Set the range on the event\n      event.range = {\n        start: event.start,\n        end\n      };\n      // Reset the form and fill the event\n      this.eventForm.reset();\n      this.eventForm.patchValue(event);\n      // Open the event panel\n      this._openEventPanel(calendarEvent);\n    }\n    /**\r\n     * On event render\r\n     *\r\n     * @param calendarEvent\r\n     */\n    onEventRender(calendarEvent) {\n      // Get event's calendar\n      const calendar = this.calendars.find(item => item.id === calendarEvent.event.extendedProps.calendarId);\n      // Return if the calendar doesn't exist...\n      if (!calendar) {\n        return;\n      }\n      // If current view is year list...\n      if (this.view === 'listYear') {\n        // Create a new 'fc-list-item-date' node\n        const fcListItemDate1 = `<td class=\"fc-list-item-date\">\n                                            <span>\n                                                <span>${moment(calendarEvent.event.start).format('D')}</span>\n                                                <span>${moment(calendarEvent.event.start).format('MMM')}, ${moment(calendarEvent.event.start).format('ddd')}</span>\n                                            </span>\n                                        </td>`;\n        // Insert the 'fc-list-item-date' into the calendar event element\n        calendarEvent.el.insertAdjacentHTML('afterbegin', fcListItemDate1);\n        // Set the color class of the event dot\n        calendarEvent.el.getElementsByClassName('fc-event-dot')[0].classList.add(calendar.color);\n        // Set the event's title to '(No title)' if event title is not available\n        if (!calendarEvent.event.title) {\n          calendarEvent.el.querySelector('.fc-list-item-title').innerText = '(No title)';\n        }\n      }\n      // If current view is not month list...\n      else {\n        // Set the color class of the event\n        calendarEvent.el.classList.add(calendar.color);\n        // Set the event's title to '(No title)' if event title is not available\n        if (!calendarEvent.event.title) {\n          calendarEvent.el.querySelector('.fc-title').innerText = '(No title)';\n        }\n      }\n      // Set the event's visibility\n      calendarEvent.el.style.display = calendar.visible ? 'flex' : 'none';\n    }\n    /**\r\n     * On calendar updated\r\n     *\r\n     * @param calendar\r\n     */\n    onCalendarUpdated(calendar) {\n      // Re-render the events\n      this._fullCalendarApi.rerenderEvents();\n    }\n    /**\r\n     * Add event\r\n     */\n    addEvent() {\n      debugger;\n      // Get the clone of the event form value\n      let newEvent = clone(this.eventForm.value);\n      // If the event is a recurring event...\n      if (newEvent.recurrence) {\n        // Set the event duration\n        newEvent.duration = moment(newEvent.range.end).diff(moment(newEvent.range.start), 'minutes');\n      }\n      // Modify the event before sending it to the server\n      newEvent = omit(newEvent, ['range', 'recurringEventId']);\n      // Add the event\n      this._calendarService.addEvent(newEvent).subscribe(() => {\n        // Reload events\n        this._calendarService.reloadEvents().subscribe();\n        // Close the event panel\n        this._closeEventPanel();\n      });\n    }\n    /**\r\n     * Update the event\r\n     */\n    updateEvent() {\n      debugger;\n      // Get the clone of the event form value\n      let event = clone(this.eventForm.value);\n      const {\n          range\n        } = event,\n        eventWithoutRange = __rest(event, [\"range\"]);\n      // Get the original event\n      const originalEvent = this.events.find(item => item.id === event.id);\n      // Return if there are no changes made to the event\n      if (isEqual(eventWithoutRange, originalEvent)) {\n        // Close the event panel\n        this._closeEventPanel();\n        // Return\n        return;\n      }\n      // If the event is a recurring event...\n      if (event.recurrence && event.recurringEventId) {\n        // Update the recurring event on the server\n        this._calendarService.updateRecurringEvent(event, originalEvent, this.eventEditMode).subscribe(() => {\n          // Reload events\n          this._calendarService.reloadEvents().subscribe();\n          // Close the event panel\n          this._closeEventPanel();\n        });\n        // Return\n        return;\n      }\n      // If the event is a non-recurring event...\n      if (!event.recurrence && !event.recurringEventId) {\n        // Update the event on the server\n        this._calendarService.updateEvent(event.id, event).subscribe(() => {\n          // Close the event panel\n          this._closeEventPanel();\n        });\n        // Return\n        return;\n      }\n      // If the event was a non-recurring event but now it will be a recurring event...\n      if (event.recurrence && !event.recurringEventId) {\n        // Set the event duration\n        event.duration = moment(event.range.end).diff(moment(event.range.start), 'minutes');\n        // Omit unnecessary fields\n        event = omit(event, ['range', 'recurringEventId']);\n        // Update the event on the server\n        this._calendarService.updateEvent(event.id, event).subscribe(() => {\n          // Reload events\n          this._calendarService.reloadEvents().subscribe();\n          // Close the event panel\n          this._closeEventPanel();\n        });\n        // Return\n        return;\n      }\n      // If the event was a recurring event but now it will be a non-recurring event...\n      if (!event.recurrence && event.recurringEventId) {\n        // Set the end date\n        event.end = moment(event.start).add(event.duration, 'minutes').toISOString();\n        // Set the duration as null\n        event.duration = null;\n        // Update the recurring event on the server\n        this._calendarService.updateRecurringEvent(event, originalEvent, this.eventEditMode).subscribe(() => {\n          // Reload events\n          this._calendarService.reloadEvents().subscribe();\n          // Close the event panel\n          this._closeEventPanel();\n        });\n      }\n    }\n    /**\r\n     * Delete the given event\r\n     *\r\n     * @param event\r\n     * @param mode\r\n     */\n    deleteEvent(event, mode = 'single') {\n      // If the event is a recurring event...\n      if (event.recurrence) {\n        // Delete the recurring event on the server\n        this._calendarService.deleteRecurringEvent(event, mode).subscribe(() => {\n          // Reload events\n          this._calendarService.reloadEvents().subscribe();\n          // Close the event panel\n          this._closeEventPanel();\n        });\n      }\n      // If the event is a non-recurring, normal event...\n      else {\n        // Update the event on the server\n        this._calendarService.deleteEvent(event.id).subscribe(() => {\n          // Close the event panel\n          this._closeEventPanel();\n        });\n      }\n    }\n    // -----------------------------------------------------------------------------------------------------\n    // @ Private methods\n    // -----------------------------------------------------------------------------------------------------\n    /**\r\n     * Create the event panel overlay\r\n     *\r\n     * @private\r\n     */\n    _createEventPanelOverlay(positionStrategy) {\n      // Create the overlay\n      this._eventPanelOverlayRef = this._overlay.create({\n        panelClass: ['calendar-event-panel'],\n        backdropClass: '',\n        hasBackdrop: true,\n        scrollStrategy: this._overlay.scrollStrategies.reposition(),\n        positionStrategy\n      });\n      // Detach the overlay from the portal on backdrop click\n      this._eventPanelOverlayRef.backdropClick().subscribe(() => {\n        this._closeEventPanel();\n      });\n    }\n    /**\r\n     * Open the event panel\r\n     *\r\n     * @private\r\n     */\n    _openEventPanel(calendarEvent) {\n      const positionStrategy = this._overlay.position().flexibleConnectedTo(calendarEvent.el).withFlexibleDimensions(false).withPositions([{\n        originX: 'end',\n        originY: 'top',\n        overlayX: 'start',\n        overlayY: 'top',\n        offsetX: 8\n      }, {\n        originX: 'start',\n        originY: 'top',\n        overlayX: 'end',\n        overlayY: 'top',\n        offsetX: -8\n      }, {\n        originX: 'start',\n        originY: 'bottom',\n        overlayX: 'end',\n        overlayY: 'bottom',\n        offsetX: -8\n      }, {\n        originX: 'end',\n        originY: 'bottom',\n        overlayX: 'start',\n        overlayY: 'bottom',\n        offsetX: 8\n      }]);\n      // Create the overlay if it doesn't exist\n      if (!this._eventPanelOverlayRef) {\n        this._createEventPanelOverlay(positionStrategy);\n      }\n      // Otherwise, just update the position\n      else {\n        this._eventPanelOverlayRef.updatePositionStrategy(positionStrategy);\n      }\n      // Attach the portal to the overlay\n      this._eventPanelOverlayRef.attach(new TemplatePortal(this._eventPanel, this._viewContainerRef));\n      // Mark for check\n      this._changeDetectorRef.markForCheck();\n    }\n    /**\r\n     * Close the event panel\r\n     *\r\n     * @private\r\n     */\n    _closeEventPanel() {\n      // Detach the overlay from the portal\n      this._eventPanelOverlayRef.detach();\n      // Reset the panel and event edit modes\n      this.panelMode = 'view';\n      this.eventEditMode = 'single';\n      // Mark for check\n      this._changeDetectorRef.markForCheck();\n    }\n    /**\r\n     * Update the recurrence rule based on the event if needed\r\n     *\r\n     * @private\r\n     */\n    _updateRecurrenceRule() {\n      // Get the event\n      const event = this.eventForm.value;\n      // Return if this is a non-recurring event\n      if (!event.recurrence) {\n        return;\n      }\n      // Parse the recurrence rule\n      const parsedRules = {};\n      event.recurrence.split(';').forEach(rule => {\n        // Split the rule\n        const parsedRule = rule.split('=');\n        // Add the rule to the parsed rules\n        parsedRules[parsedRule[0]] = parsedRule[1];\n      });\n      // If there is a BYDAY rule, split that as well\n      if (parsedRules['BYDAY']) {\n        parsedRules['BYDAY'] = parsedRules['BYDAY'].split(',');\n      }\n      // Do not update the recurrence rule if ...\n      // ... the frequency is DAILY,\n      // ... the frequency is WEEKLY and BYDAY has multiple values,\n      // ... the frequency is MONTHLY and there isn't a BYDAY rule,\n      // ... the frequency is YEARLY,\n      if (parsedRules['FREQ'] === 'DAILY' || parsedRules['FREQ'] === 'WEEKLY' && parsedRules['BYDAY'].length > 1 || parsedRules['FREQ'] === 'MONTHLY' && !parsedRules['BYDAY'] || parsedRules['FREQ'] === 'YEARLY') {\n        return;\n      }\n      // If the frequency is WEEKLY, update the BYDAY value with the new one\n      if (parsedRules['FREQ'] === 'WEEKLY') {\n        parsedRules['BYDAY'] = [moment(event.start).format('dd').toUpperCase()];\n      }\n      // If the frequency is MONTHLY, update the BYDAY value with the new one\n      if (parsedRules['FREQ'] === 'MONTHLY') {\n        // Calculate the weekday\n        const weekday = moment(event.start).format('dd').toUpperCase();\n        // Calculate the nthWeekday\n        let nthWeekdayNo = 1;\n        while (moment(event.start).isSame(moment(event.start).subtract(nthWeekdayNo, 'week'), 'month')) {\n          nthWeekdayNo++;\n        }\n        // Set the BYDAY\n        parsedRules['BYDAY'] = [nthWeekdayNo + weekday];\n      }\n      // Generate the rule string from the parsed rules\n      const rules = [];\n      Object.keys(parsedRules).forEach(key => {\n        rules.push(key + '=' + (Array.isArray(parsedRules[key]) ? parsedRules[key].join(',') : parsedRules[key]));\n      });\n      const rrule = rules.join(';');\n      // Update the recurrence rule\n      this.eventForm.get('recurrence').setValue(rrule);\n    }\n    /**\r\n     * Update the end value based on the recurrence and duration\r\n     *\r\n     * @private\r\n     */\n    _updateEndValue() {\n      // Get the event recurrence\n      const recurrence = this.eventForm.get('recurrence').value;\n      // Return if this is a non-recurring event\n      if (!recurrence) {\n        return;\n      }\n      // Parse the recurrence rule\n      const parsedRules = {};\n      recurrence.split(';').forEach(rule => {\n        // Split the rule\n        const parsedRule = rule.split('=');\n        // Add the rule to the parsed rules\n        parsedRules[parsedRule[0]] = parsedRule[1];\n      });\n      // If there is an UNTIL rule...\n      if (parsedRules['UNTIL']) {\n        // Use that to set the end date\n        this.eventForm.get('end').setValue(parsedRules['UNTIL']);\n        // Return\n        return;\n      }\n      // If there is a COUNT rule...\n      if (parsedRules['COUNT']) {\n        // Generate the RRule string\n        const rrule = 'DTSTART=' + moment(this.eventForm.get('start').value).utc().format('YYYYMMDD[T]HHmmss[Z]') + '\\nRRULE:' + recurrence;\n        // Use RRule string to generate dates\n        const dates = RRule.fromString(rrule).all();\n        // Get the last date from dates array and set that as the end date\n        this.eventForm.get('end').setValue(moment(dates[dates.length - 1]).toISOString());\n        // Return\n        return;\n      }\n      // If there are no UNTIL or COUNT, set the end date to a fixed value\n      this.eventForm.get('end').setValue(moment().year(9999).endOf('year').toISOString());\n    }\n    getAllAppointments() {\n      this.utilitiesService.getAllAppointments().subscribe(data => {\n        if (data) {\n          debugger;\n          this.allAppointments = [];\n          var dt1 = data[0].serviceDate + data[0].slotTime;\n          var dt = new Date(data[0].createdDate + data[0].slotTime);\n          for (var i = 0; i < data.length; i++) {\n            this.allAppointments.push({\n              appointmentID: data[i].appointmentID,\n              id: 'd2220429-9214-4c4b-9da6-f8da2fbfd507',\n              calendarId: '1a470c8e-40ed-4c2d-b590-a4f1f6ead6cc',\n              title: data[i].patient,\n              description: data[i].serviceName,\n              start: data[i].createdDate,\n              end: data[i].createdDate,\n              duration: 0,\n              allDay: false,\n              recurrence: 'FREQ=MONTHLY;INTERVAL=1;BYDAY=1TU'\n            });\n          }\n          this.allAppointments = cloneDeep(this.allAppointments);\n          this._changeDetectorRef.markForCheck();\n        }\n      }, () => {});\n    }\n  }\n  CalendarComponent.ɵfac = function CalendarComponent_Factory(t) {\n    return new (t || CalendarComponent)(i0.ɵɵdirectiveInject(i1.CalendarService), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(DOCUMENT), i0.ɵɵdirectiveInject(i2.FormBuilder), i0.ɵɵdirectiveInject(i3.MatDialog), i0.ɵɵdirectiveInject(i4.Overlay), i0.ɵɵdirectiveInject(i5.FuseMediaWatcherService), i0.ɵɵdirectiveInject(i0.ViewContainerRef), i0.ɵɵdirectiveInject(i6.UtilitiesService));\n  };\n  CalendarComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: CalendarComponent,\n    selectors: [[\"calendar\"]],\n    viewQuery: function CalendarComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 5);\n        i0.ɵɵviewQuery(_c1, 5);\n        i0.ɵɵviewQuery(_c2, 5);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._eventPanel = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._fullCalendar = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._drawer = _t.first);\n      }\n    },\n    decls: 59,\n    vars: 27,\n    consts: [[1, \"absolute\", \"inset-0\", \"flex\", \"flex-col\", \"min-w-0\", \"overflow-hidden\", \"dark:bg-gray-900\"], [1, \"flex-auto\", \"h-full\", \"bg-transparent\"], [1, \"flex\"], [1, \"flex\", \"flex-col\", \"flex-auto\"], [1, \"flex\", \"flex-0\", \"flex-wrap\", \"items-center\", \"p-4\", \"border-b\", \"bg-card\"], [\"mat-icon-button\", \"\", 3, \"click\"], [3, \"svgIcon\"], [1, \"ml-4\", \"text-2xl\", \"font-semibold\", \"tracking-tight\", \"whitespace-nowrap\"], [\"mat-icon-button\", \"\", 1, \"ml-5\", 3, \"click\"], [1, \"icon-size-5\", 3, \"svgIcon\"], [\"mat-icon-button\", \"\", 1, \"hidden\", \"md:inline-flex\", 3, \"click\"], [1, \"hidden\", \"md:block\", \"ml-auto\"], [1, \"fuse-mat-dense\", \"fuse-mat-no-subscript\", \"w-30\", \"ml-2\"], [3, \"value\", \"selectionChange\"], [\"viewChanger\", \"matSelect\"], [3, \"value\"], [1, \"md:hidden\", \"ml-auto\"], [\"mat-icon-button\", \"\", 1, \"\", 3, \"matMenuTriggerFor\"], [\"actionsMenu\", \"matMenu\"], [\"mat-menu-item\", \"\", 3, \"click\"], [\"mat-menu-item\", \"\", 3, \"matMenuTriggerFor\"], [\"actionsViewsMenu\", \"matMenu\"], [\"mat-menu-item\", \"\", 3, \"disabled\", \"click\"], [3, \"defaultView\", \"events\", \"firstDay\", \"handleWindowResize\", \"header\", \"height\", \"plugins\", \"views\", \"dateClick\", \"eventClick\", \"eventRender\"], [\"fullCalendar\", \"\"], [\"eventPanel\", \"\"], [4, \"ngIf\"], [1, \"flex-auto\", \"p-8\"], [1, \"flex\", \"flex-auto\", \"justify-between\", \"ml-6\"], [1, \"text-3xl\", \"font-semibold\", \"tracking-tight\", \"leading-none\"], [1, \"mt-0.5\", \"text-secondary\"], [1, \"text-secondary\"], [1, \"flex\", \"-mt-2\", \"-mr-2\", \"ml-10\"], [\"class\", \"flex mt-6\", 4, \"ngIf\"], [1, \"flex\", \"mt-6\"], [1, \"flex\", \"flex-auto\", \"items-center\", \"ml-6\"], [1, \"w-2\", \"h-2\", \"rounded-full\", 3, \"ngClass\"], [1, \"ml-3\", \"leading-none\"], [\"mat-icon-button\", \"\", 3, \"matMenuTriggerFor\"], [\"editMenu\", \"matMenu\"], [\"mat-menu-item\", \"\", 3, \"click\", 4, \"ngIf\"], [\"deleteMenu\", \"matMenu\"], [1, \"flex-auto\", \"ml-6\"], [1, \"flex\", \"flex-col\", \"w-full\", \"p-6\", \"pt-8\", \"sm:pt-10\", \"sm:pr-8\", 3, \"formGroup\"], [1, \"flex\", \"items-center\"], [1, \"hidden\", \"sm:inline-flex\", \"mr-6\", 3, \"svgIcon\"], [1, \"fuse-mat-no-subscript\", \"flex-auto\"], [\"matInput\", \"\", 3, \"formControlName\", \"placeholder\"], [1, \"flex\", \"items-start\", \"mt-6\"], [1, \"hidden\", \"sm:inline-flex\", \"mt-3\", \"mr-6\", 3, \"svgIcon\"], [1, \"flex-auto\"], [3, \"formControlName\", \"dateFormat\", \"timeRange\", \"timeFormat\"], [1, \"mt-4\", 3, \"color\", \"formControlName\"], [\"class\", \"flex items-center mt-6\", 4, \"ngIf\"], [1, \"flex\", \"items-center\", \"mt-6\"], [3, \"formControlName\", \"change\"], [1, \"inline-flex\", \"items-center\", \"leading-none\"], [1, \"w-3\", \"h-3\", \"rounded-full\", 3, \"ngClass\"], [1, \"ml-3\"], [4, \"ngFor\", \"ngForOf\"], [1, \"hidden\", \"sm:inline-flex\", \"mr-6\", \"mt-3\", 3, \"svgIcon\"], [1, \"fuse-mat-textarea\", \"fuse-mat-no-subscript\", \"flex-auto\"], [\"matInput\", \"\", \"matTextareaAutosize\", \"\", 3, \"matAutosizeMinRows\", \"formControlName\", \"placeholder\"], [1, \"ml-auto\", \"mt-6\"], [\"class\", \"add\", \"mat-flat-button\", \"\", \"type\", \"button\", 3, \"color\", \"click\", 4, \"ngIf\"], [\"class\", \"save\", \"mat-flat-button\", \"\", \"type\", \"button\", 3, \"color\", \"click\", 4, \"ngIf\"], [1, \"hidden\", \"sm:inline-flex\", \"mr-6\", \"transform\", \"-scale-x-1\", 3, \"svgIcon\"], [1, \"flex\", \"flex-auto\", \"items-center\", \"h-12\", \"px-4\", \"rounded-md\", \"border\", \"cursor-pointer\", \"shadow-sm\", \"border-gray-300\", \"dark:bg-black\", \"dark:bg-opacity-5\", \"dark:border-gray-500\", 3, \"click\"], [1, \"inline-flex\", \"items-center\"], [\"mat-flat-button\", \"\", \"type\", \"button\", 1, \"add\", 3, \"color\", \"click\"], [\"mat-flat-button\", \"\", \"type\", \"button\", 1, \"save\", 3, \"color\", \"click\"]],\n    template: function CalendarComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        const _r39 = i0.ɵɵgetCurrentView();\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵelementStart(1, \"mat-drawer-container\", 1);\n        i0.ɵɵelementStart(2, \"mat-drawer-content\", 2);\n        i0.ɵɵelementStart(3, \"div\", 3);\n        i0.ɵɵelementStart(4, \"div\", 4);\n        i0.ɵɵelementStart(5, \"button\", 5);\n        i0.ɵɵlistener(\"click\", function CalendarComponent_Template_button_click_5_listener() {\n          return ctx.toggleDrawer();\n        });\n        i0.ɵɵelement(6, \"mat-icon\", 6);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(7, \"div\", 7);\n        i0.ɵɵtext(8);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(9, \"button\", 8);\n        i0.ɵɵlistener(\"click\", function CalendarComponent_Template_button_click_9_listener() {\n          return ctx.previous();\n        });\n        i0.ɵɵelement(10, \"mat-icon\", 9);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(11, \"button\", 5);\n        i0.ɵɵlistener(\"click\", function CalendarComponent_Template_button_click_11_listener() {\n          return ctx.next();\n        });\n        i0.ɵɵelement(12, \"mat-icon\", 9);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(13, \"button\", 10);\n        i0.ɵɵlistener(\"click\", function CalendarComponent_Template_button_click_13_listener() {\n          return ctx.today();\n        });\n        i0.ɵɵelement(14, \"mat-icon\", 6);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(15, \"div\", 11);\n        i0.ɵɵelementStart(16, \"mat-form-field\", 12);\n        i0.ɵɵelementStart(17, \"mat-select\", 13, 14);\n        i0.ɵɵlistener(\"selectionChange\", function CalendarComponent_Template_mat_select_selectionChange_17_listener() {\n          i0.ɵɵrestoreView(_r39);\n          const _r0 = i0.ɵɵreference(18);\n          return ctx.changeView(_r0.value);\n        });\n        i0.ɵɵelementStart(19, \"mat-option\", 15);\n        i0.ɵɵtext(20, \"Month\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(21, \"mat-option\", 15);\n        i0.ɵɵtext(22, \"Week\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(23, \"mat-option\", 15);\n        i0.ɵɵtext(24, \"Day\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(25, \"mat-option\", 15);\n        i0.ɵɵtext(26, \"Schedule\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(27, \"div\", 16);\n        i0.ɵɵelementStart(28, \"button\", 17);\n        i0.ɵɵelement(29, \"mat-icon\", 6);\n        i0.ɵɵelementStart(30, \"mat-menu\", null, 18);\n        i0.ɵɵelementStart(32, \"button\", 19);\n        i0.ɵɵlistener(\"click\", function CalendarComponent_Template_button_click_32_listener() {\n          return ctx.today();\n        });\n        i0.ɵɵelement(33, \"mat-icon\", 6);\n        i0.ɵɵelementStart(34, \"span\");\n        i0.ɵɵtext(35, \"Go to today\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(36, \"button\", 20);\n        i0.ɵɵelement(37, \"mat-icon\", 6);\n        i0.ɵɵelementStart(38, \"span\");\n        i0.ɵɵtext(39, \"View\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(40, \"mat-menu\", null, 21);\n        i0.ɵɵelementStart(42, \"button\", 22);\n        i0.ɵɵlistener(\"click\", function CalendarComponent_Template_button_click_42_listener() {\n          return ctx.changeView(\"dayGridMonth\");\n        });\n        i0.ɵɵelementStart(43, \"span\");\n        i0.ɵɵtext(44, \"Month\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(45, \"button\", 22);\n        i0.ɵɵlistener(\"click\", function CalendarComponent_Template_button_click_45_listener() {\n          return ctx.changeView(\"timeGridWeek\");\n        });\n        i0.ɵɵelementStart(46, \"span\");\n        i0.ɵɵtext(47, \"Week\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(48, \"button\", 22);\n        i0.ɵɵlistener(\"click\", function CalendarComponent_Template_button_click_48_listener() {\n          return ctx.changeView(\"timeGridDay\");\n        });\n        i0.ɵɵelementStart(49, \"span\");\n        i0.ɵɵtext(50, \"Day\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(51, \"button\", 22);\n        i0.ɵɵlistener(\"click\", function CalendarComponent_Template_button_click_51_listener() {\n          return ctx.changeView(\"listYear\");\n        });\n        i0.ɵɵelementStart(52, \"span\");\n        i0.ɵɵtext(53, \"Schedule\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(54, \"div\", 3);\n        i0.ɵɵelementStart(55, \"full-calendar\", 23, 24);\n        i0.ɵɵlistener(\"dateClick\", function CalendarComponent_Template_full_calendar_dateClick_55_listener($event) {\n          return ctx.onDateClick($event);\n        })(\"eventClick\", function CalendarComponent_Template_full_calendar_eventClick_55_listener($event) {\n          return ctx.onEventClick($event);\n        })(\"eventRender\", function CalendarComponent_Template_full_calendar_eventRender_55_listener($event) {\n          return ctx.onEventRender($event);\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(57, CalendarComponent_ng_template_57_Template, 2, 2, \"ng-template\", null, 25, i0.ɵɵtemplateRefExtractor);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n      if (rf & 2) {\n        const _r1 = i0.ɵɵreference(31);\n        const _r2 = i0.ɵɵreference(41);\n        i0.ɵɵadvance(6);\n        i0.ɵɵproperty(\"svgIcon\", \"heroicons_outline:menu\");\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate1(\" \", ctx.viewTitle, \" \");\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"svgIcon\", \"heroicons_solid:chevron-left\");\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"svgIcon\", \"heroicons_solid:chevron-right\");\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"svgIcon\", \"heroicons_outline:calendar\");\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"value\", ctx.view);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"value\", \"dayGridMonth\");\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"value\", \"timeGridWeek\");\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"value\", \"timeGridDay\");\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"value\", \"listYear\");\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"matMenuTriggerFor\", _r1);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"svgIcon\", \"heroicons_outline:dots-vertical\");\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"svgIcon\", \"heroicons_outline:calendar\");\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"matMenuTriggerFor\", _r2);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"svgIcon\", \"heroicons_outline:view-grid\");\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"disabled\", ctx.view === \"dayGridMonth\");\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"disabled\", ctx.view === \"timeGridWeek\");\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"disabled\", ctx.view === \"timeGridDay\");\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"disabled\", ctx.view === \"listYear\");\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"defaultView\", ctx.view)(\"events\", ctx.allAppointments)(\"firstDay\", ctx.settings.startWeekOn)(\"handleWindowResize\", false)(\"header\", false)(\"height\", \"parent\")(\"plugins\", ctx.calendarPlugins)(\"views\", ctx.views);\n      }\n    },\n    directives: [i7.MatDrawerContainer, i7.MatDrawerContent, i8.MatButton, i9.MatIcon, i10.MatFormField, i11.MatSelect, i12.MatOption, i13.MatMenuTrigger, i13.MatMenu, i13.MatMenuItem, i14.FullCalendarComponent, i15.NgIf, i15.NgClass, i2.ɵNgNoValidate, i2.NgControlStatusGroup, i2.FormGroupDirective, i16.MatInput, i2.DefaultValueAccessor, i2.NgControlStatus, i2.FormControlName, i17.FuseDateRangeComponent, i18.MatCheckbox, i11.MatSelectTrigger, i15.NgForOf, i16.MatTextareaAutosize],\n    pipes: [i15.DatePipe],\n    styles: [\"calendar full-calendar{display:flex;flex-direction:column;flex:1 0 auto;width:100%;height:100%}calendar full-calendar .fc-view-container{display:flex;flex-direction:column;flex:1 0 auto;width:100%;height:100%}calendar full-calendar .fc-view-container .fc-view.fc-dayGridMonth-view,calendar full-calendar .fc-view-container .fc-view.fc-timeGridWeek-view,calendar full-calendar .fc-view-container .fc-view.fc-timeGridDay-view{display:flex;flex-direction:column;flex:1 0 auto;width:100%;height:100%}calendar full-calendar .fc-view-container .fc-view.fc-dayGridMonth-view>table,calendar full-calendar .fc-view-container .fc-view.fc-timeGridWeek-view>table,calendar full-calendar .fc-view-container .fc-view.fc-timeGridDay-view>table{display:flex;flex-direction:column;flex:1 0 auto;height:100%}calendar full-calendar .fc-view-container .fc-view.fc-dayGridMonth-view>table>thead,calendar full-calendar .fc-view-container .fc-view.fc-timeGridWeek-view>table>thead,calendar full-calendar .fc-view-container .fc-view.fc-timeGridDay-view>table>thead{display:flex}calendar full-calendar .fc-view-container .fc-view.fc-dayGridMonth-view>table>tbody,calendar full-calendar .fc-view-container .fc-view.fc-timeGridWeek-view>table>tbody,calendar full-calendar .fc-view-container .fc-view.fc-timeGridDay-view>table>tbody{display:flex;flex:1 1 auto;overflow:hidden}calendar full-calendar .fc-view-container .fc-view.fc-dayGridMonth-view>table>tbody>tr,calendar full-calendar .fc-view-container .fc-view.fc-timeGridWeek-view>table>tbody>tr,calendar full-calendar .fc-view-container .fc-view.fc-timeGridDay-view>table>tbody>tr{display:flex}calendar full-calendar .fc-view-container .fc-view.fc-dayGridMonth-view>table>tbody>tr>td,calendar full-calendar .fc-view-container .fc-view.fc-timeGridWeek-view>table>tbody>tr>td,calendar full-calendar .fc-view-container .fc-view.fc-timeGridDay-view>table>tbody>tr>td{display:flex;flex-direction:column}calendar full-calendar .fc-view-container .fc-view.fc-dayGridMonth-view>table>tbody>tr>td .fc-scroller,calendar full-calendar .fc-view-container .fc-view.fc-timeGridWeek-view>table>tbody>tr>td .fc-scroller,calendar full-calendar .fc-view-container .fc-view.fc-timeGridDay-view>table>tbody>tr>td .fc-scroller{flex:1 1 auto;overflow:hidden scroll!important;height:auto!important}calendar full-calendar .fc-view-container .fc-view.fc-dayGridMonth-view>table>tbody>tr>td .fc-scroller{display:flex}calendar full-calendar .fc-view-container .fc-view.fc-dayGridMonth-view>table>tbody>tr>td .fc-scroller>.fc-day-grid{display:flex;flex-direction:column;min-height:580px}calendar full-calendar .fc-view-container .fc-view.fc-dayGridMonth-view>table>tbody>tr>td .fc-scroller>.fc-day-grid>.fc-row{flex:1 0 0;height:auto!important}calendar full-calendar .fc-view-container .fc-view.fc-listYear-view{width:100%;height:100%}calendar full-calendar .fc-view-container .fc-view.fc-listYear-view .fc-scroller{width:100%;height:100%!important;overflow:hidden!important}.calendar-event-panel{border-radius:8px;--tw-bg-opacity: 1;background-color:rgba(var(--fuse-bg-card-rgb),var(--tw-bg-opacity));--tw-shadow: 0 25px 50px -12px rgba(0, 0, 0, .25);box-shadow:var(--tw-ring-offset-shadow, 0 0 #0000),var(--tw-ring-shadow, 0 0 #0000),var(--tw-shadow)}\\n\"],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return CalendarComponent;\n})();\nage: 22;\nappointmentBill: \"Test\";\nappointmentDate: \"11/13/2021 00:00:00\";\nappointmentID: 1;\ncreatedDate: \"2021-11-14T11:18:17.04\";\ndiscount: \"10\";\ndiscountID: 1;\ndoctor: \"srikar\";\ndoctorID: 3;\ngender: \"Male\";\ngenderID: 1;\nmobile: \"8796433223\";\nmodeofPayment: \"Credit Card\";\nmodeofPaymentID: 1;\npatient: \"qqq qqq\";\npatientID: 16;\npayment: \"200.00\";\nprice: \"600\";\npriceID: 1;\nserviceDate: \"13 Nov 2021\";\nserviceID: 1;\nserviceName: \"Follow Up Service\";\nslotID: 2;\nslotTime: \"9:45AM\";\nstatusID: 5;\nstatusName: \"Active\";\nupdatedDate: \"2021-11-14T00:00:00\";","map":null,"metadata":{},"sourceType":"module"}