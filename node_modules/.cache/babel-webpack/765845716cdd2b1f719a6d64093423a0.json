{"ast":null,"code":"import { assign, cloneDeep } from 'lodash-es';\nimport { FuseMockApiUtils } from '@fuse/lib/mock-api';\nimport { filters as filtersData, folders as foldersData, labels as labelsData, mails as mailsData, settings as settingsData } from 'app/mock-api/apps/mailbox/data';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@fuse/lib/mock-api\";\nexport let MailboxMockApi = /*#__PURE__*/(() => {\n  class MailboxMockApi {\n    /**\r\n     * Constructor\r\n     */\n    constructor(_fuseMockApiService) {\n      this._fuseMockApiService = _fuseMockApiService;\n      this._filters = filtersData;\n      this._folders = foldersData;\n      this._mails = mailsData;\n      this._labels = labelsData;\n      this._settings = settingsData;\n      // Register Mock API handlers\n      this.registerHandlers();\n    }\n    // -----------------------------------------------------------------------------------------------------\n    // @ Public methods\n    // -----------------------------------------------------------------------------------------------------\n    /**\r\n     * Register Mock API handlers\r\n     */\n    registerHandlers() {\n      // -----------------------------------------------------------------------------------------------------\n      // @ Settings - GET\n      // -----------------------------------------------------------------------------------------------------\n      this._fuseMockApiService.onGet('api/apps/mailbox/settings').reply(() => [200, cloneDeep(this._settings)]);\n      // -----------------------------------------------------------------------------------------------------\n      // @ Settings - PATCH\n      // -----------------------------------------------------------------------------------------------------\n      this._fuseMockApiService.onPatch('api/apps/mailbox/settings').reply(({\n        request\n      }) => {\n        // Get the settings\n        const settings = cloneDeep(request.body.settings);\n        // Update the settings\n        this._settings = assign({}, this._settings, settings);\n        // Return the response\n        return [200, cloneDeep(this._settings)];\n      });\n      // -----------------------------------------------------------------------------------------------------\n      // @ Folders - GET\n      // -----------------------------------------------------------------------------------------------------\n      this._fuseMockApiService.onGet('api/apps/mailbox/folders').reply(() => {\n        let count = 0;\n        // Iterate through the folders\n        this._folders.forEach(folder => {\n          // Get the mails of this folder\n          const mails = this._mails.filter(mail => mail.folder === folder.id);\n          // If we are counting the 'sent' or the 'trash' folder...\n          if (folder.slug === 'sent' || folder.slug === 'trash') {\n            // Always set the count to 0\n            count = 0;\n          }\n          // If we are counting the 'drafts' or the 'spam' folder...\n          else if (folder.slug === 'drafts' || folder.slug === 'trash' || folder.slug === 'spam') {\n            // Set the count to the count of all mails\n            count = mails.length;\n          }\n          // Otherwise ('inbox')...\n          else {\n            // Go through the mails and count the unread ones\n            mails.forEach(mail => {\n              if (mail.unread) {\n                count++;\n              }\n            });\n          }\n          // Append the count to the folder mock-api\n          folder.count = count;\n          // Reset the count\n          count = 0;\n        });\n        // Return the response\n        return [200, cloneDeep(this._folders)];\n      });\n      // -----------------------------------------------------------------------------------------------------\n      // @ Filters - GET\n      // -----------------------------------------------------------------------------------------------------\n      this._fuseMockApiService.onGet('api/apps/mailbox/filters').reply(() => [200, cloneDeep(this._filters)]);\n      // -----------------------------------------------------------------------------------------------------\n      // @ Labels - GET\n      // -----------------------------------------------------------------------------------------------------\n      this._fuseMockApiService.onGet('api/apps/mailbox/labels').reply(() => [200, cloneDeep(this._labels)]);\n      // -----------------------------------------------------------------------------------------------------\n      // @ Labels - POST\n      // -----------------------------------------------------------------------------------------------------\n      this._fuseMockApiService.onPost('api/apps/mailbox/label').reply(({\n        request\n      }) => {\n        // Get the label\n        const label = cloneDeep(request.body.label);\n        // Generate an id\n        label.id = FuseMockApiUtils.guid();\n        // Generate a slug\n        label.slug = label.title.toLowerCase().replace(/ /g, '-').replace(/[-]+/g, '-').replace(/[^\\w-]+/g, '');\n        // Check if the slug is being used and update it if necessary\n        const originalSlug = label.slug;\n        let sameSlug;\n        let slugSuffix = 1;\n        do {\n          sameSlug = this._labels.filter(item => item.slug === label.slug);\n          if (sameSlug.length > 0) {\n            label.slug = originalSlug + '-' + slugSuffix;\n            slugSuffix++;\n          }\n        } while (sameSlug.length > 0);\n        // Add the label\n        this._labels.push(label);\n        // Return the response\n        return [200, label];\n      });\n      // -----------------------------------------------------------------------------------------------------\n      // @ Labels - PATCH\n      // -----------------------------------------------------------------------------------------------------\n      this._fuseMockApiService.onPatch('api/apps/mailbox/label').reply(({\n        request\n      }) => {\n        // Get the id and label\n        const id = request.body.id;\n        const label = cloneDeep(request.body.label);\n        // Prepare the updated label\n        let updatedLabel = null;\n        // Find the label and update it\n        this._labels.forEach((item, index, labels) => {\n          if (item.id === id) {\n            // Update the slug\n            label.slug = label.title.toLowerCase().replace(/ /g, '-').replace(/[-]+/g, '-').replace(/[^\\w-]+/g, '');\n            // Update the label\n            labels[index] = assign({}, labels[index], label);\n            // Store the updated label\n            updatedLabel = labels[index];\n          }\n        });\n        // Return the response\n        return [200, updatedLabel];\n      });\n      // -----------------------------------------------------------------------------------------------------\n      // @ Labels - DELETE\n      // -----------------------------------------------------------------------------------------------------\n      this._fuseMockApiService.onDelete('api/apps/mailbox/label').reply(({\n        request\n      }) => {\n        // Get the id\n        const id = request.params.get('id');\n        // Find the label and delete it\n        const index = this._labels.findIndex(item => item.id === id);\n        this._labels.splice(index, 1);\n        // Get all the mails that have the label\n        const mailsWithLabel = this._mails.filter(mail => mail.labels.indexOf(id) > -1);\n        // Iterate through them and remove the label\n        mailsWithLabel.forEach(mail => {\n          mail.labels.splice(mail.labels.indexOf(id), 1);\n        });\n        // Return the response\n        return [200, true];\n      });\n      // -----------------------------------------------------------------------------------------------------\n      // @ Mails - GET\n      // -----------------------------------------------------------------------------------------------------\n      this._fuseMockApiService.onGet('api/apps/mailbox/mails', 625).reply(({\n        request\n      }) => {\n        var _a;\n        // First, decide if mails are requested by folder, filter or label\n        const byFolder = request.params.get('folder');\n        const byFilter = request.params.get('filter');\n        const byLabel = request.params.get('label');\n        // Clone the mails mock-api to prevent accidental mock-api updates\n        let mails = cloneDeep(this._mails);\n        // Filter the mails depending on the requested by type\n        mails = mails.filter(mail => {\n          if (byFolder) {\n            return mail.folder === this._folders.find(folder => folder.slug === byFolder).id;\n          }\n          if (byFilter) {\n            return mail[byFilter] === true;\n          }\n          if (byLabel) {\n            return mail.labels.includes(this._labels.find(label => label.slug === byLabel).id);\n          }\n        });\n        // Sort by date - descending\n        mails.sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime());\n        // Figure out the cc and bcc counts\n        mails.forEach(mail => {\n          mail.ccCount = mail.cc ? mail.cc.length : 0;\n          mail.bccCount = mail.bcc ? mail.bcc.length : 0;\n        });\n        // Paginate - Start\n        const mailsLength = mails.length;\n        const resultsPerPage = 10;\n        // Get the requested page number\n        const page = parseInt((_a = request.params.get('page')) !== null && _a !== void 0 ? _a : '1', 10);\n        // Calculate pagination details\n        const begin = (page - 1) * resultsPerPage;\n        const end = Math.min(resultsPerPage * page, mailsLength);\n        const lastPage = Math.max(Math.ceil(mailsLength / resultsPerPage), 1);\n        // Prepare the pagination object\n        let pagination = {};\n        // If the requested page number is bigger than\n        // the last possible page number, return null for\n        // mails but also send the last possible page so\n        // the app can navigate to there\n        if (page > lastPage) {\n          mails = null;\n          pagination = {\n            lastPage\n          };\n        } else {\n          // Paginate the results by 10\n          mails = mails.slice(begin, end);\n          // Prepare the pagination mock-api\n          pagination = {\n            totalResults: mailsLength,\n            resultsPerPage: resultsPerPage,\n            currentPage: page,\n            lastPage: lastPage,\n            startIndex: begin,\n            endIndex: end - 1\n          };\n        }\n        // Return the response\n        return [200, {\n          mails,\n          pagination\n        }];\n      });\n      // -----------------------------------------------------------------------------------------------------\n      // @ Mail - GET\n      // -----------------------------------------------------------------------------------------------------\n      this._fuseMockApiService.onGet('api/apps/mailbox/mail').reply(({\n        request\n      }) => {\n        // Get the id from the params\n        const id = request.params.get('id');\n        // Clone the mails mock-api to prevent accidental mock-api updates\n        const mails = cloneDeep(this._mails);\n        // Find the mail\n        const mail = mails.find(item => item.id === id);\n        return [200, mail];\n      });\n      // -----------------------------------------------------------------------------------------------------\n      // @ Mail - PATCH\n      // -----------------------------------------------------------------------------------------------------\n      this._fuseMockApiService.onPatch('api/apps/mailbox/mail').reply(({\n        request\n      }) => {\n        // Get the id and mail\n        const id = request.body.id;\n        const mail = cloneDeep(request.body.mail);\n        // Prepare the updated mail\n        let updatedMail = null;\n        // Find the mail and update it\n        this._mails.forEach((item, index, mails) => {\n          if (item.id === id) {\n            // Update the mail\n            mails[index] = assign({}, mails[index], mail);\n            // Store the updated mail\n            updatedMail = mails[index];\n          }\n        });\n        // Return the response\n        return [200, updatedMail];\n      });\n    }\n  }\n  MailboxMockApi.ɵfac = function MailboxMockApi_Factory(t) {\n    return new (t || MailboxMockApi)(i0.ɵɵinject(i1.FuseMockApiService));\n  };\n  MailboxMockApi.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: MailboxMockApi,\n    factory: MailboxMockApi.ɵfac,\n    providedIn: 'root'\n  });\n  return MailboxMockApi;\n})();","map":null,"metadata":{},"sourceType":"module"}