{"ast":null,"code":"import { ElementRef, EventEmitter, forwardRef } from '@angular/core';\nimport { FormControl, NG_VALUE_ACCESSOR, Validators } from '@angular/forms';\nimport { TemplatePortal } from '@angular/cdk/portal';\nimport { Subject } from 'rxjs';\nimport * as moment from 'moment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/cdk/overlay\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"@angular/material/button\";\nimport * as i4 from \"@angular/material/icon\";\nimport * as i5 from \"@angular/material/datepicker\";\nimport * as i6 from \"@angular/material/form-field\";\nimport * as i7 from \"@angular/material/input\";\nimport * as i8 from \"@angular/forms\";\nconst _c0 = [\"matMonthView1\"];\nconst _c1 = [\"matMonthView2\"];\nconst _c2 = [\"pickerPanelOrigin\"];\nconst _c3 = [\"pickerPanel\"];\nfunction FuseDateRangeComponent_div_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 8);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r1.range.startTime);\n  }\n}\nfunction FuseDateRangeComponent_div_11_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 8);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r2.range.endTime);\n  }\n}\nfunction FuseDateRangeComponent_ng_template_12_mat_form_field_9_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r10 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"mat-form-field\", 20);\n    i0.ɵɵelementStart(1, \"input\", 21);\n    i0.ɵɵlistener(\"blur\", function FuseDateRangeComponent_ng_template_12_mat_form_field_9_Template_input_blur_1_listener($event) {\n      i0.ɵɵrestoreView(_r10);\n      const ctx_r9 = i0.ɵɵnextContext(2);\n      return ctx_r9.updateStartTime($event);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(2, \"mat-label\");\n    i0.ɵɵtext(3, \"Start time\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r6 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"autocomplete\", \"off\")(\"formControl\", ctx_r6.startTimeFormControl);\n  }\n}\nfunction FuseDateRangeComponent_ng_template_12_mat_form_field_19_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r12 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"mat-form-field\", 22);\n    i0.ɵɵelementStart(1, \"input\", 23);\n    i0.ɵɵlistener(\"blur\", function FuseDateRangeComponent_ng_template_12_mat_form_field_19_Template_input_blur_1_listener($event) {\n      i0.ɵɵrestoreView(_r12);\n      const ctx_r11 = i0.ɵɵnextContext(2);\n      return ctx_r11.updateEndTime($event);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(2, \"mat-label\");\n    i0.ɵɵtext(3, \"End time\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r8 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"formControl\", ctx_r8.endTimeFormControl);\n  }\n}\nfunction FuseDateRangeComponent_ng_template_12_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r14 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 2);\n    i0.ɵɵelementStart(1, \"div\", 9);\n    i0.ɵɵelementStart(2, \"div\", 10);\n    i0.ɵɵelementStart(3, \"button\", 11);\n    i0.ɵɵlistener(\"click\", function FuseDateRangeComponent_ng_template_12_Template_button_click_3_listener() {\n      i0.ɵɵrestoreView(_r14);\n      const ctx_r13 = i0.ɵɵnextContext();\n      return ctx_r13.prev();\n    });\n    i0.ɵɵelement(4, \"mat-icon\", 12);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"div\", 13);\n    i0.ɵɵtext(6);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"mat-month-view\", 14, 15);\n    i0.ɵɵlistener(\"activeDateChange\", function FuseDateRangeComponent_ng_template_12_Template_mat_month_view_activeDateChange_7_listener($event) {\n      i0.ɵɵrestoreView(_r14);\n      const ctx_r15 = i0.ɵɵnextContext();\n      return ctx_r15.activeDates.month1 = $event;\n    })(\"click\", function FuseDateRangeComponent_ng_template_12_Template_mat_month_view_click_7_listener($event) {\n      return $event.stopImmediatePropagation();\n    })(\"selectedChange\", function FuseDateRangeComponent_ng_template_12_Template_mat_month_view_selectedChange_7_listener($event) {\n      i0.ɵɵrestoreView(_r14);\n      const ctx_r17 = i0.ɵɵnextContext();\n      return ctx_r17.onSelectedDateChange($event);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(9, FuseDateRangeComponent_ng_template_12_mat_form_field_9_Template, 4, 2, \"mat-form-field\", 16);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(10, \"div\", 6);\n    i0.ɵɵelementStart(11, \"div\", 9);\n    i0.ɵɵelementStart(12, \"div\", 10);\n    i0.ɵɵelementStart(13, \"div\", 13);\n    i0.ɵɵtext(14);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(15, \"button\", 17);\n    i0.ɵɵlistener(\"click\", function FuseDateRangeComponent_ng_template_12_Template_button_click_15_listener() {\n      i0.ɵɵrestoreView(_r14);\n      const ctx_r18 = i0.ɵɵnextContext();\n      return ctx_r18.next();\n    });\n    i0.ɵɵelement(16, \"mat-icon\", 12);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(17, \"mat-month-view\", 14, 18);\n    i0.ɵɵlistener(\"activeDateChange\", function FuseDateRangeComponent_ng_template_12_Template_mat_month_view_activeDateChange_17_listener($event) {\n      i0.ɵɵrestoreView(_r14);\n      const ctx_r19 = i0.ɵɵnextContext();\n      return ctx_r19.activeDates.month2 = $event;\n    })(\"click\", function FuseDateRangeComponent_ng_template_12_Template_mat_month_view_click_17_listener($event) {\n      return $event.stopImmediatePropagation();\n    })(\"selectedChange\", function FuseDateRangeComponent_ng_template_12_Template_mat_month_view_selectedChange_17_listener($event) {\n      i0.ɵɵrestoreView(_r14);\n      const ctx_r21 = i0.ɵɵnextContext();\n      return ctx_r21.onSelectedDateChange($event);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(19, FuseDateRangeComponent_ng_template_12_mat_form_field_19_Template, 4, 1, \"mat-form-field\", 19);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r4 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"svgIcon\", \"heroicons_outline:chevron-left\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r4.getMonthLabel(1));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"activeDate\", ctx_r4.activeDates.month1)(\"dateFilter\", ctx_r4.dateFilter())(\"dateClass\", ctx_r4.dateClass());\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", ctx_r4.timeRange);\n    i0.ɵɵadvance(5);\n    i0.ɵɵtextInterpolate(ctx_r4.getMonthLabel(2));\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"svgIcon\", \"heroicons_outline:chevron-right\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"activeDate\", ctx_r4.activeDates.month2)(\"dateFilter\", ctx_r4.dateFilter())(\"dateClass\", ctx_r4.dateClass());\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", ctx_r4.timeRange);\n  }\n}\nexport let FuseDateRangeComponent = /*#__PURE__*/(() => {\n  class FuseDateRangeComponent {\n    /**\r\n     * Constructor\r\n     */\n    constructor(_changeDetectorRef, _elementRef, _overlay, _renderer2, _viewContainerRef) {\n      this._changeDetectorRef = _changeDetectorRef;\n      this._elementRef = _elementRef;\n      this._overlay = _overlay;\n      this._renderer2 = _renderer2;\n      this._viewContainerRef = _viewContainerRef;\n      this.rangeChanged = new EventEmitter();\n      this._defaultClassNames = true;\n      this.activeDates = {\n        month1: null,\n        month2: null\n      };\n      this.setWhichDate = 'start';\n      this._range = {\n        start: null,\n        end: null\n      };\n      this._timeRegExp = new RegExp('^(0[0-9]|1[0-9]|2[0-4]|[0-9]):([0-5][0-9])(A|(?:AM)|P|(?:PM))?$', 'i');\n      this._unsubscribeAll = new Subject();\n      this._onChange = () => {};\n      this._onTouched = () => {};\n      this.dateFormat = 'DD/MM/YYYY';\n      this.timeFormat = '12';\n      // Initialize the component\n      this._init();\n    }\n    // -----------------------------------------------------------------------------------------------------\n    // @ Accessors\n    // -----------------------------------------------------------------------------------------------------\n    /**\r\n     * Setter & getter for dateFormat input\r\n     *\r\n     * @param value\r\n     */\n    set dateFormat(value) {\n      // Return if the values are the same\n      if (this._dateFormat === value) {\n        return;\n      }\n      // Store the value\n      this._dateFormat = value;\n    }\n    get dateFormat() {\n      return this._dateFormat;\n    }\n    /**\r\n     * Setter & getter for timeFormat input\r\n     *\r\n     * @param value\r\n     */\n    set timeFormat(value) {\n      // Return if the values are the same\n      if (this._timeFormat === value) {\n        return;\n      }\n      // Set format based on the time format input\n      this._timeFormat = value === '12' ? 'hh:mmA' : 'HH:mm';\n    }\n    get timeFormat() {\n      return this._timeFormat;\n    }\n    /**\r\n     * Setter & getter for timeRange input\r\n     *\r\n     * @param value\r\n     */\n    set timeRange(value) {\n      // Return if the values are the same\n      if (this._timeRange === value) {\n        return;\n      }\n      // Store the value\n      this._timeRange = value;\n      // If the time range turned off...\n      if (!value) {\n        this.range = {\n          start: this._range.start.clone().startOf('day'),\n          end: this._range.end.clone().endOf('day')\n        };\n      }\n    }\n    get timeRange() {\n      return this._timeRange;\n    }\n    /**\r\n     * Setter & getter for range input\r\n     *\r\n     * @param value\r\n     */\n    set range(value) {\n      if (!value) {\n        return;\n      }\n      // Check if the value is an object and has 'start' and 'end' values\n      if (!value.start || !value.end) {\n        console.error('Range input must have \"start\" and \"end\" properties!');\n        return;\n      }\n      // Check if we are setting an individual date or both of them\n      const whichDate = value.whichDate || null;\n      // Get the start and end dates as moment\n      const start = moment(value.start);\n      const end = moment(value.end);\n      // If we are only setting the start date...\n      if (whichDate === 'start') {\n        // Set the start date\n        this._range.start = start.clone();\n        // If the selected start date is after the end date...\n        if (this._range.start.isAfter(this._range.end)) {\n          // Set the end date to the start date but keep the end date's time\n          const endDate = start.clone().hours(this._range.end.hours()).minutes(this._range.end.minutes()).seconds(this._range.end.seconds());\n          // Test this new end date to see if it's ahead of the start date\n          if (this._range.start.isBefore(endDate)) {\n            // If it's, set the new end date\n            this._range.end = endDate;\n          } else {\n            // Otherwise, set the end date same as the start date\n            this._range.end = start.clone();\n          }\n        }\n      }\n      // If we are only setting the end date...\n      if (whichDate === 'end') {\n        // Set the end date\n        this._range.end = end.clone();\n        // If the selected end date is before the start date...\n        if (this._range.start.isAfter(this._range.end)) {\n          // Set the start date to the end date but keep the start date's time\n          const startDate = end.clone().hours(this._range.start.hours()).minutes(this._range.start.minutes()).seconds(this._range.start.seconds());\n          // Test this new end date to see if it's ahead of the start date\n          if (this._range.end.isAfter(startDate)) {\n            // If it's, set the new start date\n            this._range.start = startDate;\n          } else {\n            // Otherwise, set the start date same as the end date\n            this._range.start = end.clone();\n          }\n        }\n      }\n      // If we are setting both dates...\n      if (!whichDate) {\n        // Set the start date\n        this._range.start = start.clone();\n        // If the start date is before the end date, set the end date as normal.\n        // If the start date is after the end date, set the end date same as the start date.\n        this._range.end = start.isBefore(end) ? end.clone() : start.clone();\n      }\n      // Prepare another range object that holds the ISO formatted range dates\n      const range = {\n        start: this._range.start.clone().toISOString(),\n        end: this._range.end.clone().toISOString()\n      };\n      // Emit the range changed event with the range\n      this.rangeChanged.emit(range);\n      // Update the model with the range if the change was not a programmatic change\n      // Because programmatic changes trigger writeValue which triggers onChange and onTouched\n      // internally causing them to trigger twice which breaks the form's pristine and touched\n      // statuses.\n      if (!this._programmaticChange) {\n        this._onTouched(range);\n        this._onChange(range);\n      }\n      // Set the active dates\n      this.activeDates = {\n        month1: this._range.start.clone(),\n        month2: this._range.start.clone().add(1, 'month')\n      };\n      // Set the time form controls\n      this.startTimeFormControl.setValue(this._range.start.clone().format(this._timeFormat).toString());\n      this.endTimeFormControl.setValue(this._range.end.clone().format(this._timeFormat).toString());\n      // Run ngAfterContentInit on month views to trigger\n      // re-render on month views if they are available\n      if (this._matMonthView1 && this._matMonthView2) {\n        this._matMonthView1.ngAfterContentInit();\n        this._matMonthView2.ngAfterContentInit();\n      }\n      // Reset the programmatic change status\n      this._programmaticChange = false;\n    }\n    get range() {\n      // Clone the range start and end\n      const start = this._range.start.clone();\n      const end = this._range.end.clone();\n      // Build and return the range object\n      return {\n        startDate: start.clone().format(this.dateFormat),\n        startTime: this.timeRange ? start.clone().format(this.timeFormat) : null,\n        endDate: end.clone().format(this.dateFormat),\n        endTime: this.timeRange ? end.clone().format(this.timeFormat) : null\n      };\n    }\n    // -----------------------------------------------------------------------------------------------------\n    // @ Control Value Accessor\n    // -----------------------------------------------------------------------------------------------------\n    /**\r\n     * Update the form model on change\r\n     *\r\n     * @param fn\r\n     */\n    registerOnChange(fn) {\n      this._onChange = fn;\n    }\n    /**\r\n     * Update the form model on blur\r\n     *\r\n     * @param fn\r\n     */\n    registerOnTouched(fn) {\n      this._onTouched = fn;\n    }\n    /**\r\n     * Write to view from model when the form model changes programmatically\r\n     *\r\n     * @param range\r\n     */\n    writeValue(range) {\n      // Set this change as a programmatic one\n      this._programmaticChange = true;\n      // Set the range\n      this.range = range;\n    }\n    // -----------------------------------------------------------------------------------------------------\n    // @ Lifecycle hooks\n    // -----------------------------------------------------------------------------------------------------\n    /**\r\n     * On init\r\n     */\n    ngOnInit() {}\n    /**\r\n     * On destroy\r\n     */\n    ngOnDestroy() {\n      // Unsubscribe from all subscriptions\n      this._unsubscribeAll.next();\n      this._unsubscribeAll.complete();\n      // @ TODO: Workaround until \"angular/issues/20007\" resolved\n      this.writeValue = () => {};\n    }\n    // -----------------------------------------------------------------------------------------------------\n    // @ Public methods\n    // -----------------------------------------------------------------------------------------------------\n    /**\r\n     * Open the picker panel\r\n     */\n    openPickerPanel() {\n      // Create the overlay\n      const overlayRef = this._overlay.create({\n        panelClass: 'fuse-date-range-panel',\n        backdropClass: '',\n        hasBackdrop: true,\n        scrollStrategy: this._overlay.scrollStrategies.reposition(),\n        positionStrategy: this._overlay.position().flexibleConnectedTo(this._pickerPanelOrigin).withPositions([{\n          originX: 'start',\n          originY: 'bottom',\n          overlayX: 'start',\n          overlayY: 'top',\n          offsetY: 8\n        }, {\n          originX: 'start',\n          originY: 'top',\n          overlayX: 'start',\n          overlayY: 'bottom',\n          offsetY: -8\n        }])\n      });\n      // Create a portal from the template\n      const templatePortal = new TemplatePortal(this._pickerPanel, this._viewContainerRef);\n      // On backdrop click\n      overlayRef.backdropClick().subscribe(() => {\n        // If template portal exists and attached...\n        if (templatePortal && templatePortal.isAttached) {\n          // Detach it\n          templatePortal.detach();\n        }\n        // If overlay exists and attached...\n        if (overlayRef && overlayRef.hasAttached()) {\n          // Detach it\n          overlayRef.detach();\n          overlayRef.dispose();\n        }\n      });\n      // Attach the portal to the overlay\n      overlayRef.attach(templatePortal);\n    }\n    /**\r\n     * Get month label\r\n     *\r\n     * @param month\r\n     */\n    getMonthLabel(month) {\n      if (month === 1) {\n        return this.activeDates.month1.clone().format('MMMM Y');\n      }\n      return this.activeDates.month2.clone().format('MMMM Y');\n    }\n    /**\r\n     * Date class function to add/remove class names to calendar days\r\n     */\n    dateClass() {\n      return date => {\n        // If the date is both start and end date...\n        if (date.isSame(this._range.start, 'day') && date.isSame(this._range.end, 'day')) {\n          return ['fuse-date-range', 'fuse-date-range-start', 'fuse-date-range-end'];\n        }\n        // If the date is the start date...\n        if (date.isSame(this._range.start, 'day')) {\n          return ['fuse-date-range', 'fuse-date-range-start'];\n        }\n        // If the date is the end date...\n        if (date.isSame(this._range.end, 'day')) {\n          return ['fuse-date-range', 'fuse-date-range-end'];\n        }\n        // If the date is in between start and end dates...\n        if (date.isBetween(this._range.start, this._range.end, 'day')) {\n          return ['fuse-date-range', 'fuse-date-range-mid'];\n        }\n        return undefined;\n      };\n    }\n    /**\r\n     * Date filter to enable/disable calendar days\r\n     */\n    dateFilter() {\n      // If we are selecting the end date, disable all the dates that comes before the start date\n      return date => !(this.setWhichDate === 'end' && date.isBefore(this._range.start, 'day'));\n    }\n    /**\r\n     * On selected date change\r\n     *\r\n     * @param date\r\n     */\n    onSelectedDateChange(date) {\n      // Create a new range object\n      const newRange = {\n        start: this._range.start.clone().toISOString(),\n        end: this._range.end.clone().toISOString(),\n        whichDate: null\n      };\n      // Replace either the start or the end date with the new one\n      // depending on which date we are setting\n      if (this.setWhichDate === 'start') {\n        newRange.start = moment(newRange.start).year(date.year()).month(date.month()).date(date.date()).toISOString();\n      } else {\n        newRange.end = moment(newRange.end).year(date.year()).month(date.month()).date(date.date()).toISOString();\n      }\n      // Append the which date to the new range object\n      newRange.whichDate = this.setWhichDate;\n      // Switch which date to set on the next run\n      this.setWhichDate = this.setWhichDate === 'start' ? 'end' : 'start';\n      // Set the range\n      this.range = newRange;\n    }\n    /**\r\n     * Go to previous month on both views\r\n     */\n    prev() {\n      this.activeDates.month1 = moment(this.activeDates.month1).subtract(1, 'month');\n      this.activeDates.month2 = moment(this.activeDates.month2).subtract(1, 'month');\n    }\n    /**\r\n     * Go to next month on both views\r\n     */\n    next() {\n      this.activeDates.month1 = moment(this.activeDates.month1).add(1, 'month');\n      this.activeDates.month2 = moment(this.activeDates.month2).add(1, 'month');\n    }\n    /**\r\n     * Update the start time\r\n     *\r\n     * @param event\r\n     */\n    updateStartTime(event) {\n      // Parse the time\n      const parsedTime = this._parseTime(event.target.value);\n      // Go back to the previous value if the form control is not valid\n      if (this.startTimeFormControl.invalid) {\n        // Override the time\n        const time = this._range.start.clone().format(this._timeFormat);\n        // Set the time\n        this.startTimeFormControl.setValue(time);\n        // Do not update the range\n        return;\n      }\n      // Append the new time to the start date\n      const startDate = this._range.start.clone().hours(parsedTime.hours()).minutes(parsedTime.minutes());\n      // If the new start date is after the current end date,\n      // use the end date's time and set the start date again\n      if (startDate.isAfter(this._range.end)) {\n        const endDateHours = this._range.end.hours();\n        const endDateMinutes = this._range.end.minutes();\n        // Set the start date\n        startDate.hours(endDateHours).minutes(endDateMinutes);\n      }\n      // If everything is okay, set the new date\n      this.range = {\n        start: startDate.toISOString(),\n        end: this._range.end.clone().toISOString(),\n        whichDate: 'start'\n      };\n    }\n    /**\r\n     * Update the end time\r\n     *\r\n     * @param event\r\n     */\n    updateEndTime(event) {\n      // Parse the time\n      const parsedTime = this._parseTime(event.target.value);\n      // Go back to the previous value if the form control is not valid\n      if (this.endTimeFormControl.invalid) {\n        // Override the time\n        const time = this._range.end.clone().format(this._timeFormat);\n        // Set the time\n        this.endTimeFormControl.setValue(time);\n        // Do not update the range\n        return;\n      }\n      // Append the new time to the end date\n      const endDate = this._range.end.clone().hours(parsedTime.hours()).minutes(parsedTime.minutes());\n      // If the new end date is before the current start date,\n      // use the start date's time and set the end date again\n      if (endDate.isBefore(this._range.start)) {\n        const startDateHours = this._range.start.hours();\n        const startDateMinutes = this._range.start.minutes();\n        // Set the end date\n        endDate.hours(startDateHours).minutes(startDateMinutes);\n      }\n      // If everything is okay, set the new date\n      this.range = {\n        start: this._range.start.clone().toISOString(),\n        end: endDate.toISOString(),\n        whichDate: 'end'\n      };\n    }\n    // -----------------------------------------------------------------------------------------------------\n    // @ Private methods\n    // -----------------------------------------------------------------------------------------------------\n    /**\r\n     * Initialize\r\n     *\r\n     * @private\r\n     */\n    _init() {\n      // Start and end time form controls\n      this.startTimeFormControl = new FormControl('', [Validators.pattern(this._timeRegExp)]);\n      this.endTimeFormControl = new FormControl('', [Validators.pattern(this._timeRegExp)]);\n      // Set the default range\n      this._programmaticChange = true;\n      this.range = {\n        start: moment().startOf('day').toISOString(),\n        end: moment().add(1, 'day').endOf('day').toISOString()\n      };\n      // Set the default time range\n      this._programmaticChange = true;\n      this.timeRange = true;\n    }\n    /**\r\n     * Parse the time from the inputs\r\n     *\r\n     * @param value\r\n     * @private\r\n     */\n    _parseTime(value) {\n      // Parse the time using the time regexp\n      const timeArr = value.split(this._timeRegExp).filter(part => part !== '');\n      // Get the meridiem\n      const meridiem = timeArr[2] || null;\n      // If meridiem exists...\n      if (meridiem) {\n        // Create a moment using 12-hours format and return it\n        return moment(value, 'hh:mmA').seconds(0);\n      }\n      // If meridiem doesn't exist, create a moment using 24-hours format and return in\n      return moment(value, 'HH:mm').seconds(0);\n    }\n  }\n  FuseDateRangeComponent.ɵfac = function FuseDateRangeComponent_Factory(t) {\n    return new (t || FuseDateRangeComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i1.Overlay), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.ViewContainerRef));\n  };\n  FuseDateRangeComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: FuseDateRangeComponent,\n    selectors: [[\"fuse-date-range\"]],\n    viewQuery: function FuseDateRangeComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 5);\n        i0.ɵɵviewQuery(_c1, 5);\n        i0.ɵɵviewQuery(_c2, 5, ElementRef);\n        i0.ɵɵviewQuery(_c3, 5);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._matMonthView1 = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._matMonthView2 = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._pickerPanelOrigin = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._pickerPanel = _t.first);\n      }\n    },\n    hostVars: 2,\n    hostBindings: function FuseDateRangeComponent_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        i0.ɵɵclassProp(\"fuse-date-range\", ctx._defaultClassNames);\n      }\n    },\n    inputs: {\n      dateFormat: \"dateFormat\",\n      timeFormat: \"timeFormat\",\n      timeRange: \"timeRange\",\n      range: \"range\"\n    },\n    outputs: {\n      rangeChanged: \"rangeChanged\"\n    },\n    exportAs: [\"fuseDateRange\"],\n    features: [i0.ɵɵProvidersFeature([{\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => FuseDateRangeComponent),\n      multi: true\n    }])],\n    decls: 14,\n    vars: 4,\n    consts: [[1, \"range\", 3, \"click\"], [\"pickerPanelOrigin\", \"\"], [1, \"start\"], [1, \"date\"], [\"class\", \"time\", 4, \"ngIf\"], [1, \"separator\"], [1, \"end\"], [\"pickerPanel\", \"\"], [1, \"time\"], [1, \"month\"], [1, \"month-header\"], [\"mat-icon-button\", \"\", \"tabindex\", \"1\", 1, \"previous-button\", 3, \"click\"], [3, \"svgIcon\"], [1, \"month-label\"], [3, \"activeDate\", \"dateFilter\", \"dateClass\", \"activeDateChange\", \"click\", \"selectedChange\"], [\"matMonthView1\", \"\"], [\"class\", \"fuse-mat-no-subscript time start-time\", 4, \"ngIf\"], [\"mat-icon-button\", \"\", \"tabindex\", \"2\", 1, \"next-button\", 3, \"click\"], [\"matMonthView2\", \"\"], [\"class\", \"fuse-mat-no-subscript time end-time\", 4, \"ngIf\"], [1, \"fuse-mat-no-subscript\", \"time\", \"start-time\"], [\"matInput\", \"\", \"tabindex\", \"3\", 3, \"autocomplete\", \"formControl\", \"blur\"], [1, \"fuse-mat-no-subscript\", \"time\", \"end-time\"], [\"matInput\", \"\", \"tabindex\", \"4\", 3, \"formControl\", \"blur\"]],\n    template: function FuseDateRangeComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0, 1);\n        i0.ɵɵlistener(\"click\", function FuseDateRangeComponent_Template_div_click_0_listener() {\n          return ctx.openPickerPanel();\n        });\n        i0.ɵɵelementStart(2, \"div\", 2);\n        i0.ɵɵelementStart(3, \"div\", 3);\n        i0.ɵɵtext(4);\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(5, FuseDateRangeComponent_div_5_Template, 2, 1, \"div\", 4);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(6, \"div\", 5);\n        i0.ɵɵtext(7, \"-\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(8, \"div\", 6);\n        i0.ɵɵelementStart(9, \"div\", 3);\n        i0.ɵɵtext(10);\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(11, FuseDateRangeComponent_div_11_Template, 2, 1, \"div\", 4);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(12, FuseDateRangeComponent_ng_template_12_Template, 20, 12, \"ng-template\", null, 7, i0.ɵɵtemplateRefExtractor);\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(4);\n        i0.ɵɵtextInterpolate(ctx.range.startDate);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.range.startTime);\n        i0.ɵɵadvance(5);\n        i0.ɵɵtextInterpolate(ctx.range.endDate);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.range.endTime);\n      }\n    },\n    directives: [i2.NgIf, i3.MatButton, i4.MatIcon, i5.MatMonthView, i6.MatFormField, i7.MatInput, i8.DefaultValueAccessor, i8.NgControlStatus, i8.FormControlDirective, i6.MatLabel],\n    styles: [\"fuse-date-range{display:flex}fuse-date-range .range{display:flex;align-items:center;height:48px;min-height:48px;max-height:48px;cursor:pointer}fuse-date-range .range .start,fuse-date-range .range .end{display:flex;align-items:center;height:100%;padding:0 16px;border-radius:6px;border-width:1px;line-height:1}fuse-date-range .range .start,fuse-date-range .range .end{--tw-border-opacity: 1;border-color:rgba(203,213,225,var(--tw-border-opacity))}.dark fuse-date-range .range .start,.dark fuse-date-range .range .end{--tw-border-opacity: 1;border-color:rgba(100,116,139,var(--tw-border-opacity));--tw-bg-opacity: 1;background-color:rgba(0,0,0,var(--tw-bg-opacity));--tw-bg-opacity: .05}fuse-date-range .range .start,fuse-date-range .range .end{--tw-shadow: 0 1px 2px 0 rgba(0, 0, 0, .05);box-shadow:var(--tw-ring-offset-shadow, 0 0 #0000),var(--tw-ring-shadow, 0 0 #0000),var(--tw-shadow)}fuse-date-range .range .start .date,fuse-date-range .range .end .date{white-space:nowrap}fuse-date-range .range .start .date+.time,fuse-date-range .range .end .date+.time{margin-left:8px}fuse-date-range .range .start .time,fuse-date-range .range .end .time{white-space:nowrap}fuse-date-range .range .separator{margin:0 2px}@media (min-width: 600px){fuse-date-range .range .separator{margin:0 12px}}.fuse-date-range-panel{border-radius:4px;padding:24px;--tw-bg-opacity: 1;background-color:rgba(var(--fuse-bg-card-rgb),var(--tw-bg-opacity));--tw-shadow: 0 25px 50px -12px rgba(0, 0, 0, .25);box-shadow:var(--tw-ring-offset-shadow, 0 0 #0000),var(--tw-ring-shadow, 0 0 #0000),var(--tw-shadow)}.fuse-date-range-panel .start,.fuse-date-range-panel .end{display:flex;flex-direction:column}.fuse-date-range-panel .start .month,.fuse-date-range-panel .end .month{max-width:196px;min-width:196px;width:196px}.fuse-date-range-panel .start .month .month-header,.fuse-date-range-panel .end .month .month-header{position:relative;display:flex;align-items:center;justify-content:center;height:32px;margin-bottom:16px}.fuse-date-range-panel .start .month .month-header .previous-button,.fuse-date-range-panel .start .month .month-header .next-button,.fuse-date-range-panel .end .month .month-header .previous-button,.fuse-date-range-panel .end .month .month-header .next-button{position:absolute;width:24px!important;height:24px!important;min-height:24px!important;max-height:24px!important;line-height:24px!important}.fuse-date-range-panel .start .month .month-header .previous-button .mat-icon,.fuse-date-range-panel .start .month .month-header .next-button .mat-icon,.fuse-date-range-panel .end .month .month-header .previous-button .mat-icon,.fuse-date-range-panel .end .month .month-header .next-button .mat-icon{width:1.25rem;height:1.25rem;min-width:1.25rem;min-height:1.25rem;font-size:1.25rem;line-height:1.25rem}.fuse-date-range-panel .start .month .month-header .previous-button .mat-icon svg,.fuse-date-range-panel .start .month .month-header .next-button .mat-icon svg,.fuse-date-range-panel .end .month .month-header .previous-button .mat-icon svg,.fuse-date-range-panel .end .month .month-header .next-button .mat-icon svg{width:1.25rem;height:1.25rem}.fuse-date-range-panel .start .month .month-header .previous-button,.fuse-date-range-panel .end .month .month-header .previous-button{left:0}.fuse-date-range-panel .start .month .month-header .next-button,.fuse-date-range-panel .end .month .month-header .next-button{right:0}.fuse-date-range-panel .start .month .month-header .month-label,.fuse-date-range-panel .end .month .month-header .month-label{font-weight:500}.fuse-date-range-panel .start .month .month-header .month-label,.fuse-date-range-panel .end .month .month-header .month-label{--tw-text-opacity: 1;color:rgba(var(--fuse-text-secondary-rgb),var(--tw-text-opacity))}.fuse-date-range-panel .start .month mat-month-view,.fuse-date-range-panel .end .month mat-month-view{display:flex;min-height:188px}.fuse-date-range-panel .start .month mat-month-view .mat-calendar-table,.fuse-date-range-panel .end .month mat-month-view .mat-calendar-table{width:100%;border-collapse:collapse}.fuse-date-range-panel .start .month mat-month-view .mat-calendar-table tbody tr[aria-hidden=true],.fuse-date-range-panel .end .month mat-month-view .mat-calendar-table tbody tr[aria-hidden=true]{display:none!important}.fuse-date-range-panel .start .month mat-month-view .mat-calendar-table tbody tr:first-child td:first-child[aria-hidden=true],.fuse-date-range-panel .end .month mat-month-view .mat-calendar-table tbody tr:first-child td:first-child[aria-hidden=true]{visibility:hidden;pointer-events:none;opacity:0}.fuse-date-range-panel .start .month mat-month-view .mat-calendar-table tbody tr td.fuse-date-range:before,.fuse-date-range-panel .start .month mat-month-view .mat-calendar-table tbody tr td:hover.fuse-date-range:before,.fuse-date-range-panel .end .month mat-month-view .mat-calendar-table tbody tr td.fuse-date-range:before,.fuse-date-range-panel .end .month mat-month-view .mat-calendar-table tbody tr td:hover.fuse-date-range:before{--tw-bg-opacity: 1;background-color:rgba(var(--fuse-primary-200-rgb),var(--tw-bg-opacity))}.fuse-date-range-panel .start .month mat-month-view .mat-calendar-table tbody tr td.fuse-date-range .mat-calendar-body-cell-content,.fuse-date-range-panel .start .month mat-month-view .mat-calendar-table tbody tr td:hover.fuse-date-range .mat-calendar-body-cell-content,.fuse-date-range-panel .end .month mat-month-view .mat-calendar-table tbody tr td.fuse-date-range .mat-calendar-body-cell-content,.fuse-date-range-panel .end .month mat-month-view .mat-calendar-table tbody tr td:hover.fuse-date-range .mat-calendar-body-cell-content{background-color:transparent}.fuse-date-range-panel .start .month mat-month-view .mat-calendar-table tbody tr td.fuse-date-range-start .mat-calendar-body-cell-content,.fuse-date-range-panel .start .month mat-month-view .mat-calendar-table tbody tr td.fuse-date-range-end .mat-calendar-body-cell-content,.fuse-date-range-panel .start .month mat-month-view .mat-calendar-table tbody tr td:hover.fuse-date-range-start .mat-calendar-body-cell-content,.fuse-date-range-panel .start .month mat-month-view .mat-calendar-table tbody tr td:hover.fuse-date-range-end .mat-calendar-body-cell-content,.fuse-date-range-panel .end .month mat-month-view .mat-calendar-table tbody tr td.fuse-date-range-start .mat-calendar-body-cell-content,.fuse-date-range-panel .end .month mat-month-view .mat-calendar-table tbody tr td.fuse-date-range-end .mat-calendar-body-cell-content,.fuse-date-range-panel .end .month mat-month-view .mat-calendar-table tbody tr td:hover.fuse-date-range-start .mat-calendar-body-cell-content,.fuse-date-range-panel .end .month mat-month-view .mat-calendar-table tbody tr td:hover.fuse-date-range-end .mat-calendar-body-cell-content{--tw-bg-opacity: 1;background-color:rgba(var(--fuse-primary-rgb),var(--tw-bg-opacity));--tw-text-opacity: 1;color:rgba(var(--fuse-on-primary-rgb),var(--tw-text-opacity))}.fuse-date-range-panel .start .month mat-month-view .mat-calendar-table tbody tr td .mat-calendar-body-today,.fuse-date-range-panel .start .month mat-month-view .mat-calendar-table tbody tr td:hover .mat-calendar-body-today,.fuse-date-range-panel .end .month mat-month-view .mat-calendar-table tbody tr td .mat-calendar-body-today,.fuse-date-range-panel .end .month mat-month-view .mat-calendar-table tbody tr td:hover .mat-calendar-body-today{border:none}.fuse-date-range-panel .start .month mat-month-view .mat-calendar-table tbody tr td.mat-calendar-body-cell,.fuse-date-range-panel .end .month mat-month-view .mat-calendar-table tbody tr td.mat-calendar-body-cell{width:28px!important;height:28px!important;padding:2px!important}.fuse-date-range-panel .start .month mat-month-view .mat-calendar-table tbody tr td.mat-calendar-body-cell.fuse-date-range,.fuse-date-range-panel .end .month mat-month-view .mat-calendar-table tbody tr td.mat-calendar-body-cell.fuse-date-range{position:relative}.fuse-date-range-panel .start .month mat-month-view .mat-calendar-table tbody tr td.mat-calendar-body-cell.fuse-date-range:before,.fuse-date-range-panel .end .month mat-month-view .mat-calendar-table tbody tr td.mat-calendar-body-cell.fuse-date-range:before{content:\\\"\\\";position:absolute;top:2px;right:0;bottom:2px;left:0}.fuse-date-range-panel .start .month mat-month-view .mat-calendar-table tbody tr td.mat-calendar-body-cell.fuse-date-range.fuse-date-range-start:before,.fuse-date-range-panel .end .month mat-month-view .mat-calendar-table tbody tr td.mat-calendar-body-cell.fuse-date-range.fuse-date-range-start:before{left:2px;border-radius:999px 0 0 999px}.fuse-date-range-panel .start .month mat-month-view .mat-calendar-table tbody tr td.mat-calendar-body-cell.fuse-date-range.fuse-date-range-start.fuse-date-range-end:before,.fuse-date-range-panel .start .month mat-month-view .mat-calendar-table tbody tr td.mat-calendar-body-cell.fuse-date-range.fuse-date-range-start:last-child:before,.fuse-date-range-panel .end .month mat-month-view .mat-calendar-table tbody tr td.mat-calendar-body-cell.fuse-date-range.fuse-date-range-start.fuse-date-range-end:before,.fuse-date-range-panel .end .month mat-month-view .mat-calendar-table tbody tr td.mat-calendar-body-cell.fuse-date-range.fuse-date-range-start:last-child:before{right:2px;border-radius:999px}.fuse-date-range-panel .start .month mat-month-view .mat-calendar-table tbody tr td.mat-calendar-body-cell.fuse-date-range.fuse-date-range-end:before,.fuse-date-range-panel .end .month mat-month-view .mat-calendar-table tbody tr td.mat-calendar-body-cell.fuse-date-range.fuse-date-range-end:before{right:2px;border-radius:0 999px 999px 0}.fuse-date-range-panel .start .month mat-month-view .mat-calendar-table tbody tr td.mat-calendar-body-cell.fuse-date-range.fuse-date-range-end:first-child:before,.fuse-date-range-panel .end .month mat-month-view .mat-calendar-table tbody tr td.mat-calendar-body-cell.fuse-date-range.fuse-date-range-end:first-child:before{left:2px;border-radius:999px}.fuse-date-range-panel .start .month mat-month-view .mat-calendar-table tbody tr td.mat-calendar-body-cell.fuse-date-range:first-child:before,.fuse-date-range-panel .end .month mat-month-view .mat-calendar-table tbody tr td.mat-calendar-body-cell.fuse-date-range:first-child:before{border-radius:999px 0 0 999px}.fuse-date-range-panel .start .month mat-month-view .mat-calendar-table tbody tr td.mat-calendar-body-cell.fuse-date-range:last-child:before,.fuse-date-range-panel .end .month mat-month-view .mat-calendar-table tbody tr td.mat-calendar-body-cell.fuse-date-range:last-child:before{border-radius:0 999px 999px 0}.fuse-date-range-panel .start .month mat-month-view .mat-calendar-table tbody tr td.mat-calendar-body-cell .mat-calendar-body-cell-content,.fuse-date-range-panel .end .month mat-month-view .mat-calendar-table tbody tr td.mat-calendar-body-cell .mat-calendar-body-cell-content{position:relative;top:0;left:0;width:24px;height:24px;font-size:12px}.fuse-date-range-panel .start .month mat-month-view .mat-calendar-table tbody tr td.mat-calendar-body-label+td.mat-calendar-body-cell.fuse-date-range:before,.fuse-date-range-panel .end .month mat-month-view .mat-calendar-table tbody tr td.mat-calendar-body-label+td.mat-calendar-body-cell.fuse-date-range:before{border-radius:999px 0 0 999px}.fuse-date-range-panel .start .month mat-month-view .mat-calendar-table tbody tr td.mat-calendar-body-label+td.mat-calendar-body-cell.fuse-date-range.fuse-date-range-start.fuse-date-range-end,.fuse-date-range-panel .end .month mat-month-view .mat-calendar-table tbody tr td.mat-calendar-body-label+td.mat-calendar-body-cell.fuse-date-range.fuse-date-range-start.fuse-date-range-end{border-radius:999px}.fuse-date-range-panel .start .month mat-month-view .mat-calendar-table tbody tr td.mat-calendar-body-label+td.mat-calendar-body-cell.fuse-date-range.fuse-date-range-end:before,.fuse-date-range-panel .end .month mat-month-view .mat-calendar-table tbody tr td.mat-calendar-body-label+td.mat-calendar-body-cell.fuse-date-range.fuse-date-range-end:before{left:2px;border-radius:999px}.fuse-date-range-panel .start .time,.fuse-date-range-panel .end .time{width:100%;max-width:196px}.fuse-date-range-panel .start{align-items:flex-start;margin-right:20px}.fuse-date-range-panel .start .month .month-label{margin-left:8px}.fuse-date-range-panel .end{align-items:flex-end;margin-left:20px}.fuse-date-range-panel .end .month .month-label{margin-right:8px}\\n\"],\n    encapsulation: 2\n  });\n  return FuseDateRangeComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}