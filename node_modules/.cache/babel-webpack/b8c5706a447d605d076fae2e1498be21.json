{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport * as moment from 'moment';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/material/dialog\";\nimport * as i2 from \"app/modules/admin/apps/calendar/calendar.service\";\nimport * as i3 from \"@angular/forms\";\nimport * as i4 from \"@angular/material/form-field\";\nimport * as i5 from \"@angular/material/input\";\nimport * as i6 from \"@angular/material/select\";\nimport * as i7 from \"@angular/material/core\";\nimport * as i8 from \"@angular/common\";\nimport * as i9 from \"@angular/material/button\";\nimport * as i10 from \"@angular/material/button-toggle\";\nimport * as i11 from \"@angular/material/tooltip\";\nimport * as i12 from \"@angular/material/datepicker\";\nfunction CalendarRecurrenceComponent_div_18_ng_container_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"mat-button-toggle\", 20);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const weekday_r5 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"disableRipple\", true)(\"value\", weekday_r5.value)(\"matTooltip\", weekday_r5.label);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", weekday_r5.abbr, \" \");\n  }\n}\nfunction CalendarRecurrenceComponent_div_18_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 16);\n    i0.ɵɵelementStart(1, \"div\", 17);\n    i0.ɵɵtext(2, \"Repeat on\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"mat-button-toggle-group\", 18);\n    i0.ɵɵtemplate(4, CalendarRecurrenceComponent_div_18_ng_container_4_Template, 3, 4, \"ng-container\", 19);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"formGroupName\", \"weekly\");\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"formControlName\", \"byDay\")(\"multiple\", true);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r0.weekdays);\n  }\n}\nfunction CalendarRecurrenceComponent_div_19_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 21);\n    i0.ɵɵelementStart(1, \"mat-form-field\", 22);\n    i0.ɵɵelementStart(2, \"mat-label\");\n    i0.ɵɵtext(3, \"Repeat on\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"mat-select\", 6);\n    i0.ɵɵelementStart(5, \"mat-option\", 7);\n    i0.ɵɵtext(6);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"mat-option\", 7);\n    i0.ɵɵtext(8);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"formGroupName\", \"monthly\");\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"formControlName\", \"repeatOn\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"value\", \"date\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\"Monthly on day \", ctx_r1.recurrenceForm.get(\"monthly.date\").value, \"\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"value\", \"nthWeekday\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\"Monthly on the \", ctx_r1.nthWeekdayText, \"\");\n  }\n}\nfunction CalendarRecurrenceComponent_mat_form_field_32_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-form-field\", 5);\n    i0.ɵɵelement(1, \"input\", 23);\n    i0.ɵɵelement(2, \"mat-datepicker-toggle\", 24);\n    i0.ɵɵelement(3, \"mat-datepicker\", null, 25);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const _r6 = i0.ɵɵreference(4);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"matDatepicker\", _r6)(\"formControlName\", \"until\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"for\", _r6);\n  }\n}\nfunction CalendarRecurrenceComponent_mat_form_field_33_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-form-field\", 5);\n    i0.ɵɵelement(1, \"input\", 4);\n    i0.ɵɵelementStart(2, \"span\", 26);\n    i0.ɵɵtext(3, \"occurrence(s)\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"autocomplete\", \"off\")(\"formControlName\", \"count\")(\"min\", 1);\n  }\n}\nexport let CalendarRecurrenceComponent = /*#__PURE__*/(() => {\n  class CalendarRecurrenceComponent {\n    /**\r\n     * Constructor\r\n     */\n    constructor(data, matDialogRef, _calendarService, _formBuilder) {\n      this.data = data;\n      this.matDialogRef = matDialogRef;\n      this._calendarService = _calendarService;\n      this._formBuilder = _formBuilder;\n      this._unsubscribeAll = new Subject();\n    }\n    // -----------------------------------------------------------------------------------------------------\n    // @ Lifecycle hooks\n    // -----------------------------------------------------------------------------------------------------\n    /**\r\n     * On init\r\n     */\n    ngOnInit() {\n      // Get weekdays\n      this._calendarService.weekdays$.pipe(takeUntil(this._unsubscribeAll)).subscribe(weekdays => {\n        // Store the weekdays\n        this.weekdays = weekdays;\n      });\n      // Initialize\n      this._init();\n      // Create the recurrence form\n      this.recurrenceForm = this._formBuilder.group({\n        freq: [null],\n        interval: [null, Validators.required],\n        weekly: this._formBuilder.group({\n          byDay: [[]]\n        }),\n        monthly: this._formBuilder.group({\n          repeatOn: [null],\n          date: [null],\n          nthWeekday: [null]\n        }),\n        end: this._formBuilder.group({\n          type: [null],\n          until: [null],\n          count: [null]\n        })\n      });\n      // Subscribe to 'freq' field value changes\n      this.recurrenceForm.get('freq').valueChanges.subscribe(value => {\n        // Set the end values\n        this._setEndValues(value);\n      });\n      // Subscribe to 'weekly.byDay' field value changes\n      this.recurrenceForm.get('weekly.byDay').valueChanges.subscribe(value => {\n        // Get the event's start date\n        const startDate = moment(this.data.event.start);\n        // If nothing is selected, select the original value from\n        // the event form to prevent an empty value on the field\n        if (!value || !value.length) {\n          // Get the day of event start date\n          const eventStartDay = startDate.format('dd').toUpperCase();\n          // Set the original value back without emitting a\n          // change event to prevent an infinite loop\n          this.recurrenceForm.get('weekly.byDay').setValue([eventStartDay], {\n            emitEvent: false\n          });\n        }\n      });\n      // Patch the form with the values\n      this.recurrenceForm.patchValue(this.recurrenceFormValues);\n      // Set end values for the first time\n      this._setEndValues(this.recurrenceForm.get('freq').value);\n    }\n    /**\r\n     * On destroy\r\n     */\n    ngOnDestroy() {\n      // Unsubscribe from all subscriptions\n      this._unsubscribeAll.next();\n      this._unsubscribeAll.complete();\n    }\n    // -----------------------------------------------------------------------------------------------------\n    // @ Public methods\n    // -----------------------------------------------------------------------------------------------------\n    /**\r\n     * Clear\r\n     */\n    clear() {\n      // Close the dialog\n      this.matDialogRef.close({\n        recurrence: 'cleared'\n      });\n    }\n    /**\r\n     * Done\r\n     */\n    done() {\n      // Get the recurrence form values\n      const recurrenceForm = this.recurrenceForm.value;\n      // Prepare the rule array and add the base rules\n      const ruleArr = ['FREQ=' + recurrenceForm.freq, 'INTERVAL=' + recurrenceForm.interval];\n      // If monthly on certain days...\n      if (recurrenceForm.freq === 'MONTHLY' && recurrenceForm.monthly.repeatOn === 'nthWeekday') {\n        ruleArr.push('BYDAY=' + recurrenceForm.monthly.nthWeekday);\n      }\n      // If weekly...\n      if (recurrenceForm.freq === 'WEEKLY') {\n        // If byDay is an array...\n        if (Array.isArray(recurrenceForm.weekly.byDay)) {\n          ruleArr.push('BYDAY=' + recurrenceForm.weekly.byDay.join(','));\n        }\n        // Otherwise\n        else {\n          ruleArr.push('BYDAY=' + recurrenceForm.weekly.byDay);\n        }\n      }\n      // If one of the end options is selected...\n      if (recurrenceForm.end.type === 'until') {\n        ruleArr.push('UNTIL=' + moment(recurrenceForm.end.until).endOf('day').utc().format('YYYYMMDD[T]HHmmss[Z]'));\n      }\n      if (recurrenceForm.end.type === 'count') {\n        ruleArr.push('COUNT=' + recurrenceForm.end.count);\n      }\n      // Generate rule text\n      const ruleText = ruleArr.join(';');\n      // Close the dialog\n      this.matDialogRef.close({\n        recurrence: ruleText\n      });\n    }\n    // -----------------------------------------------------------------------------------------------------\n    // @ Private methods\n    // -----------------------------------------------------------------------------------------------------\n    /**\r\n     * Initialize\r\n     *\r\n     * @private\r\n     */\n    _init() {\n      // Get the event's start date\n      const startDate = moment(this.data.event.start);\n      // Calculate the weekday\n      const weekday = moment(this.data.event.start).format('dd').toUpperCase();\n      // Calculate the nthWeekday\n      let nthWeekdayNo = 1;\n      while (startDate.clone().isSame(startDate.clone().subtract(nthWeekdayNo, 'week'), 'month')) {\n        nthWeekdayNo++;\n      }\n      const nthWeekday = nthWeekdayNo + weekday;\n      // Calculate the nthWeekday as text\n      const ordinalNumberSuffixes = {\n        1: 'st',\n        2: 'nd',\n        3: 'rd',\n        4: 'th',\n        5: 'th'\n      };\n      this.nthWeekdayText = nthWeekday.slice(0, 1) + ordinalNumberSuffixes[nthWeekday.slice(0, 1)] + ' ' + this.weekdays.find(item => item.value === nthWeekday.slice(-2)).label;\n      // Set the defaults on recurrence form values\n      this.recurrenceFormValues = {\n        freq: 'DAILY',\n        interval: 1,\n        weekly: {\n          byDay: weekday\n        },\n        monthly: {\n          repeatOn: 'date',\n          date: moment(this.data.event.start).date(),\n          nthWeekday: nthWeekday\n        },\n        end: {\n          type: 'never',\n          until: null,\n          count: null\n        }\n      };\n      // If recurrence rule string is available on the\n      // event meaning that the is a recurring one...\n      if (this.data.event.recurrence) {\n        // Parse the rules\n        const parsedRules = {};\n        this.data.event.recurrence.split(';').forEach(rule => {\n          parsedRules[rule.split('=')[0]] = rule.split('=')[1];\n        });\n        // Overwrite the recurrence form values\n        this.recurrenceFormValues.freq = parsedRules.FREQ;\n        this.recurrenceFormValues.interval = parsedRules.INTERVAL;\n        if (parsedRules.FREQ === 'WEEKLY') {\n          this.recurrenceFormValues.weekly.byDay = parsedRules.BYDAY.split(',');\n        }\n        if (parsedRules.FREQ === 'MONTHLY') {\n          this.recurrenceFormValues.monthly.repeatOn = parsedRules.BYDAY ? 'nthWeekday' : 'date';\n        }\n        this.recurrenceFormValues.end.type = parsedRules.UNTIL ? 'until' : parsedRules.COUNT ? 'count' : 'never';\n        this.recurrenceFormValues.end.until = parsedRules.UNTIL || null;\n        this.recurrenceFormValues.end.count = parsedRules.COUNT || null;\n      }\n    }\n    /**\r\n     * Set the end value based on frequency\r\n     *\r\n     * @param freq\r\n     * @private\r\n     */\n    _setEndValues(freq) {\n      // Return if freq is not available\n      if (!freq) {\n        return;\n      }\n      // Get the event's start date\n      const startDate = moment(this.data.event.startDate);\n      // Get the end type\n      const endType = this.recurrenceForm.get('end.type').value;\n      // If until is not selected\n      if (endType !== 'until') {\n        let until;\n        // Change the until's default value based on the frequency\n        if (freq === 'DAILY') {\n          until = startDate.clone().add(1, 'month').toISOString();\n        }\n        if (freq === 'WEEKLY') {\n          until = startDate.clone().add(12, 'weeks').toISOString();\n        }\n        if (freq === 'MONTHLY') {\n          until = startDate.clone().add(12, 'months').toISOString();\n        }\n        if (freq === 'YEARLY') {\n          until = startDate.clone().add(5, 'years').toISOString();\n        }\n        // Set the until\n        this.recurrenceForm.get('end.until').setValue(until);\n      }\n      // If count is not selected...\n      if (endType !== 'count') {\n        let count;\n        // Change the count's default value based on the frequency\n        if (freq === 'DAILY') {\n          count = 30;\n        }\n        if (freq === 'WEEKLY' || freq === 'MONTHLY') {\n          count = 12;\n        }\n        if (freq === 'YEARLY') {\n          count = 5;\n        }\n        // Set the count\n        this.recurrenceForm.get('end.count').setValue(count);\n      }\n    }\n  }\n  CalendarRecurrenceComponent.ɵfac = function CalendarRecurrenceComponent_Factory(t) {\n    return new (t || CalendarRecurrenceComponent)(i0.ɵɵdirectiveInject(MAT_DIALOG_DATA), i0.ɵɵdirectiveInject(i1.MatDialogRef), i0.ɵɵdirectiveInject(i2.CalendarService), i0.ɵɵdirectiveInject(i3.FormBuilder));\n  };\n  CalendarRecurrenceComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: CalendarRecurrenceComponent,\n    selectors: [[\"calendar-recurrence\"]],\n    decls: 39,\n    vars: 21,\n    consts: [[1, \"flex\", \"flex-col\", \"w-full\", 3, \"formGroup\"], [1, \"text-2xl\", \"font-semibold\", \"tracking-tight\"], [1, \"flex\", \"mt-12\"], [1, \"fuse-mat-no-subscript\", \"w-24\", \"-mt-6\"], [\"type\", \"number\", \"matInput\", \"\", 3, \"autocomplete\", \"formControlName\", \"min\"], [1, \"fuse-mat-no-subscript\", \"w-40\", \"ml-4\"], [3, \"formControlName\"], [3, \"value\"], [\"class\", \"flex flex-col mt-6\", 3, \"formGroupName\", 4, \"ngIf\"], [\"class\", \"flex mt-6\", 3, \"formGroupName\", 4, \"ngIf\"], [1, \"flex\", \"flex-col\", \"mt-12\", 3, \"formGroupName\"], [1, \"flex\", \"items-center\"], [\"class\", \"fuse-mat-no-subscript w-40 ml-4\", 4, \"ngIf\"], [1, \"ml-auto\", \"mt-8\"], [\"mat-button\", \"\", 1, \"clear\", 3, \"color\", \"click\"], [\"mat-flat-button\", \"\", 3, \"disabled\", \"color\", \"click\"], [1, \"flex\", \"flex-col\", \"mt-6\", 3, \"formGroupName\"], [1, \"font-medium\"], [1, \"mt-1.5\", \"border-0\", \"space-x-1\", 3, \"formControlName\", \"multiple\"], [4, \"ngFor\", \"ngForOf\"], [1, \"w-10\", \"h-10\", \"border-0\", \"rounded-full\", 3, \"disableRipple\", \"value\", \"matTooltip\"], [1, \"flex\", \"mt-6\", 3, \"formGroupName\"], [1, \"fuse-mat-no-subscript\", \"w-full\"], [\"matInput\", \"\", 3, \"matDatepicker\", \"formControlName\"], [\"matSuffix\", \"\", 3, \"for\"], [\"untilDatePicker\", \"\"], [\"matSuffix\", \"\"]],\n    template: function CalendarRecurrenceComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"form\", 0);\n        i0.ɵɵelementStart(1, \"div\", 1);\n        i0.ɵɵtext(2, \"Recurrence rules\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(3, \"div\", 2);\n        i0.ɵɵelementStart(4, \"mat-form-field\", 3);\n        i0.ɵɵelementStart(5, \"mat-label\");\n        i0.ɵɵtext(6, \"Repeat every\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(7, \"input\", 4);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(8, \"mat-form-field\", 5);\n        i0.ɵɵelementStart(9, \"mat-select\", 6);\n        i0.ɵɵelementStart(10, \"mat-option\", 7);\n        i0.ɵɵtext(11, \"day(s)\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(12, \"mat-option\", 7);\n        i0.ɵɵtext(13, \"week(s)\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(14, \"mat-option\", 7);\n        i0.ɵɵtext(15, \"month(s)\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(16, \"mat-option\", 7);\n        i0.ɵɵtext(17, \"year(s)\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(18, CalendarRecurrenceComponent_div_18_Template, 5, 4, \"div\", 8);\n        i0.ɵɵtemplate(19, CalendarRecurrenceComponent_div_19_Template, 9, 6, \"div\", 9);\n        i0.ɵɵelementStart(20, \"div\", 10);\n        i0.ɵɵelementStart(21, \"div\", 11);\n        i0.ɵɵelementStart(22, \"mat-form-field\", 3);\n        i0.ɵɵelementStart(23, \"mat-label\");\n        i0.ɵɵtext(24, \"Ends\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(25, \"mat-select\", 6);\n        i0.ɵɵelementStart(26, \"mat-option\", 7);\n        i0.ɵɵtext(27, \"Never\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(28, \"mat-option\", 7);\n        i0.ɵɵtext(29, \"On\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(30, \"mat-option\", 7);\n        i0.ɵɵtext(31, \"After\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(32, CalendarRecurrenceComponent_mat_form_field_32_Template, 5, 3, \"mat-form-field\", 12);\n        i0.ɵɵtemplate(33, CalendarRecurrenceComponent_mat_form_field_33_Template, 4, 3, \"mat-form-field\", 12);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(34, \"div\", 13);\n        i0.ɵɵelementStart(35, \"button\", 14);\n        i0.ɵɵlistener(\"click\", function CalendarRecurrenceComponent_Template_button_click_35_listener() {\n          return ctx.clear();\n        });\n        i0.ɵɵtext(36, \" Clear \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(37, \"button\", 15);\n        i0.ɵɵlistener(\"click\", function CalendarRecurrenceComponent_Template_button_click_37_listener() {\n          return ctx.done();\n        });\n        i0.ɵɵtext(38, \" Done \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n      if (rf & 2) {\n        i0.ɵɵproperty(\"formGroup\", ctx.recurrenceForm);\n        i0.ɵɵadvance(7);\n        i0.ɵɵproperty(\"autocomplete\", \"off\")(\"formControlName\", \"interval\")(\"min\", 1);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"formControlName\", \"freq\");\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"value\", \"DAILY\");\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"value\", \"WEEKLY\");\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"value\", \"MONTHLY\");\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"value\", \"YEARLY\");\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngIf\", ctx.recurrenceForm.get(\"freq\").value === \"WEEKLY\");\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.recurrenceForm.get(\"freq\").value === \"MONTHLY\");\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"formGroupName\", \"end\");\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"formControlName\", \"type\");\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"value\", \"never\");\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"value\", \"until\");\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"value\", \"count\");\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngIf\", ctx.recurrenceForm.get(\"end.type\").value === \"until\");\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.recurrenceForm.get(\"end.type\").value === \"count\");\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"color\", \"primary\");\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"disabled\", ctx.recurrenceForm.invalid)(\"color\", \"primary\");\n      }\n    },\n    directives: [i3.ɵNgNoValidate, i3.NgControlStatusGroup, i3.FormGroupDirective, i4.MatFormField, i4.MatLabel, i3.NumberValueAccessor, i3.MinValidator, i5.MatInput, i3.DefaultValueAccessor, i3.NgControlStatus, i3.FormControlName, i6.MatSelect, i7.MatOption, i8.NgIf, i3.FormGroupName, i9.MatButton, i10.MatButtonToggleGroup, i8.NgForOf, i10.MatButtonToggle, i11.MatTooltip, i12.MatDatepickerInput, i12.MatDatepickerToggle, i4.MatSuffix, i12.MatDatepicker],\n    encapsulation: 2\n  });\n  return CalendarRecurrenceComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}