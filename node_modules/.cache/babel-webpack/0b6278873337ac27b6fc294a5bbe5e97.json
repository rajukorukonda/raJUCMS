{"ast":null,"code":"/*!\nFullCalendar List View Plugin v4.4.2\nDocs & License: https://fullcalendar.io/\n(c) 2019 Adam Shaw\n*/\n\nimport { getAllDayHtml, isMultiDayRange, htmlEscape, FgEventRenderer, memoize, memoizeRendering, ScrollComponent, subtractInnerElHeight, sliceEventStore, intersectRanges, htmlToElement, createFormatter, createElement, buildGotoAnchorHtml, View, startOfDay, addDays, createPlugin } from '@fullcalendar/core';\n\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\n/* global Reflect, Promise */\n\nvar extendStatics = function (d, b) {\n  extendStatics = Object.setPrototypeOf || {\n    __proto__: []\n  } instanceof Array && function (d, b) {\n    d.__proto__ = b;\n  } || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n  };\n  return extendStatics(d, b);\n};\nfunction __extends(d, b) {\n  extendStatics(d, b);\n  function __() {\n    this.constructor = d;\n  }\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n}\nvar ListEventRenderer = /** @class */function (_super) {\n  __extends(ListEventRenderer, _super);\n  function ListEventRenderer(listView) {\n    var _this = _super.call(this) || this;\n    _this.listView = listView;\n    return _this;\n  }\n  ListEventRenderer.prototype.attachSegs = function (segs) {\n    if (!segs.length) {\n      this.listView.renderEmptyMessage();\n    } else {\n      this.listView.renderSegList(segs);\n    }\n  };\n  ListEventRenderer.prototype.detachSegs = function () {};\n  // generates the HTML for a single event row\n  ListEventRenderer.prototype.renderSegHtml = function (seg) {\n    var _a = this.context,\n      theme = _a.theme,\n      options = _a.options;\n    var eventRange = seg.eventRange;\n    var eventDef = eventRange.def;\n    var eventInstance = eventRange.instance;\n    var eventUi = eventRange.ui;\n    var url = eventDef.url;\n    var classes = ['fc-list-item'].concat(eventUi.classNames);\n    var bgColor = eventUi.backgroundColor;\n    var timeHtml;\n    if (eventDef.allDay) {\n      timeHtml = getAllDayHtml(options);\n    } else if (isMultiDayRange(eventRange.range)) {\n      if (seg.isStart) {\n        timeHtml = htmlEscape(this._getTimeText(eventInstance.range.start, seg.end, false // allDay\n        ));\n      } else if (seg.isEnd) {\n        timeHtml = htmlEscape(this._getTimeText(seg.start, eventInstance.range.end, false // allDay\n        ));\n      } else {\n        // inner segment that lasts the whole day\n        timeHtml = getAllDayHtml(options);\n      }\n    } else {\n      // Display the normal time text for the *event's* times\n      timeHtml = htmlEscape(this.getTimeText(eventRange));\n    }\n    if (url) {\n      classes.push('fc-has-url');\n    }\n    return '<tr class=\"' + classes.join(' ') + '\">' + (this.displayEventTime ? '<td class=\"fc-list-item-time ' + theme.getClass('widgetContent') + '\">' + (timeHtml || '') + '</td>' : '') + '<td class=\"fc-list-item-marker ' + theme.getClass('widgetContent') + '\">' + '<span class=\"fc-event-dot\"' + (bgColor ? ' style=\"background-color:' + bgColor + '\"' : '') + '></span>' + '</td>' + '<td class=\"fc-list-item-title ' + theme.getClass('widgetContent') + '\">' + '<a' + (url ? ' href=\"' + htmlEscape(url) + '\"' : '') + '>' + htmlEscape(eventDef.title || '') + '</a>' + '</td>' + '</tr>';\n  };\n  // like \"4:00am\"\n  ListEventRenderer.prototype.computeEventTimeFormat = function () {\n    return {\n      hour: 'numeric',\n      minute: '2-digit',\n      meridiem: 'short'\n    };\n  };\n  return ListEventRenderer;\n}(FgEventRenderer);\n\n/*\nResponsible for the scroller, and forwarding event-related actions into the \"grid\".\n*/\nvar ListView = /** @class */function (_super) {\n  __extends(ListView, _super);\n  function ListView(viewSpec, parentEl) {\n    var _this = _super.call(this, viewSpec, parentEl) || this;\n    _this.computeDateVars = memoize(computeDateVars);\n    _this.eventStoreToSegs = memoize(_this._eventStoreToSegs);\n    _this.renderSkeleton = memoizeRendering(_this._renderSkeleton, _this._unrenderSkeleton);\n    var eventRenderer = _this.eventRenderer = new ListEventRenderer(_this);\n    _this.renderContent = memoizeRendering(eventRenderer.renderSegs.bind(eventRenderer), eventRenderer.unrender.bind(eventRenderer), [_this.renderSkeleton]);\n    return _this;\n  }\n  ListView.prototype.firstContext = function (context) {\n    context.calendar.registerInteractiveComponent(this, {\n      el: this.el\n      // TODO: make aware that it doesn't do Hits\n    });\n  };\n\n  ListView.prototype.render = function (props, context) {\n    _super.prototype.render.call(this, props, context);\n    var _a = this.computeDateVars(props.dateProfile),\n      dayDates = _a.dayDates,\n      dayRanges = _a.dayRanges;\n    this.dayDates = dayDates;\n    this.renderSkeleton(context);\n    this.renderContent(context, this.eventStoreToSegs(props.eventStore, props.eventUiBases, dayRanges));\n  };\n  ListView.prototype.destroy = function () {\n    _super.prototype.destroy.call(this);\n    this.renderSkeleton.unrender();\n    this.renderContent.unrender();\n    this.context.calendar.unregisterInteractiveComponent(this);\n  };\n  ListView.prototype._renderSkeleton = function (context) {\n    var theme = context.theme;\n    this.el.classList.add('fc-list-view');\n    var listViewClassNames = (theme.getClass('listView') || '').split(' '); // wish we didn't have to do this\n    for (var _i = 0, listViewClassNames_1 = listViewClassNames; _i < listViewClassNames_1.length; _i++) {\n      var listViewClassName = listViewClassNames_1[_i];\n      if (listViewClassName) {\n        // in case input was empty string\n        this.el.classList.add(listViewClassName);\n      }\n    }\n    this.scroller = new ScrollComponent('hidden',\n    // overflow x\n    'auto' // overflow y\n    );\n\n    this.el.appendChild(this.scroller.el);\n    this.contentEl = this.scroller.el; // shortcut\n  };\n\n  ListView.prototype._unrenderSkeleton = function () {\n    // TODO: remove classNames\n    this.scroller.destroy(); // will remove the Grid too\n  };\n\n  ListView.prototype.updateSize = function (isResize, viewHeight, isAuto) {\n    _super.prototype.updateSize.call(this, isResize, viewHeight, isAuto);\n    this.eventRenderer.computeSizes(isResize);\n    this.eventRenderer.assignSizes(isResize);\n    this.scroller.clear(); // sets height to 'auto' and clears overflow\n    if (!isAuto) {\n      this.scroller.setHeight(this.computeScrollerHeight(viewHeight));\n    }\n  };\n  ListView.prototype.computeScrollerHeight = function (viewHeight) {\n    return viewHeight - subtractInnerElHeight(this.el, this.scroller.el); // everything that's NOT the scroller\n  };\n\n  ListView.prototype._eventStoreToSegs = function (eventStore, eventUiBases, dayRanges) {\n    return this.eventRangesToSegs(sliceEventStore(eventStore, eventUiBases, this.props.dateProfile.activeRange, this.context.nextDayThreshold).fg, dayRanges);\n  };\n  ListView.prototype.eventRangesToSegs = function (eventRanges, dayRanges) {\n    var segs = [];\n    for (var _i = 0, eventRanges_1 = eventRanges; _i < eventRanges_1.length; _i++) {\n      var eventRange = eventRanges_1[_i];\n      segs.push.apply(segs, this.eventRangeToSegs(eventRange, dayRanges));\n    }\n    return segs;\n  };\n  ListView.prototype.eventRangeToSegs = function (eventRange, dayRanges) {\n    var _a = this.context,\n      dateEnv = _a.dateEnv,\n      nextDayThreshold = _a.nextDayThreshold;\n    var range = eventRange.range;\n    var allDay = eventRange.def.allDay;\n    var dayIndex;\n    var segRange;\n    var seg;\n    var segs = [];\n    for (dayIndex = 0; dayIndex < dayRanges.length; dayIndex++) {\n      segRange = intersectRanges(range, dayRanges[dayIndex]);\n      if (segRange) {\n        seg = {\n          component: this,\n          eventRange: eventRange,\n          start: segRange.start,\n          end: segRange.end,\n          isStart: eventRange.isStart && segRange.start.valueOf() === range.start.valueOf(),\n          isEnd: eventRange.isEnd && segRange.end.valueOf() === range.end.valueOf(),\n          dayIndex: dayIndex\n        };\n        segs.push(seg);\n        // detect when range won't go fully into the next day,\n        // and mutate the latest seg to the be the end.\n        if (!seg.isEnd && !allDay && dayIndex + 1 < dayRanges.length && range.end < dateEnv.add(dayRanges[dayIndex + 1].start, nextDayThreshold)) {\n          seg.end = range.end;\n          seg.isEnd = true;\n          break;\n        }\n      }\n    }\n    return segs;\n  };\n  ListView.prototype.renderEmptyMessage = function () {\n    this.contentEl.innerHTML = '<div class=\"fc-list-empty-wrap2\">' +\n    // TODO: try less wraps\n    '<div class=\"fc-list-empty-wrap1\">' + '<div class=\"fc-list-empty\">' + htmlEscape(this.context.options.noEventsMessage) + '</div>' + '</div>' + '</div>';\n  };\n  // called by ListEventRenderer\n  ListView.prototype.renderSegList = function (allSegs) {\n    var theme = this.context.theme;\n    var segsByDay = this.groupSegsByDay(allSegs); // sparse array\n    var dayIndex;\n    var daySegs;\n    var i;\n    var tableEl = htmlToElement('<table class=\"fc-list-table ' + theme.getClass('tableList') + '\"><tbody></tbody></table>');\n    var tbodyEl = tableEl.querySelector('tbody');\n    for (dayIndex = 0; dayIndex < segsByDay.length; dayIndex++) {\n      daySegs = segsByDay[dayIndex];\n      if (daySegs) {\n        // sparse array, so might be undefined\n        // append a day header\n        tbodyEl.appendChild(this.buildDayHeaderRow(this.dayDates[dayIndex]));\n        daySegs = this.eventRenderer.sortEventSegs(daySegs);\n        for (i = 0; i < daySegs.length; i++) {\n          tbodyEl.appendChild(daySegs[i].el); // append event row\n        }\n      }\n    }\n\n    this.contentEl.innerHTML = '';\n    this.contentEl.appendChild(tableEl);\n  };\n  // Returns a sparse array of arrays, segs grouped by their dayIndex\n  ListView.prototype.groupSegsByDay = function (segs) {\n    var segsByDay = []; // sparse array\n    var i;\n    var seg;\n    for (i = 0; i < segs.length; i++) {\n      seg = segs[i];\n      (segsByDay[seg.dayIndex] || (segsByDay[seg.dayIndex] = [])).push(seg);\n    }\n    return segsByDay;\n  };\n  // generates the HTML for the day headers that live amongst the event rows\n  ListView.prototype.buildDayHeaderRow = function (dayDate) {\n    var _a = this.context,\n      theme = _a.theme,\n      dateEnv = _a.dateEnv,\n      options = _a.options;\n    var mainFormat = createFormatter(options.listDayFormat); // TODO: cache\n    var altFormat = createFormatter(options.listDayAltFormat); // TODO: cache\n    return createElement('tr', {\n      className: 'fc-list-heading',\n      'data-date': dateEnv.formatIso(dayDate, {\n        omitTime: true\n      })\n    }, '<td class=\"' + (theme.getClass('tableListHeading') || theme.getClass('widgetHeader')) + '\" colspan=\"3\">' + (mainFormat ? buildGotoAnchorHtml(options, dateEnv, dayDate, {\n      'class': 'fc-list-heading-main'\n    }, htmlEscape(dateEnv.format(dayDate, mainFormat)) // inner HTML\n    ) : '') + (altFormat ? buildGotoAnchorHtml(options, dateEnv, dayDate, {\n      'class': 'fc-list-heading-alt'\n    }, htmlEscape(dateEnv.format(dayDate, altFormat)) // inner HTML\n    ) : '') + '</td>');\n  };\n  return ListView;\n}(View);\nListView.prototype.fgSegSelector = '.fc-list-item'; // which elements accept event actions\nfunction computeDateVars(dateProfile) {\n  var dayStart = startOfDay(dateProfile.renderRange.start);\n  var viewEnd = dateProfile.renderRange.end;\n  var dayDates = [];\n  var dayRanges = [];\n  while (dayStart < viewEnd) {\n    dayDates.push(dayStart);\n    dayRanges.push({\n      start: dayStart,\n      end: addDays(dayStart, 1)\n    });\n    dayStart = addDays(dayStart, 1);\n  }\n  return {\n    dayDates: dayDates,\n    dayRanges: dayRanges\n  };\n}\nvar main = createPlugin({\n  views: {\n    list: {\n      class: ListView,\n      buttonTextKey: 'list',\n      listDayFormat: {\n        month: 'long',\n        day: 'numeric',\n        year: 'numeric'\n      } // like \"January 1, 2016\"\n    },\n\n    listDay: {\n      type: 'list',\n      duration: {\n        days: 1\n      },\n      listDayFormat: {\n        weekday: 'long'\n      } // day-of-week is all we need. full date is probably in header\n    },\n\n    listWeek: {\n      type: 'list',\n      duration: {\n        weeks: 1\n      },\n      listDayFormat: {\n        weekday: 'long'\n      },\n      listDayAltFormat: {\n        month: 'long',\n        day: 'numeric',\n        year: 'numeric'\n      }\n    },\n    listMonth: {\n      type: 'list',\n      duration: {\n        month: 1\n      },\n      listDayAltFormat: {\n        weekday: 'long'\n      } // day-of-week is nice-to-have\n    },\n\n    listYear: {\n      type: 'list',\n      duration: {\n        year: 1\n      },\n      listDayAltFormat: {\n        weekday: 'long'\n      } // day-of-week is nice-to-have\n    }\n  }\n});\n\nexport default main;\nexport { ListView };","map":null,"metadata":{},"sourceType":"module"}