{"ast":null,"code":"import { assign, cloneDeep } from 'lodash-es';\nimport { FuseMockApiUtils } from '@fuse/lib/mock-api';\nimport { shortcuts as shortcutsData } from 'app/mock-api/common/shortcuts/data';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@fuse/lib/mock-api\";\nexport let ShortcutsMockApi = /*#__PURE__*/(() => {\n  class ShortcutsMockApi {\n    /**\r\n     * Constructor\r\n     */\n    constructor(_fuseMockApiService) {\n      this._fuseMockApiService = _fuseMockApiService;\n      this._shortcuts = shortcutsData;\n      // Register Mock API handlers\n      this.registerHandlers();\n    }\n    // -----------------------------------------------------------------------------------------------------\n    // @ Public methods\n    // -----------------------------------------------------------------------------------------------------\n    /**\r\n     * Register Mock API handlers\r\n     */\n    registerHandlers() {\n      // -----------------------------------------------------------------------------------------------------\n      // @ Shortcuts - GET\n      // -----------------------------------------------------------------------------------------------------\n      this._fuseMockApiService.onGet('api/common/shortcuts').reply(() => [200, cloneDeep(this._shortcuts)]);\n      // -----------------------------------------------------------------------------------------------------\n      // @ Shortcuts - POST\n      // -----------------------------------------------------------------------------------------------------\n      this._fuseMockApiService.onPost('api/common/shortcuts').reply(({\n        request\n      }) => {\n        // Get the shortcut\n        const newShortcut = cloneDeep(request.body.shortcut);\n        // Generate a new GUID\n        newShortcut.id = FuseMockApiUtils.guid();\n        // Unshift the new shortcut\n        this._shortcuts.unshift(newShortcut);\n        // Return the response\n        return [200, newShortcut];\n      });\n      // -----------------------------------------------------------------------------------------------------\n      // @ Shortcuts - PATCH\n      // -----------------------------------------------------------------------------------------------------\n      this._fuseMockApiService.onPatch('api/common/shortcuts').reply(({\n        request\n      }) => {\n        // Get the id and shortcut\n        const id = request.body.id;\n        const shortcut = cloneDeep(request.body.shortcut);\n        // Prepare the updated shortcut\n        let updatedShortcut = null;\n        // Find the shortcut and update it\n        this._shortcuts.forEach((item, index, shortcuts) => {\n          if (item.id === id) {\n            // Update the shortcut\n            shortcuts[index] = assign({}, shortcuts[index], shortcut);\n            // Store the updated shortcut\n            updatedShortcut = shortcuts[index];\n          }\n        });\n        // Return the response\n        return [200, updatedShortcut];\n      });\n      // -----------------------------------------------------------------------------------------------------\n      // @ Shortcuts - DELETE\n      // -----------------------------------------------------------------------------------------------------\n      this._fuseMockApiService.onDelete('api/common/shortcuts').reply(({\n        request\n      }) => {\n        // Get the id\n        const id = request.params.get('id');\n        // Prepare the deleted shortcut\n        let deletedShortcut = null;\n        // Find the shortcut\n        const index = this._shortcuts.findIndex(item => item.id === id);\n        // Store the deleted shortcut\n        deletedShortcut = cloneDeep(this._shortcuts[index]);\n        // Delete the shortcut\n        this._shortcuts.splice(index, 1);\n        // Return the response\n        return [200, deletedShortcut];\n      });\n    }\n  }\n  ShortcutsMockApi.ɵfac = function ShortcutsMockApi_Factory(t) {\n    return new (t || ShortcutsMockApi)(i0.ɵɵinject(i1.FuseMockApiService));\n  };\n  ShortcutsMockApi.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ShortcutsMockApi,\n    factory: ShortcutsMockApi.ɵfac,\n    providedIn: 'root'\n  });\n  return ShortcutsMockApi;\n})();","map":null,"metadata":{},"sourceType":"module"}