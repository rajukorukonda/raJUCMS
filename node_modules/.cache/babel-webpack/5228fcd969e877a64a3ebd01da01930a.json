{"ast":null,"code":"import { ReplaySubject } from 'rxjs';\nimport { map, switchMap, take, tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let NotificationsService = /*#__PURE__*/(() => {\n  class NotificationsService {\n    /**\r\n     * Constructor\r\n     */\n    constructor(_httpClient) {\n      this._httpClient = _httpClient;\n      this._notifications = new ReplaySubject(1);\n    }\n    // -----------------------------------------------------------------------------------------------------\n    // @ Accessors\n    // -----------------------------------------------------------------------------------------------------\n    /**\r\n     * Getter for notifications\r\n     */\n    get notifications$() {\n      return this._notifications.asObservable();\n    }\n    // -----------------------------------------------------------------------------------------------------\n    // @ Public methods\n    // -----------------------------------------------------------------------------------------------------\n    /**\r\n     * Get all notifications\r\n     */\n    getAll() {\n      return this._httpClient.get('api/common/notifications').pipe(tap(notifications => {\n        this._notifications.next(notifications);\n      }));\n    }\n    /**\r\n     * Create a notification\r\n     *\r\n     * @param notification\r\n     */\n    create(notification) {\n      return this.notifications$.pipe(take(1), switchMap(notifications => this._httpClient.post('api/common/notifications', {\n        notification\n      }).pipe(map(newNotification => {\n        // Update the notifications with the new notification\n        this._notifications.next([...notifications, newNotification]);\n        // Return the new notification from observable\n        return newNotification;\n      }))));\n    }\n    /**\r\n     * Update the notification\r\n     *\r\n     * @param id\r\n     * @param notification\r\n     */\n    update(id, notification) {\n      return this.notifications$.pipe(take(1), switchMap(notifications => this._httpClient.patch('api/common/notifications', {\n        id,\n        notification\n      }).pipe(map(updatedNotification => {\n        // Find the index of the updated notification\n        const index = notifications.findIndex(item => item.id === id);\n        // Update the notification\n        notifications[index] = updatedNotification;\n        // Update the notifications\n        this._notifications.next(notifications);\n        // Return the updated notification\n        return updatedNotification;\n      }))));\n    }\n    /**\r\n     * Delete the notification\r\n     *\r\n     * @param id\r\n     */\n    delete(id) {\n      return this.notifications$.pipe(take(1), switchMap(notifications => this._httpClient.delete('api/common/notifications', {\n        params: {\n          id\n        }\n      }).pipe(map(isDeleted => {\n        // Find the index of the deleted notification\n        const index = notifications.findIndex(item => item.id === id);\n        // Delete the notification\n        notifications.splice(index, 1);\n        // Update the notifications\n        this._notifications.next(notifications);\n        // Return the deleted status\n        return isDeleted;\n      }))));\n    }\n    /**\r\n     * Mark all notifications as read\r\n     */\n    markAllAsRead() {\n      return this.notifications$.pipe(take(1), switchMap(notifications => this._httpClient.get('api/common/notifications/mark-all-as-read').pipe(map(isUpdated => {\n        // Go through all notifications and set them as read\n        notifications.forEach((notification, index) => {\n          notifications[index].read = true;\n        });\n        // Update the notifications\n        this._notifications.next(notifications);\n        // Return the updated status\n        return isUpdated;\n      }))));\n    }\n  }\n  NotificationsService.ɵfac = function NotificationsService_Factory(t) {\n    return new (t || NotificationsService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  NotificationsService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: NotificationsService,\n    factory: NotificationsService.ɵfac,\n    providedIn: 'root'\n  });\n  return NotificationsService;\n})();","map":null,"metadata":{},"sourceType":"module"}