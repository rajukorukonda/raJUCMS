{"ast":null,"code":"import { assign, cloneDeep, omit } from 'lodash-es';\nimport { chats as chatsData, contacts as contactsData, messages as messagesData, profile as profileData } from 'app/mock-api/apps/chat/data';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@fuse/lib/mock-api\";\nexport let ChatMockApi = /*#__PURE__*/(() => {\n  class ChatMockApi {\n    /**\r\n     * Constructor\r\n     */\n    constructor(_fuseMockApiService) {\n      this._fuseMockApiService = _fuseMockApiService;\n      this._chats = chatsData;\n      this._contacts = contactsData;\n      this._messages = messagesData;\n      this._profile = profileData;\n      // Register Mock API handlers\n      this.registerHandlers();\n      // Modify the chats array to attach certain data to it\n      this._chats = this._chats.map(chat => Object.assign(Object.assign({}, chat), {\n        // Get the actual contact object from the id and attach it to the chat\n        contact: this._contacts.find(contact => contact.id === chat.contactId),\n        // Since we use same set of messages on all chats, we assign them here.\n        messages: this._messages.map(message => Object.assign(Object.assign({}, message), {\n          chatId: chat.id,\n          contactId: message.contactId === 'me' ? this._profile.id : chat.contactId,\n          isMine: message.contactId === 'me'\n        }))\n      }));\n    }\n    // -----------------------------------------------------------------------------------------------------\n    // @ Public methods\n    // -----------------------------------------------------------------------------------------------------\n    /**\r\n     * Register Mock API handlers\r\n     */\n    registerHandlers() {\n      // -----------------------------------------------------------------------------------------------------\n      // @ Chats - GET\n      // -----------------------------------------------------------------------------------------------------\n      this._fuseMockApiService.onGet('api/apps/chat/chats').reply(() => {\n        // Clone the chats\n        const chats = cloneDeep(this._chats);\n        // Return the response\n        return [200, chats];\n      });\n      // -----------------------------------------------------------------------------------------------------\n      // @ Chat - GET\n      // -----------------------------------------------------------------------------------------------------\n      this._fuseMockApiService.onGet('api/apps/chat/chat').reply(({\n        request\n      }) => {\n        // Get the chat id\n        const id = request.params.get('id');\n        // Clone the chats\n        const chats = cloneDeep(this._chats);\n        // Find the chat we need\n        const chat = chats.find(item => item.id === id);\n        // Return the response\n        return [200, chat];\n      });\n      // -----------------------------------------------------------------------------------------------------\n      // @ Chat - PATCH\n      // -----------------------------------------------------------------------------------------------------\n      this._fuseMockApiService.onPatch('api/apps/chat/chat').reply(({\n        request\n      }) => {\n        // Get the id and chat\n        const id = request.body.id;\n        const chat = cloneDeep(request.body.chat);\n        // Prepare the updated chat\n        let updatedChat = null;\n        // Find the chat and update it\n        this._chats.forEach((item, index, chats) => {\n          if (item.id === id) {\n            // Update the chat\n            chats[index] = assign({}, chats[index], chat);\n            // Store the updated chat\n            updatedChat = chats[index];\n          }\n        });\n        // Return the response\n        return [200, updatedChat];\n      });\n      // -----------------------------------------------------------------------------------------------------\n      // @ Contacts - GET\n      // -----------------------------------------------------------------------------------------------------\n      this._fuseMockApiService.onGet('api/apps/chat/contacts').reply(() => {\n        // Clone the contacts\n        let contacts = cloneDeep(this._contacts);\n        // Sort the contacts by the name field by default\n        contacts.sort((a, b) => a.name.localeCompare(b.name));\n        // Omit details and attachments from contacts\n        contacts = contacts.map(contact => omit(contact, ['details', 'attachments']));\n        // Return the response\n        return [200, contacts];\n      });\n      // -----------------------------------------------------------------------------------------------------\n      // @ Contact Details - GET\n      // -----------------------------------------------------------------------------------------------------\n      this._fuseMockApiService.onGet('api/apps/chat/contact').reply(({\n        request\n      }) => {\n        // Get the contact id\n        const id = request.params.get('id');\n        // Clone the contacts\n        const contacts = cloneDeep(this._contacts);\n        // Find the contact\n        const contact = contacts.find(item => item.id === id);\n        // Return the response\n        return [200, contact];\n      });\n      // -----------------------------------------------------------------------------------------------------\n      // @ Profile - GET\n      // -----------------------------------------------------------------------------------------------------\n      this._fuseMockApiService.onGet('api/apps/chat/profile').reply(() => {\n        // Clone the profile\n        const profile = cloneDeep(this._profile);\n        // Return the response\n        return [200, profile];\n      });\n    }\n  }\n  ChatMockApi.ɵfac = function ChatMockApi_Factory(t) {\n    return new (t || ChatMockApi)(i0.ɵɵinject(i1.FuseMockApiService));\n  };\n  ChatMockApi.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ChatMockApi,\n    factory: ChatMockApi.ɵfac,\n    providedIn: 'root'\n  });\n  return ChatMockApi;\n})();","map":null,"metadata":{},"sourceType":"module"}