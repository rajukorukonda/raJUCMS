{"ast":null,"code":"import { BehaviorSubject, throwError } from 'rxjs';\nimport { catchError, tap } from 'rxjs/operators';\nimport { environment } from 'environments/environment';\nimport { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let UtilitiesService = /*#__PURE__*/(() => {\n  class UtilitiesService {\n    constructor(http) {\n      this.http = http;\n      this.headers = {\n        headers: new HttpHeaders({\n          'enctype': 'multipart/form-data',\n          'Accept': 'application/json'\n        })\n      };\n      this.messageSource = new BehaviorSubject(1);\n      this.currentMessage = this.messageSource.asObservable();\n      this.API_URL = environment.API_URL;\n    }\n    CRUD(data, url) {\n      // debugger\n      const headers = new HttpHeaders({\n        'Content-Type': 'application/json'\n      });\n      return this.http.post(this.API_URL + url, data, {\n        headers: headers\n      });\n    }\n    GetComplaintsXML(data) {\n      //  debugger\n      return this.http.post(this.API_URL + 'PatientsAppointments/GetComplaintsXML/', data).pipe(tap(status => console.log('status: ' + status)), catchError(this.handleError));\n    }\n    DocumentsDownload(fileUrl) {\n      debugger;\n      return this.http.get(this.API_URL + \"PatientsAppointments/DocumentsDownload?fileUrl=\" + fileUrl, {\n        reportProgress: true,\n        observe: 'events',\n        responseType: 'blob'\n      });\n    }\n    GetDocumentsXML(data) {\n      debugger;\n      return this.http.post(this.API_URL + 'PatientsAppointments/GetDocumentsXML/', data).pipe(tap(status => console.log('status: ' + status)), catchError(this.handleError));\n    }\n    GetMedicineXML(data) {\n      debugger;\n      return this.http.post(this.API_URL + 'PatientsAppointments/GetMedicineXML/', data).pipe(tap(status => console.log('status: ' + status)), catchError(this.handleError));\n    }\n    addDocs(data) {\n      debugger;\n      return this.http.post(this.API_URL + 'PatientsAppointments/AddDocs/', data).pipe(tap(status => console.log('status: ' + status)), catchError(this.handleError));\n    }\n    getStates() {\n      return this.http.get(this.API_URL + 'Utilities/AllGetStates').pipe(tap(status => console.log('status: ' + status)), catchError(this.handleError));\n    }\n    getState(stateID) {\n      return this.http.get(this.API_URL + 'Utilities/GetState' + stateID).pipe(tap(status => console.log('status: ' + status)), catchError(this.handleError));\n    }\n    getAllAppointmentBills() {\n      return this.http.get(this.API_URL + 'Utilities/GetAllAppointmentBills').pipe(tap(status => console.log('status: ' + status)), catchError(this.handleError));\n    }\n    getAppointmentBill(priceID) {\n      return this.http.get(this.API_URL + 'Utilities/GetAppointmentBill' + priceID).pipe(tap(status => console.log('status: ' + status)), catchError(this.handleError));\n    }\n    getServices() {\n      return this.http.get(this.API_URL + 'Utilities/GetServices').pipe(tap(status => console.log('status: ' + status)), catchError(this.handleError));\n    }\n    getService(serviceID) {\n      return this.http.get(this.API_URL + 'Utilities/GetService' + serviceID).pipe(tap(status => console.log('status: ' + status)), catchError(this.handleError));\n    }\n    getStatuses() {\n      return this.http.get(this.API_URL + 'Utilities/GetStatuses').pipe(tap(status => console.log('status: ' + status)), catchError(this.handleError));\n    }\n    getStatus(statusID) {\n      return this.http.get(this.API_URL + 'Utilities/GetStatus' + statusID).pipe(tap(status => console.log('status: ' + status)), catchError(this.handleError));\n    }\n    getAllGenders() {\n      return this.http.get(this.API_URL + 'Utilities/GetAllGenders').pipe(tap(status => console.log('status: ' + status)), catchError(this.handleError));\n    }\n    getGender(genderID) {\n      return this.http.get(this.API_URL + 'Utilities/GetGender' + genderID).pipe(tap(status => console.log('status: ' + status)), catchError(this.handleError));\n    }\n    getAllMOP() {\n      return this.http.get(this.API_URL + 'Utilities/GetAllMOP').pipe(tap(status => console.log('status: ' + status)), catchError(this.handleError));\n    }\n    getMOP(modeofPaymentID) {\n      return this.http.get(this.API_URL + 'Utilities/GetMOP' + modeofPaymentID).pipe(tap(status => console.log('status: ' + status)), catchError(this.handleError));\n    }\n    getAllRoles() {\n      return this.http.get(this.API_URL + 'Utilities/GetAllRoles').pipe(tap(status => console.log('status: ' + status)), catchError(this.handleError));\n    }\n    getRole(roleID) {\n      return this.http.get(this.API_URL + 'Utilities/GetRole' + roleID).pipe(tap(status => console.log('status: ' + status)), catchError(this.handleError));\n    }\n    getSlots() {\n      return this.http.get(this.API_URL + 'Utilities/GetSlots').pipe(tap(status => console.log('status: ' + status)), catchError(this.handleError));\n    }\n    getSlot(slotID) {\n      return this.http.get(this.API_URL + 'Utilities/GetSlot' + slotID).pipe(tap(status => console.log('status: ' + status)), catchError(this.handleError));\n    }\n    getSpecializations() {\n      return this.http.get(this.API_URL + 'Utilities/GetAllSpecializations').pipe(tap(status => console.log('status: ' + status)), catchError(this.handleError));\n    }\n    getSpecialization(specializationID) {\n      return this.http.get(this.API_URL + 'Utilities/GetSpecialization' + specializationID).pipe(tap(status => console.log('status: ' + status)), catchError(this.handleError));\n    }\n    getTypeofReports() {\n      return this.http.get(this.API_URL + 'Utilities/GetAllTypeofReports').pipe(tap(status => console.log('status: ' + status)), catchError(this.handleError));\n    }\n    getTypeofReport(typeofReportID) {\n      return this.http.get(this.API_URL + 'Utilities/GetTypeofReport' + typeofReportID).pipe(tap(status => console.log('status: ' + status)), catchError(this.handleError));\n    }\n    getDiscounts() {\n      return this.http.get(this.API_URL + 'Utilities/GetAllDiscounts').pipe(tap(status => console.log('status: ' + status)), catchError(this.handleError));\n    }\n    getDiscount(discountID) {\n      return this.http.get(this.API_URL + 'Utilities/GetDiscount' + discountID).pipe(tap(status => console.log('status: ' + status)), catchError(this.handleError));\n    }\n    getAllDoctors() {\n      return this.http.get(this.API_URL + 'Doctor/GetAllDoctors').pipe(tap(status => console.log('status: ' + status)), catchError(this.handleError));\n    }\n    getAllAppointments() {\n      return this.http.get(this.API_URL + 'PatientsAppointments/GetAllAppointments').pipe(tap(status => console.log('status: ' + status)), catchError(this.handleError));\n    }\n    deleteAppointment(patientsAppointments) {\n      debugger;\n      return this.http.post(this.API_URL + 'PatientsAppointments/DeleteAppointment/', patientsAppointments).pipe(tap(status => console.log('status: ' + status)), catchError(this.handleError));\n    }\n    addRegisterPatientAppointment(data) {\n      debugger;\n      if (data.Action == 'New Appointment') {\n        //Patient not exisiting condition\n        var url = 'Patients/AddRegisterPatientAppointment/';\n      } else if (data.Action == 'Update Existing Appointment' || data.Action == 'Patient Exists save new appointment') {\n        var url = 'PatientsAppointments/AddUpdateAppointment/';\n      } else {\n        var url = 'PatientsAppointments/AddUpdateAppointment/';\n      }\n      return this.http.post(this.API_URL + url, data).pipe(tap(status => console.log('status: ' + status)), catchError(this.handleError));\n    }\n    get(url, data) {\n      debugger;\n      return this.http.post(this.API_URL + url, data).pipe(tap(status => console.log('status: ' + status)), catchError(this.handleError));\n    }\n    addUpdateVitals(data, url) {\n      debugger;\n      return this.http.post(this.API_URL + url, data).pipe(tap(status => console.log('status: ' + status)), catchError(this.handleError));\n    }\n    handleError(error) {\n      console.error(error);\n      return throwError(error);\n    }\n  }\n  UtilitiesService.ɵfac = function UtilitiesService_Factory(t) {\n    return new (t || UtilitiesService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  UtilitiesService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: UtilitiesService,\n    factory: UtilitiesService.ɵfac\n  });\n  return UtilitiesService;\n})();","map":null,"metadata":{},"sourceType":"module"}