{"ast":null,"code":"import { DOCUMENT } from '@angular/common';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/material/button\";\nimport * as i2 from \"@angular/material/tooltip\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"@angular/material/icon\";\nfunction FuseFullscreenComponent_ng_template_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"mat-icon\", 3);\n  }\n  if (rf & 2) {\n    i0.ɵɵproperty(\"svgIcon\", \"heroicons_outline:arrows-expand\");\n  }\n}\nexport let FuseFullscreenComponent = /*#__PURE__*/(() => {\n  class FuseFullscreenComponent {\n    /**\r\n     * Constructor\r\n     */\n    constructor(_document) {\n      this._document = _document;\n      this._isFullscreen = false;\n      this._fsDoc = _document;\n    }\n    // -----------------------------------------------------------------------------------------------------\n    // @ Lifecycle hooks\n    // -----------------------------------------------------------------------------------------------------\n    /**\r\n     * On init\r\n     */\n    ngOnInit() {\n      this._fsDocEl = document.documentElement;\n    }\n    // -----------------------------------------------------------------------------------------------------\n    // @ Public methods\n    // -----------------------------------------------------------------------------------------------------\n    /**\r\n     * Toggle the fullscreen mode\r\n     */\n    toggleFullscreen() {\n      // Check if the fullscreen is open\n      this._isFullscreen = this._getBrowserFullscreenElement() !== null;\n      // Toggle the fullscreen\n      if (this._isFullscreen) {\n        this._closeFullscreen();\n      } else {\n        this._openFullscreen();\n      }\n    }\n    // -----------------------------------------------------------------------------------------------------\n    // @ Private methods\n    // -----------------------------------------------------------------------------------------------------\n    /**\r\n     * Get browser's fullscreen element\r\n     *\r\n     * @private\r\n     */\n    _getBrowserFullscreenElement() {\n      if (typeof this._fsDoc.fullscreenElement !== 'undefined') {\n        return this._fsDoc.fullscreenElement;\n      }\n      if (typeof this._fsDoc.mozFullScreenElement !== 'undefined') {\n        return this._fsDoc.mozFullScreenElement;\n      }\n      if (typeof this._fsDoc.msFullscreenElement !== 'undefined') {\n        return this._fsDoc.msFullscreenElement;\n      }\n      if (typeof this._fsDoc.webkitFullscreenElement !== 'undefined') {\n        return this._fsDoc.webkitFullscreenElement;\n      }\n      throw new Error('Fullscreen mode is not supported by this browser');\n    }\n    /**\r\n     * Open the fullscreen\r\n     *\r\n     * @private\r\n     */\n    _openFullscreen() {\n      if (this._fsDocEl.requestFullscreen) {\n        this._fsDocEl.requestFullscreen();\n        return;\n      }\n      // Firefox\n      if (this._fsDocEl.mozRequestFullScreen) {\n        this._fsDocEl.mozRequestFullScreen();\n        return;\n      }\n      // Chrome, Safari and Opera\n      if (this._fsDocEl.webkitRequestFullscreen) {\n        this._fsDocEl.webkitRequestFullscreen();\n        return;\n      }\n      // IE/Edge\n      if (this._fsDocEl.msRequestFullscreen) {\n        this._fsDocEl.msRequestFullscreen();\n        return;\n      }\n    }\n    /**\r\n     * Close the fullscreen\r\n     *\r\n     * @private\r\n     */\n    _closeFullscreen() {\n      if (this._fsDoc.exitFullscreen) {\n        this._fsDoc.exitFullscreen();\n        return;\n      }\n      // Firefox\n      if (this._fsDoc.mozCancelFullScreen) {\n        this._fsDoc.mozCancelFullScreen();\n        return;\n      }\n      // Chrome, Safari and Opera\n      if (this._fsDoc.webkitExitFullscreen) {\n        this._fsDoc.webkitExitFullscreen();\n        return;\n      }\n      // IE/Edge\n      else if (this._fsDoc.msExitFullscreen) {\n        this._fsDoc.msExitFullscreen();\n        return;\n      }\n    }\n  }\n  FuseFullscreenComponent.ɵfac = function FuseFullscreenComponent_Factory(t) {\n    return new (t || FuseFullscreenComponent)(i0.ɵɵdirectiveInject(DOCUMENT));\n  };\n  FuseFullscreenComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: FuseFullscreenComponent,\n    selectors: [[\"fuse-fullscreen\"]],\n    inputs: {\n      iconTpl: \"iconTpl\",\n      tooltip: \"tooltip\"\n    },\n    exportAs: [\"fuseFullscreen\"],\n    decls: 4,\n    vars: 2,\n    consts: [[\"mat-icon-button\", \"\", 3, \"matTooltip\", \"click\"], [3, \"ngTemplateOutlet\"], [\"defaultIconTpl\", \"\"], [3, \"svgIcon\"]],\n    template: function FuseFullscreenComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"button\", 0);\n        i0.ɵɵlistener(\"click\", function FuseFullscreenComponent_Template_button_click_0_listener() {\n          return ctx.toggleFullscreen();\n        });\n        i0.ɵɵelementContainer(1, 1);\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(2, FuseFullscreenComponent_ng_template_2_Template, 1, 1, \"ng-template\", null, 2, i0.ɵɵtemplateRefExtractor);\n      }\n      if (rf & 2) {\n        const _r0 = i0.ɵɵreference(3);\n        i0.ɵɵproperty(\"matTooltip\", ctx.tooltip || \"Toggle Fullscreen\");\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngTemplateOutlet\", ctx.iconTpl || _r0);\n      }\n    },\n    directives: [i1.MatButton, i2.MatTooltip, i3.NgTemplateOutlet, i4.MatIcon],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return FuseFullscreenComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}