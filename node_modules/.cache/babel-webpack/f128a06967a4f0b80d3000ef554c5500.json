{"ast":null,"code":"import { Observable, of, throwError } from 'rxjs';\nimport { take } from 'rxjs/operators';\nexport class FuseMockApiHandler {\n  /**\r\n   * Constructor\r\n   */\n  constructor(url, delay) {\n    this.url = url;\n    this.delay = delay;\n    // Private\n    this._reply = undefined;\n    this._replyCount = 0;\n    this._replied = 0;\n  }\n  // -----------------------------------------------------------------------------------------------------\n  // @ Accessors\n  // -----------------------------------------------------------------------------------------------------\n  /**\r\n   * Getter for response callback\r\n   */\n  get response() {\n    // If the execution limit has been reached, throw an error\n    if (this._replyCount > 0 && this._replyCount <= this._replied) {\n      return throwError('Execution limit has been reached!');\n    }\n    // If the response callback has not been set, throw an error\n    if (!this._reply) {\n      return throwError('Response callback function does not exist!');\n    }\n    // If the request has not been set, throw an error\n    if (!this.request) {\n      return throwError('Request does not exist!');\n    }\n    // Increase the replied count\n    this._replied++;\n    // Execute the reply callback\n    const replyResult = this._reply({\n      request: this.request,\n      urlParams: this.urlParams\n    });\n    // If the result of the reply callback is an observable...\n    if (replyResult instanceof Observable) {\n      // Return the result as it is\n      return replyResult.pipe(take(1));\n    }\n    // Otherwise, return the result as an observable\n    return of(replyResult).pipe(take(1));\n  }\n  // -----------------------------------------------------------------------------------------------------\n  // @ Public methods\n  // -----------------------------------------------------------------------------------------------------\n  /**\r\n   * Reply\r\n   *\r\n   * @param callback\r\n   */\n  reply(callback) {\n    // Store the reply\n    this._reply = callback;\n  }\n  /**\r\n   * Reply count\r\n   *\r\n   * @param count\r\n   */\n  replyCount(count) {\n    // Store the reply count\n    this._replyCount = count;\n  }\n}","map":null,"metadata":{},"sourceType":"module"}