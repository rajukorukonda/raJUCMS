{"ast":null,"code":"import { cloneDeep } from 'lodash-es';\nimport { faqCategories as faqCategoriesData, faqs as faqsData, guideCategories as guideCategoriesData, guideContent as guideContentData, guides as guidesData } from 'app/mock-api/apps/help-center/data';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@fuse/lib/mock-api\";\nexport let HelpCenterMockApi = /*#__PURE__*/(() => {\n  class HelpCenterMockApi {\n    /**\r\n     * Constructor\r\n     */\n    constructor(_fuseMockApiService) {\n      this._fuseMockApiService = _fuseMockApiService;\n      this._faqCategories = faqCategoriesData;\n      this._faqs = faqsData;\n      this._guideCategories = guideCategoriesData;\n      this._guides = guidesData;\n      this._guideContent = guideContentData;\n      // Register Mock API handlers\n      this.registerHandlers();\n    }\n    // -----------------------------------------------------------------------------------------------------\n    // @ Public methods\n    // -----------------------------------------------------------------------------------------------------\n    /**\r\n     * Register Mock API handlers\r\n     */\n    registerHandlers() {\n      // -----------------------------------------------------------------------------------------------------\n      // @ FAQs - GET\n      // -----------------------------------------------------------------------------------------------------\n      this._fuseMockApiService.onGet('api/apps/help-center/faqs').reply(({\n        request\n      }) => {\n        // Get the category slug\n        const slug = request.params.get('slug');\n        // Prepare the results\n        const results = [];\n        // Get FAQs\n        const faqs = cloneDeep(this._faqs);\n        // Get FAQ Categories\n        const categories = cloneDeep(this._faqCategories);\n        // If slug is not provided...\n        if (!slug) {\n          // Go through each category and set the results\n          categories.forEach(category => {\n            results.push(Object.assign(Object.assign({}, category), {\n              faqs: faqs.filter(faq => faq.categoryId === category.id)\n            }));\n          });\n        }\n        // Otherwise...\n        else {\n          // Find the category by the slug\n          const category = categories.find(item => item.slug === slug);\n          // Set the results\n          results.push(Object.assign(Object.assign({}, category), {\n            faqs: faqs.filter(faq => faq.categoryId === category.id)\n          }));\n        }\n        // Return the response\n        return [200, results];\n      });\n      // -----------------------------------------------------------------------------------------------------\n      // @ Guides - GET\n      // -----------------------------------------------------------------------------------------------------\n      this._fuseMockApiService.onGet('api/apps/help-center/guides').reply(({\n        request\n      }) => {\n        // Get the slug & limit\n        const slug = request.params.get('slug');\n        const limit = request.params.get('limit');\n        // Prepare the results\n        const results = [];\n        // Get all Guides\n        const guides = cloneDeep(this._guides);\n        // Get Guide categories\n        const categories = cloneDeep(this._guideCategories);\n        // If slug is not provided...\n        if (!slug) {\n          // Parse the limit as an integer\n          const limitNum = parseInt(limit !== null && limit !== void 0 ? limit : '5', 10);\n          // Go through each category and set the results\n          categories.forEach(category => {\n            results.push(Object.assign(Object.assign({}, category), {\n              visibleGuides: limitNum,\n              totalGuides: guides.filter(guide => guide.categoryId === category.id).length,\n              guides: guides.filter(guide => guide.categoryId === category.id).slice(0, limitNum)\n            }));\n          });\n        }\n        // Otherwise...\n        else {\n          // Find the category by the slug\n          const category = categories.find(item => item.slug === slug);\n          // Set the results\n          results.push(Object.assign(Object.assign({}, category), {\n            guides: guides.filter(guide => guide.categoryId === category.id)\n          }));\n        }\n        // Return the response\n        return [200, results];\n      });\n      // -----------------------------------------------------------------------------------------------------\n      // @ Guide - GET\n      // -----------------------------------------------------------------------------------------------------\n      this._fuseMockApiService.onGet('api/apps/help-center/guide').reply(({\n        request\n      }) => {\n        // Get the slugs\n        const categorySlug = request.params.get('categorySlug');\n        const guideSlug = request.params.get('guideSlug');\n        // Get all Guides and Guide Categories\n        const guides = cloneDeep(this._guides);\n        const categories = cloneDeep(this._guideCategories);\n        // Prepare the result\n        const result = Object.assign(Object.assign({}, categories.find(category => category.slug === categorySlug)), {\n          guides: [guides.find(guide => guide.slug === guideSlug)]\n        });\n        // Add the content to the guide\n        result.guides[0]['content'] = this._guideContent;\n        // Return the response\n        return [200, result];\n      });\n    }\n  }\n  HelpCenterMockApi.ɵfac = function HelpCenterMockApi_Factory(t) {\n    return new (t || HelpCenterMockApi)(i0.ɵɵinject(i1.FuseMockApiService));\n  };\n  HelpCenterMockApi.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: HelpCenterMockApi,\n    factory: HelpCenterMockApi.ɵfac,\n    providedIn: 'root'\n  });\n  return HelpCenterMockApi;\n})();","map":null,"metadata":{},"sourceType":"module"}