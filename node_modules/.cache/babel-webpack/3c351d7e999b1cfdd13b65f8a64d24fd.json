{"ast":null,"code":"import { take } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@fuse/components/navigation\";\nimport * as i2 from \"@ngneat/transloco\";\nimport * as i3 from \"@angular/material/button\";\nimport * as i4 from \"@angular/material/menu\";\nimport * as i5 from \"@angular/common\";\nfunction LanguagesComponent_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nfunction LanguagesComponent_ng_container_4_ng_container_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nconst _c0 = function (a0) {\n  return {\n    $implicit: a0\n  };\n};\nfunction LanguagesComponent_ng_container_4_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r8 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"button\", 6);\n    i0.ɵɵlistener(\"click\", function LanguagesComponent_ng_container_4_Template_button_click_1_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r8);\n      const lang_r5 = restoredCtx.$implicit;\n      const ctx_r7 = i0.ɵɵnextContext();\n      return ctx_r7.setActiveLang(lang_r5.id);\n    });\n    i0.ɵɵelementStart(2, \"span\", 7);\n    i0.ɵɵtemplate(3, LanguagesComponent_ng_container_4_ng_container_3_Template, 1, 0, \"ng-container\", 1);\n    i0.ɵɵelementStart(4, \"span\", 8);\n    i0.ɵɵtext(5);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const lang_r5 = ctx.$implicit;\n    i0.ɵɵnextContext();\n    const _r3 = i0.ɵɵreference(6);\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", _r3)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction1(3, _c0, lang_r5.id));\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(lang_r5.label);\n  }\n}\nfunction LanguagesComponent_ng_template_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 9);\n    i0.ɵɵelement(1, \"span\", 10);\n    i0.ɵɵelement(2, \"img\", 11);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const lang_r9 = ctx.$implicit;\n    const ctx_r4 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"src\", \"assets/images/flags/\" + ctx_r4.flagCodes[lang_r9].toUpperCase() + \".svg\", i0.ɵɵsanitizeUrl)(\"alt\", \"Flag image for \" + lang_r9);\n  }\n}\nexport let LanguagesComponent = /*#__PURE__*/(() => {\n  class LanguagesComponent {\n    /**\r\n     * Constructor\r\n     */\n    constructor(_changeDetectorRef, _fuseNavigationService, _translocoService) {\n      this._changeDetectorRef = _changeDetectorRef;\n      this._fuseNavigationService = _fuseNavigationService;\n      this._translocoService = _translocoService;\n    }\n    // -----------------------------------------------------------------------------------------------------\n    // @ Lifecycle hooks\n    // -----------------------------------------------------------------------------------------------------\n    /**\r\n     * On init\r\n     */\n    ngOnInit() {\n      // Get the available languages from transloco\n      this.availableLangs = this._translocoService.getAvailableLangs();\n      // Subscribe to language changes\n      this._translocoService.langChanges$.subscribe(activeLang => {\n        // Get the active lang\n        this.activeLang = activeLang;\n        // Update the navigation\n        this._updateNavigation(activeLang);\n      });\n      // Set the country iso codes for languages for flags\n      this.flagCodes = {\n        'en': 'us',\n        'tr': 'tr'\n      };\n    }\n    /**\r\n     * On destroy\r\n     */\n    ngOnDestroy() {}\n    // -----------------------------------------------------------------------------------------------------\n    // @ Public methods\n    // -----------------------------------------------------------------------------------------------------\n    /**\r\n     * Set the active lang\r\n     *\r\n     * @param lang\r\n     */\n    setActiveLang(lang) {\n      // Set the active lang\n      this._translocoService.setActiveLang(lang);\n    }\n    /**\r\n     * Track by function for ngFor loops\r\n     *\r\n     * @param index\r\n     * @param item\r\n     */\n    trackByFn(index, item) {\n      return item.id || index;\n    }\n    // -----------------------------------------------------------------------------------------------------\n    // @ Private methods\n    // -----------------------------------------------------------------------------------------------------\n    /**\r\n     * Update the navigation\r\n     *\r\n     * @param lang\r\n     * @private\r\n     */\n    _updateNavigation(lang) {\n      // For the demonstration purposes, we will only update the Dashboard names\n      // from the navigation but you can do a full swap and change the entire\n      // navigation data.\n      //\n      // You can import the data from a file or request it from your backend,\n      // it's up to you.\n      // Get the component -> navigation data -> item\n      const navComponent = this._fuseNavigationService.getComponent('mainNavigation');\n      // Return if the navigation component does not exist\n      if (!navComponent) {\n        return null;\n      }\n      // Get the flat navigation data\n      const navigation = navComponent.navigation;\n      // Get the Project dashboard item and update its title\n      const projectDashboardItem = this._fuseNavigationService.getItem('dashboards.project', navigation);\n      if (projectDashboardItem) {\n        this._translocoService.selectTranslate('Project').pipe(take(1)).subscribe(translation => {\n          // Set the title\n          projectDashboardItem.title = translation;\n          // Refresh the navigation component\n          navComponent.refresh();\n        });\n      }\n      // Get the Analytics dashboard item and update its title\n      const analyticsDashboardItem = this._fuseNavigationService.getItem('dashboards.analytics', navigation);\n      if (analyticsDashboardItem) {\n        this._translocoService.selectTranslate('Analytics').pipe(take(1)).subscribe(translation => {\n          // Set the title\n          analyticsDashboardItem.title = translation;\n          // Refresh the navigation component\n          navComponent.refresh();\n        });\n      }\n    }\n  }\n  LanguagesComponent.ɵfac = function LanguagesComponent_Factory(t) {\n    return new (t || LanguagesComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i1.FuseNavigationService), i0.ɵɵdirectiveInject(i2.TranslocoService));\n  };\n  LanguagesComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: LanguagesComponent,\n    selectors: [[\"languages\"]],\n    exportAs: [\"languages\"],\n    decls: 7,\n    vars: 8,\n    consts: [[\"mat-icon-button\", \"\", 3, \"matMenuTriggerFor\"], [4, \"ngTemplateOutlet\", \"ngTemplateOutletContext\"], [3, \"xPosition\"], [\"languages\", \"matMenu\"], [4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [\"flagImage\", \"\"], [\"mat-menu-item\", \"\", 3, \"click\"], [1, \"flex\", \"items-center\"], [1, \"ml-3\"], [1, \"relative\", \"w-6\", \"shadow\", \"rounded-sm\", \"overflow-hidden\"], [1, \"absolute\", \"inset-0\", \"ring-1\", \"ring-inset\", \"ring-black\", \"ring-opacity-10\"], [1, \"w-full\", 3, \"src\", \"alt\"]],\n    template: function LanguagesComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"button\", 0);\n        i0.ɵɵtemplate(1, LanguagesComponent_ng_container_1_Template, 1, 0, \"ng-container\", 1);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(2, \"mat-menu\", 2, 3);\n        i0.ɵɵtemplate(4, LanguagesComponent_ng_container_4_Template, 6, 5, \"ng-container\", 4);\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(5, LanguagesComponent_ng_template_5_Template, 3, 2, \"ng-template\", null, 5, i0.ɵɵtemplateRefExtractor);\n      }\n      if (rf & 2) {\n        const _r1 = i0.ɵɵreference(3);\n        const _r3 = i0.ɵɵreference(6);\n        i0.ɵɵproperty(\"matMenuTriggerFor\", _r1);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngTemplateOutlet\", _r3)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction1(6, _c0, ctx.activeLang));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"xPosition\", \"before\");\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngForOf\", ctx.availableLangs)(\"ngForTrackBy\", ctx.trackByFn);\n      }\n    },\n    directives: [i3.MatButton, i4.MatMenuTrigger, i5.NgTemplateOutlet, i4.MatMenu, i5.NgForOf, i4.MatMenuItem],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return LanguagesComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}