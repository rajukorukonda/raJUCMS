{"ast":null,"code":"import { assign, cloneDeep } from 'lodash-es';\nimport { FuseMockApiUtils } from '@fuse/lib/mock-api';\nimport { brands as brandsData, categories as categoriesData, products as productsData, tags as tagsData, vendors as vendorsData } from 'app/mock-api/apps/ecommerce/inventory/data';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@fuse/lib/mock-api\";\nexport let ECommerceInventoryMockApi = /*#__PURE__*/(() => {\n  class ECommerceInventoryMockApi {\n    /**\r\n     * Constructor\r\n     */\n    constructor(_fuseMockApiService) {\n      this._fuseMockApiService = _fuseMockApiService;\n      this._categories = categoriesData;\n      this._brands = brandsData;\n      this._products = productsData;\n      this._tags = tagsData;\n      this._vendors = vendorsData;\n      // Register Mock API handlers\n      this.registerHandlers();\n    }\n    // -----------------------------------------------------------------------------------------------------\n    // @ Public methods\n    // -----------------------------------------------------------------------------------------------------\n    /**\r\n     * Register Mock API handlers\r\n     */\n    registerHandlers() {\n      // -----------------------------------------------------------------------------------------------------\n      // @ Categories - GET\n      // -----------------------------------------------------------------------------------------------------\n      this._fuseMockApiService.onGet('api/apps/ecommerce/inventory/categories').reply(() => [200, cloneDeep(this._categories)]);\n      // -----------------------------------------------------------------------------------------------------\n      // @ Brands - GET\n      // -----------------------------------------------------------------------------------------------------\n      this._fuseMockApiService.onGet('api/apps/ecommerce/inventory/brands').reply(() => [200, cloneDeep(this._brands)]);\n      // -----------------------------------------------------------------------------------------------------\n      // @ Products - GET\n      // -----------------------------------------------------------------------------------------------------\n      this._fuseMockApiService.onGet('api/apps/ecommerce/inventory/products', 300).reply(({\n        request\n      }) => {\n        var _a, _b;\n        // Get available queries\n        const search = request.params.get('search');\n        const sort = request.params.get('sort') || 'name';\n        const order = request.params.get('order') || 'asc';\n        const page = parseInt((_a = request.params.get('page')) !== null && _a !== void 0 ? _a : '1', 10);\n        const size = parseInt((_b = request.params.get('size')) !== null && _b !== void 0 ? _b : '10', 10);\n        // Clone the products\n        let products = cloneDeep(this._products);\n        // Sort the products\n        if (sort === 'sku' || sort === 'name' || sort === 'active') {\n          products.sort((a, b) => {\n            const fieldA = a[sort].toString().toUpperCase();\n            const fieldB = b[sort].toString().toUpperCase();\n            return order === 'asc' ? fieldA.localeCompare(fieldB) : fieldB.localeCompare(fieldA);\n          });\n        } else {\n          products.sort((a, b) => order === 'asc' ? a[sort] - b[sort] : b[sort] - a[sort]);\n        }\n        // If search exists...\n        if (search) {\n          // Filter the products\n          products = products.filter(contact => contact.name && contact.name.toLowerCase().includes(search.toLowerCase()));\n        }\n        // Paginate - Start\n        const productsLength = products.length;\n        // Calculate pagination details\n        const begin = page * size;\n        const end = Math.min(size * (page + 1), productsLength);\n        const lastPage = Math.max(Math.ceil(productsLength / size), 1);\n        // Prepare the pagination object\n        let pagination = {};\n        // If the requested page number is bigger than\n        // the last possible page number, return null for\n        // products but also send the last possible page so\n        // the app can navigate to there\n        if (page > lastPage) {\n          products = null;\n          pagination = {\n            lastPage\n          };\n        } else {\n          // Paginate the results by size\n          products = products.slice(begin, end);\n          // Prepare the pagination mock-api\n          pagination = {\n            length: productsLength,\n            size: size,\n            page: page,\n            lastPage: lastPage,\n            startIndex: begin,\n            endIndex: end - 1\n          };\n        }\n        // Return the response\n        return [200, {\n          products,\n          pagination\n        }];\n      });\n      // -----------------------------------------------------------------------------------------------------\n      // @ Product - GET\n      // -----------------------------------------------------------------------------------------------------\n      this._fuseMockApiService.onGet('api/apps/ecommerce/inventory/product').reply(({\n        request\n      }) => {\n        // Get the id from the params\n        const id = request.params.get('id');\n        // Clone the products\n        const products = cloneDeep(this._products);\n        // Find the product\n        const product = products.find(item => item.id === id);\n        // Return the response\n        return [200, product];\n      });\n      // -----------------------------------------------------------------------------------------------------\n      // @ Product - POST\n      // -----------------------------------------------------------------------------------------------------\n      this._fuseMockApiService.onPost('api/apps/ecommerce/inventory/product').reply(() => {\n        // Generate a new product\n        const newProduct = {\n          id: FuseMockApiUtils.guid(),\n          category: '',\n          name: 'A New Product',\n          description: '',\n          tags: [],\n          sku: '',\n          barcode: '',\n          brand: '',\n          vendor: '',\n          stock: '',\n          reserved: '',\n          cost: '',\n          basePrice: '',\n          taxPercent: '',\n          price: '',\n          weight: '',\n          thumbnail: '',\n          images: [],\n          active: false\n        };\n        // Unshift the new product\n        this._products.unshift(newProduct);\n        // Return the response\n        return [200, newProduct];\n      });\n      // -----------------------------------------------------------------------------------------------------\n      // @ Product - PATCH\n      // -----------------------------------------------------------------------------------------------------\n      this._fuseMockApiService.onPatch('api/apps/ecommerce/inventory/product').reply(({\n        request\n      }) => {\n        // Get the id and product\n        const id = request.body.id;\n        const product = cloneDeep(request.body.product);\n        // Prepare the updated product\n        let updatedProduct = null;\n        // Find the product and update it\n        this._products.forEach((item, index, products) => {\n          if (item.id === id) {\n            // Update the product\n            products[index] = assign({}, products[index], product);\n            // Store the updated product\n            updatedProduct = products[index];\n          }\n        });\n        // Return the response\n        return [200, updatedProduct];\n      });\n      // -----------------------------------------------------------------------------------------------------\n      // @ Product - DELETE\n      // -----------------------------------------------------------------------------------------------------\n      this._fuseMockApiService.onDelete('api/apps/ecommerce/inventory/product').reply(({\n        request\n      }) => {\n        // Get the id\n        const id = request.params.get('id');\n        // Find the product and delete it\n        this._products.forEach((item, index) => {\n          if (item.id === id) {\n            this._products.splice(index, 1);\n          }\n        });\n        // Return the response\n        return [200, true];\n      });\n      // -----------------------------------------------------------------------------------------------------\n      // @ Tags - GET\n      // -----------------------------------------------------------------------------------------------------\n      this._fuseMockApiService.onGet('api/apps/ecommerce/inventory/tags').reply(() => [200, cloneDeep(this._tags)]);\n      // -----------------------------------------------------------------------------------------------------\n      // @ Tags - POST\n      // -----------------------------------------------------------------------------------------------------\n      this._fuseMockApiService.onPost('api/apps/ecommerce/inventory/tag').reply(({\n        request\n      }) => {\n        // Get the tag\n        const newTag = cloneDeep(request.body.tag);\n        // Generate a new GUID\n        newTag.id = FuseMockApiUtils.guid();\n        // Unshift the new tag\n        this._tags.unshift(newTag);\n        // Return the response\n        return [200, newTag];\n      });\n      // -----------------------------------------------------------------------------------------------------\n      // @ Tags - PATCH\n      // -----------------------------------------------------------------------------------------------------\n      this._fuseMockApiService.onPatch('api/apps/ecommerce/inventory/tag').reply(({\n        request\n      }) => {\n        // Get the id and tag\n        const id = request.body.id;\n        const tag = cloneDeep(request.body.tag);\n        // Prepare the updated tag\n        let updatedTag = null;\n        // Find the tag and update it\n        this._tags.forEach((item, index, tags) => {\n          if (item.id === id) {\n            // Update the tag\n            tags[index] = assign({}, tags[index], tag);\n            // Store the updated tag\n            updatedTag = tags[index];\n          }\n        });\n        // Return the response\n        return [200, updatedTag];\n      });\n      // -----------------------------------------------------------------------------------------------------\n      // @ Tag - DELETE\n      // -----------------------------------------------------------------------------------------------------\n      this._fuseMockApiService.onDelete('api/apps/ecommerce/inventory/tag').reply(({\n        request\n      }) => {\n        // Get the id\n        const id = request.params.get('id');\n        // Find the tag and delete it\n        this._tags.forEach((item, index) => {\n          if (item.id === id) {\n            this._tags.splice(index, 1);\n          }\n        });\n        // Get the products that have the tag\n        const productsWithTag = this._products.filter(product => product.tags.indexOf(id) > -1);\n        // Iterate through them and delete the tag\n        productsWithTag.forEach(product => {\n          product.tags.splice(product.tags.indexOf(id), 1);\n        });\n        // Return the response\n        return [200, true];\n      });\n      // -----------------------------------------------------------------------------------------------------\n      // @ Vendors - GET\n      // -----------------------------------------------------------------------------------------------------\n      this._fuseMockApiService.onGet('api/apps/ecommerce/inventory/vendors').reply(() => [200, cloneDeep(this._vendors)]);\n    }\n  }\n  ECommerceInventoryMockApi.ɵfac = function ECommerceInventoryMockApi_Factory(t) {\n    return new (t || ECommerceInventoryMockApi)(i0.ɵɵinject(i1.FuseMockApiService));\n  };\n  ECommerceInventoryMockApi.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ECommerceInventoryMockApi,\n    factory: ECommerceInventoryMockApi.ɵfac,\n    providedIn: 'root'\n  });\n  return ECommerceInventoryMockApi;\n})();","map":null,"metadata":{},"sourceType":"module"}