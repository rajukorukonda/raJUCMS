{"ast":null,"code":"import { ReplaySubject } from 'rxjs';\nimport { map, switchMap, take, tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let ShortcutsService = /*#__PURE__*/(() => {\n  class ShortcutsService {\n    /**\r\n     * Constructor\r\n     */\n    constructor(_httpClient) {\n      this._httpClient = _httpClient;\n      this._shortcuts = new ReplaySubject(1);\n    }\n    // -----------------------------------------------------------------------------------------------------\n    // @ Accessors\n    // -----------------------------------------------------------------------------------------------------\n    /**\r\n     * Getter for shortcuts\r\n     */\n    get shortcuts$() {\n      return this._shortcuts.asObservable();\n    }\n    // -----------------------------------------------------------------------------------------------------\n    // @ Public methods\n    // -----------------------------------------------------------------------------------------------------\n    /**\r\n     * Get all messages\r\n     */\n    getAll() {\n      return this._httpClient.get('api/common/shortcuts').pipe(tap(shortcuts => {\n        this._shortcuts.next(shortcuts);\n      }));\n    }\n    /**\r\n     * Create a shortcut\r\n     *\r\n     * @param shortcut\r\n     */\n    create(shortcut) {\n      return this.shortcuts$.pipe(take(1), switchMap(shortcuts => this._httpClient.post('api/common/shortcuts', {\n        shortcut\n      }).pipe(map(newShortcut => {\n        // Update the shortcuts with the new shortcut\n        this._shortcuts.next([...shortcuts, newShortcut]);\n        // Return the new shortcut from observable\n        return newShortcut;\n      }))));\n    }\n    /**\r\n     * Update the shortcut\r\n     *\r\n     * @param id\r\n     * @param shortcut\r\n     */\n    update(id, shortcut) {\n      return this.shortcuts$.pipe(take(1), switchMap(shortcuts => this._httpClient.patch('api/common/shortcuts', {\n        id,\n        shortcut\n      }).pipe(map(updatedShortcut => {\n        // Find the index of the updated shortcut\n        const index = shortcuts.findIndex(item => item.id === id);\n        // Update the shortcut\n        shortcuts[index] = updatedShortcut;\n        // Update the shortcuts\n        this._shortcuts.next(shortcuts);\n        // Return the updated shortcut\n        return updatedShortcut;\n      }))));\n    }\n    /**\r\n     * Delete the shortcut\r\n     *\r\n     * @param id\r\n     */\n    delete(id) {\n      return this.shortcuts$.pipe(take(1), switchMap(shortcuts => this._httpClient.delete('api/common/shortcuts', {\n        params: {\n          id\n        }\n      }).pipe(map(isDeleted => {\n        // Find the index of the deleted shortcut\n        const index = shortcuts.findIndex(item => item.id === id);\n        // Delete the shortcut\n        shortcuts.splice(index, 1);\n        // Update the shortcuts\n        this._shortcuts.next(shortcuts);\n        // Return the deleted status\n        return isDeleted;\n      }))));\n    }\n  }\n  ShortcutsService.ɵfac = function ShortcutsService_Factory(t) {\n    return new (t || ShortcutsService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  ShortcutsService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ShortcutsService,\n    factory: ShortcutsService.ɵfac,\n    providedIn: 'root'\n  });\n  return ShortcutsService;\n})();","map":null,"metadata":{},"sourceType":"module"}