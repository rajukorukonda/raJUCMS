{"ast":null,"code":"import { cloneDeep } from 'lodash-es';\nimport { items as itemsData } from 'app/mock-api/apps/file-manager/data';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@fuse/lib/mock-api/mock-api.service\";\nexport let FileManagerMockApi = /*#__PURE__*/(() => {\n  class FileManagerMockApi {\n    /**\r\n     * Constructor\r\n     */\n    constructor(_fuseMockApiService) {\n      this._fuseMockApiService = _fuseMockApiService;\n      this._items = itemsData;\n      // Register Mock API handlers\n      this.registerHandlers();\n    }\n    // -----------------------------------------------------------------------------------------------------\n    // @ Public methods\n    // -----------------------------------------------------------------------------------------------------\n    /**\r\n     * Register Mock API handlers\r\n     */\n    registerHandlers() {\n      // -----------------------------------------------------------------------------------------------------\n      // @ Items - GET\n      // -----------------------------------------------------------------------------------------------------\n      this._fuseMockApiService.onGet('api/apps/file-manager').reply(({\n        request\n      }) => {\n        var _a;\n        // Clone the items\n        let items = cloneDeep(this._items);\n        // See if a folder id exist\n        const folderId = (_a = request.params.get('folderId')) !== null && _a !== void 0 ? _a : null;\n        // Filter the items by folder id. If folder id is null,\n        // that means we want to root items which have folder id\n        // of null\n        items = items.filter(item => item.folderId === folderId);\n        // Separate the items by folders and files\n        const folders = items.filter(item => item.type === 'folder');\n        const files = items.filter(item => item.type !== 'folder');\n        // Sort the folders and files alphabetically by filename\n        folders.sort((a, b) => a.name.localeCompare(b.name));\n        files.sort((a, b) => a.name.localeCompare(b.name));\n        // Figure out the path and attach it to the response\n        // Prepare the empty paths array\n        const pathItems = cloneDeep(this._items);\n        const path = [];\n        // Prepare the current folder\n        let currentFolder = null;\n        // Get the current folder and add it as the first entry\n        if (folderId) {\n          currentFolder = pathItems.find(item => item.id === folderId);\n          path.push(currentFolder);\n        }\n        // Start traversing and storing the folders as a path array\n        // until we hit null on the folder id\n        while (currentFolder === null || currentFolder === void 0 ? void 0 : currentFolder.folderId) {\n          currentFolder = pathItems.find(item => item.id === currentFolder.folderId);\n          if (currentFolder) {\n            path.unshift(currentFolder);\n          }\n        }\n        return [200, {\n          folders,\n          files,\n          path\n        }];\n      });\n    }\n  }\n  FileManagerMockApi.ɵfac = function FileManagerMockApi_Factory(t) {\n    return new (t || FileManagerMockApi)(i0.ɵɵinject(i1.FuseMockApiService));\n  };\n  FileManagerMockApi.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: FileManagerMockApi,\n    factory: FileManagerMockApi.ɵfac,\n    providedIn: 'root'\n  });\n  return FileManagerMockApi;\n})();","map":null,"metadata":{},"sourceType":"module"}