{"ast":null,"code":"import { ReplaySubject } from 'rxjs';\nimport { map, switchMap, take, tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let MessagesService = /*#__PURE__*/(() => {\n  class MessagesService {\n    /**\r\n     * Constructor\r\n     */\n    constructor(_httpClient) {\n      this._httpClient = _httpClient;\n      this._messages = new ReplaySubject(1);\n    }\n    // -----------------------------------------------------------------------------------------------------\n    // @ Accessors\n    // -----------------------------------------------------------------------------------------------------\n    /**\r\n     * Getter for messages\r\n     */\n    get messages$() {\n      return this._messages.asObservable();\n    }\n    // -----------------------------------------------------------------------------------------------------\n    // @ Public methods\n    // -----------------------------------------------------------------------------------------------------\n    /**\r\n     * Get all messages\r\n     */\n    getAll() {\n      return this._httpClient.get('api/common/messages').pipe(tap(messages => {\n        this._messages.next(messages);\n      }));\n    }\n    /**\r\n     * Create a message\r\n     *\r\n     * @param message\r\n     */\n    create(message) {\n      return this.messages$.pipe(take(1), switchMap(messages => this._httpClient.post('api/common/messages', {\n        message\n      }).pipe(map(newMessage => {\n        // Update the messages with the new message\n        this._messages.next([...messages, newMessage]);\n        // Return the new message from observable\n        return newMessage;\n      }))));\n    }\n    /**\r\n     * Update the message\r\n     *\r\n     * @param id\r\n     * @param message\r\n     */\n    update(id, message) {\n      return this.messages$.pipe(take(1), switchMap(messages => this._httpClient.patch('api/common/messages', {\n        id,\n        message\n      }).pipe(map(updatedMessage => {\n        // Find the index of the updated message\n        const index = messages.findIndex(item => item.id === id);\n        // Update the message\n        messages[index] = updatedMessage;\n        // Update the messages\n        this._messages.next(messages);\n        // Return the updated message\n        return updatedMessage;\n      }))));\n    }\n    /**\r\n     * Delete the message\r\n     *\r\n     * @param id\r\n     */\n    delete(id) {\n      return this.messages$.pipe(take(1), switchMap(messages => this._httpClient.delete('api/common/messages', {\n        params: {\n          id\n        }\n      }).pipe(map(isDeleted => {\n        // Find the index of the deleted message\n        const index = messages.findIndex(item => item.id === id);\n        // Delete the message\n        messages.splice(index, 1);\n        // Update the messages\n        this._messages.next(messages);\n        // Return the deleted status\n        return isDeleted;\n      }))));\n    }\n    /**\r\n     * Mark all messages as read\r\n     */\n    markAllAsRead() {\n      return this.messages$.pipe(take(1), switchMap(messages => this._httpClient.get('api/common/messages/mark-all-as-read').pipe(map(isUpdated => {\n        // Go through all messages and set them as read\n        messages.forEach((message, index) => {\n          messages[index].read = true;\n        });\n        // Update the messages\n        this._messages.next(messages);\n        // Return the updated status\n        return isUpdated;\n      }))));\n    }\n  }\n  MessagesService.ɵfac = function MessagesService_Factory(t) {\n    return new (t || MessagesService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  MessagesService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: MessagesService,\n    factory: MessagesService.ɵfac,\n    providedIn: 'root'\n  });\n  return MessagesService;\n})();","map":null,"metadata":{},"sourceType":"module"}