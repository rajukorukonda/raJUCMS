{"ast":null,"code":"import { compact, fromPairs } from 'lodash-es';\nimport { FuseMockApiHandler } from '@fuse/lib/mock-api/mock-api.request-handler';\nimport * as i0 from \"@angular/core\";\nexport let FuseMockApiService = /*#__PURE__*/(() => {\n  class FuseMockApiService {\n    /**\r\n     * Constructor\r\n     */\n    constructor() {\n      this._handlers = {\n        'delete': new Map(),\n        'get': new Map(),\n        'patch': new Map(),\n        'post': new Map(),\n        'put': new Map()\n      };\n    }\n    // -----------------------------------------------------------------------------------------------------\n    // @ Public methods\n    // -----------------------------------------------------------------------------------------------------\n    /**\r\n     * Find the handler from the service\r\n     * with the given method and url\r\n     *\r\n     * @param method\r\n     * @param url\r\n     */\n    findHandler(method, url) {\n      // Prepare the return object\n      const matchingHandler = {\n        handler: undefined,\n        urlParams: {}\n      };\n      // Split the url\n      const urlParts = url.split('/');\n      // Get all related request handlers\n      const handlers = this._handlers[method.toLowerCase()];\n      // Iterate through the handlers\n      handlers.forEach((handler, handlerUrl) => {\n        // Skip if there is already a matching handler\n        if (matchingHandler.handler) {\n          return;\n        }\n        // Split the handler url\n        const handlerUrlParts = handlerUrl.split('/');\n        // Skip if the lengths of the urls we are comparing are not the same\n        if (urlParts.length !== handlerUrlParts.length) {\n          return;\n        }\n        // Compare\n        const matches = handlerUrlParts.every((handlerUrlPart, index) => handlerUrlPart === urlParts[index] || handlerUrlPart.startsWith(':'));\n        // If there is a match...\n        if (matches) {\n          // Assign the matching handler\n          matchingHandler.handler = handler;\n          // Extract and assign the parameters\n          matchingHandler.urlParams = fromPairs(compact(handlerUrlParts.map((handlerUrlPart, index) => handlerUrlPart.startsWith(':') ? [handlerUrlPart.substring(1), urlParts[index]] : undefined)));\n        }\n      });\n      return matchingHandler;\n    }\n    /**\r\n     * Register a DELETE request handler\r\n     *\r\n     * @param url - URL address of the mocked API endpoint\r\n     * @param delay - Delay of the response in milliseconds\r\n     */\n    onDelete(url, delay) {\n      return this._registerHandler('delete', url, delay);\n    }\n    /**\r\n     * Register a GET request handler\r\n     *\r\n     * @param url - URL address of the mocked API endpoint\r\n     * @param delay - Delay of the response in milliseconds\r\n     */\n    onGet(url, delay) {\n      return this._registerHandler('get', url, delay);\n    }\n    /**\r\n     * Register a PATCH request handler\r\n     *\r\n     * @param url - URL address of the mocked API endpoint\r\n     * @param delay - Delay of the response in milliseconds\r\n     */\n    onPatch(url, delay) {\n      return this._registerHandler('patch', url, delay);\n    }\n    /**\r\n     * Register a POST request handler\r\n     *\r\n     * @param url - URL address of the mocked API endpoint\r\n     * @param delay - Delay of the response in milliseconds\r\n     */\n    onPost(url, delay) {\n      return this._registerHandler('post', url, delay);\n    }\n    /**\r\n     * Register a PUT request handler\r\n     *\r\n     * @param url - URL address of the mocked API endpoint\r\n     * @param delay - Delay of the response in milliseconds\r\n     */\n    onPut(url, delay) {\n      return this._registerHandler('put', url, delay);\n    }\n    // -----------------------------------------------------------------------------------------------------\n    // @ Private methods\n    // -----------------------------------------------------------------------------------------------------\n    /**\r\n     * Register and return a new instance of the handler\r\n     *\r\n     * @param method\r\n     * @param url\r\n     * @param delay\r\n     * @private\r\n     */\n    _registerHandler(method, url, delay) {\n      // Create a new instance of FuseMockApiRequestHandler\n      const fuseMockHttp = new FuseMockApiHandler(url, delay);\n      // Store the handler to access it from the interceptor\n      this._handlers[method].set(url, fuseMockHttp);\n      // Return the instance\n      return fuseMockHttp;\n    }\n  }\n  FuseMockApiService.ɵfac = function FuseMockApiService_Factory(t) {\n    return new (t || FuseMockApiService)();\n  };\n  FuseMockApiService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: FuseMockApiService,\n    factory: FuseMockApiService.ɵfac,\n    providedIn: 'root'\n  });\n  return FuseMockApiService;\n})();","map":null,"metadata":{},"sourceType":"module"}