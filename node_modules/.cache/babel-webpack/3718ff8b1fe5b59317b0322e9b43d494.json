{"ast":null,"code":"import { __extends } from \"tslib\";\nimport IterResult from './iterresult';\n/**\n * IterResult subclass that calls a callback function on each add,\n * and stops iterating when the callback returns false.\n */\nvar CallbackIterResult = /** @class */function (_super) {\n  __extends(CallbackIterResult, _super);\n  function CallbackIterResult(method, args, iterator) {\n    var _this = _super.call(this, method, args) || this;\n    _this.iterator = iterator;\n    return _this;\n  }\n  CallbackIterResult.prototype.add = function (date) {\n    if (this.iterator(date, this._result.length)) {\n      this._result.push(date);\n      return true;\n    }\n    return false;\n  };\n  return CallbackIterResult;\n}(IterResult);\nexport default CallbackIterResult;\n//# sourceMappingURL=callbackiterresult.js.map","map":null,"metadata":{},"sourceType":"module"}