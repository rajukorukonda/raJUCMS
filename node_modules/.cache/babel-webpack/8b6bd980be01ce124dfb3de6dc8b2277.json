{"ast":null,"code":"import { assign, cloneDeep } from 'lodash-es';\nimport { FuseMockApiUtils } from '@fuse/lib/mock-api/mock-api.utils';\nimport { tags as tagsData, tasks as tasksData } from 'app/mock-api/apps/tasks/data';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@fuse/lib/mock-api/mock-api.service\";\nexport let TasksMockApi = /*#__PURE__*/(() => {\n  class TasksMockApi {\n    /**\r\n     * Constructor\r\n     */\n    constructor(_fuseMockApiService) {\n      this._fuseMockApiService = _fuseMockApiService;\n      this._tags = tagsData;\n      this._tasks = tasksData;\n      // Register Mock API handlers\n      this.registerHandlers();\n    }\n    // -----------------------------------------------------------------------------------------------------\n    // @ Public methods\n    // -----------------------------------------------------------------------------------------------------\n    /**\r\n     * Register Mock API handlers\r\n     */\n    registerHandlers() {\n      // -----------------------------------------------------------------------------------------------------\n      // @ Tags - GET\n      // -----------------------------------------------------------------------------------------------------\n      this._fuseMockApiService.onGet('api/apps/tasks/tags').reply(() => [200, cloneDeep(this._tags)]);\n      // -----------------------------------------------------------------------------------------------------\n      // @ Tags - POST\n      // -----------------------------------------------------------------------------------------------------\n      this._fuseMockApiService.onPost('api/apps/tasks/tag').reply(({\n        request\n      }) => {\n        // Get the tag\n        const newTag = cloneDeep(request.body.tag);\n        // Generate a new GUID\n        newTag.id = FuseMockApiUtils.guid();\n        // Unshift the new tag\n        this._tags.unshift(newTag);\n        return [200, newTag];\n      });\n      // -----------------------------------------------------------------------------------------------------\n      // @ Tags - PATCH\n      // -----------------------------------------------------------------------------------------------------\n      this._fuseMockApiService.onPatch('api/apps/tasks/tag').reply(({\n        request\n      }) => {\n        // Get the id and tag\n        const id = request.body.id;\n        const tag = cloneDeep(request.body.tag);\n        // Prepare the updated tag\n        let updatedTag = null;\n        // Find the tag and update it\n        this._tags.forEach((item, index, tags) => {\n          if (item.id === id) {\n            // Update the tag\n            tags[index] = assign({}, tags[index], tag);\n            // Store the updated tag\n            updatedTag = tags[index];\n          }\n        });\n        return [200, updatedTag];\n      });\n      // -----------------------------------------------------------------------------------------------------\n      // @ Tag - DELETE\n      // -----------------------------------------------------------------------------------------------------\n      this._fuseMockApiService.onDelete('api/apps/tasks/tag').reply(({\n        request\n      }) => {\n        // Get the id\n        const id = request.params.get('id');\n        // Find the tag and delete it\n        const index = this._tags.findIndex(item => item.id === id);\n        this._tags.splice(index, 1);\n        // Get the tasks that have the tag\n        const tasksWithTag = this._tasks.filter(task => task.tags.indexOf(id) > -1);\n        // Iterate through them and remove the tag\n        tasksWithTag.forEach(task => {\n          task.tags.splice(task.tags.indexOf(id), 1);\n        });\n        return [200, true];\n      });\n      // -----------------------------------------------------------------------------------------------------\n      // @ Tasks - GET\n      // -----------------------------------------------------------------------------------------------------\n      this._fuseMockApiService.onGet('api/apps/tasks/all').reply(() => {\n        // Clone the tasks\n        const tasks = cloneDeep(this._tasks);\n        // Sort the tasks by order\n        tasks.sort((a, b) => a.order - b.order);\n        return [200, tasks];\n      });\n      // -----------------------------------------------------------------------------------------------------\n      // @ Tasks Search - GET\n      // -----------------------------------------------------------------------------------------------------\n      this._fuseMockApiService.onGet('api/apps/tasks/search').reply(({\n        request\n      }) => {\n        // Get the search query\n        const query = request.params.get('query');\n        // Prepare the search results\n        let results;\n        // If the query exists...\n        if (query) {\n          // Clone the tasks\n          let tasks = cloneDeep(this._tasks);\n          // Filter the tasks\n          tasks = tasks.filter(task => task.title && task.title.toLowerCase().includes(query.toLowerCase()) || task.notes && task.notes.toLowerCase().includes(query.toLowerCase()));\n          // Mark the found chars\n          tasks.forEach(task => {\n            const re = new RegExp('(' + query.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&') + ')', 'ig');\n            task.title = task.title.replace(re, '<mark>$1</mark>');\n          });\n          // Set them as the search result\n          results = tasks;\n        }\n        // Otherwise, set the results to null\n        else {\n          results = null;\n        }\n        return [200, results];\n      });\n      // -----------------------------------------------------------------------------------------------------\n      // @ Tasks Orders - PATCH\n      // -----------------------------------------------------------------------------------------------------\n      this._fuseMockApiService.onPatch('api/apps/tasks/order').reply(({\n        request\n      }) => {\n        // Get the tasks\n        const tasks = request.body.tasks;\n        // Go through the tasks\n        this._tasks.forEach(task => {\n          // Find this task's index within the tasks array that comes with the request\n          // and assign that index as the new order number for the task\n          task.order = tasks.findIndex(item => item.id === task.id);\n        });\n        // Clone the tasks\n        const updatedTasks = cloneDeep(this._tasks);\n        return [200, updatedTasks];\n      });\n      // -----------------------------------------------------------------------------------------------------\n      // @ Task - GET\n      // -----------------------------------------------------------------------------------------------------\n      this._fuseMockApiService.onGet('api/apps/tasks/task').reply(({\n        request\n      }) => {\n        // Get the id from the params\n        const id = request.params.get('id');\n        // Clone the tasks\n        const tasks = cloneDeep(this._tasks);\n        // Find the task\n        const task = tasks.find(item => item.id === id);\n        return [200, task];\n      });\n      // -----------------------------------------------------------------------------------------------------\n      // @ Task - POST\n      // -----------------------------------------------------------------------------------------------------\n      this._fuseMockApiService.onPost('api/apps/tasks/task').reply(({\n        request\n      }) => {\n        // Generate a new task\n        const newTask = {\n          id: FuseMockApiUtils.guid(),\n          type: request.body.type,\n          title: '',\n          notes: null,\n          completed: false,\n          dueDate: null,\n          priority: 1,\n          tags: [],\n          order: 0\n        };\n        // Unshift the new task\n        this._tasks.unshift(newTask);\n        // Go through the tasks and update their order numbers\n        this._tasks.forEach((task, index) => {\n          task.order = index;\n        });\n        return [200, newTask];\n      });\n      // -----------------------------------------------------------------------------------------------------\n      // @ Task - PATCH\n      // -----------------------------------------------------------------------------------------------------\n      this._fuseMockApiService.onPatch('api/apps/tasks/task').reply(({\n        request\n      }) => {\n        // Get the id and task\n        const id = request.body.id;\n        const task = cloneDeep(request.body.task);\n        // Prepare the updated task\n        let updatedTask = null;\n        // Find the task and update it\n        this._tasks.forEach((item, index, tasks) => {\n          if (item.id === id) {\n            // Update the task\n            tasks[index] = assign({}, tasks[index], task);\n            // Store the updated task\n            updatedTask = tasks[index];\n          }\n        });\n        return [200, updatedTask];\n      });\n      // -----------------------------------------------------------------------------------------------------\n      // @ Task - DELETE\n      // -----------------------------------------------------------------------------------------------------\n      this._fuseMockApiService.onDelete('api/apps/tasks/task').reply(({\n        request\n      }) => {\n        // Get the id\n        const id = request.params.get('id');\n        // Find the task and delete it\n        const index = this._tasks.findIndex(item => item.id === id);\n        this._tasks.splice(index, 1);\n        return [200, true];\n      });\n    }\n  }\n  TasksMockApi.ɵfac = function TasksMockApi_Factory(t) {\n    return new (t || TasksMockApi)(i0.ɵɵinject(i1.FuseMockApiService));\n  };\n  TasksMockApi.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: TasksMockApi,\n    factory: TasksMockApi.ɵfac,\n    providedIn: 'root'\n  });\n  return TasksMockApi;\n})();","map":null,"metadata":{},"sourceType":"module"}