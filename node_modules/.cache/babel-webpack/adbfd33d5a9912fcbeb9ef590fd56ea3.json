{"ast":null,"code":"import { DOCUMENT } from '@angular/common';\nimport { NavigationEnd } from '@angular/router';\nimport { combineLatest, Subject } from 'rxjs';\nimport { filter, map, takeUntil } from 'rxjs/operators';\nimport { FUSE_VERSION } from '@fuse/version';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"@fuse/services/config\";\nimport * as i3 from \"@fuse/services/media-watcher\";\nimport * as i4 from \"@angular/common\";\nimport * as i5 from \"app/layout/common/settings/settings.component\";\nimport * as i6 from \"app/layout/layouts/empty/empty.component\";\nimport * as i7 from \"app/layout/layouts/horizontal/centered/centered.component\";\nimport * as i8 from \"app/layout/layouts/horizontal/enterprise/enterprise.component\";\nimport * as i9 from \"app/layout/layouts/horizontal/material/material.component\";\nimport * as i10 from \"app/layout/layouts/horizontal/modern/modern.component\";\nimport * as i11 from \"app/layout/layouts/vertical/classic/classic.component\";\nimport * as i12 from \"app/layout/layouts/vertical/classy/classy.component\";\nimport * as i13 from \"app/layout/layouts/vertical/compact/compact.component\";\nimport * as i14 from \"app/layout/layouts/vertical/dense/dense.component\";\nimport * as i15 from \"app/layout/layouts/vertical/futuristic/futuristic.component\";\nimport * as i16 from \"app/layout/layouts/vertical/thin/thin.component\";\nfunction LayoutComponent_empty_layout_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"empty-layout\");\n  }\n}\nfunction LayoutComponent_centered_layout_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"centered-layout\");\n  }\n}\nfunction LayoutComponent_enterprise_layout_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"enterprise-layout\");\n  }\n}\nfunction LayoutComponent_material_layout_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"material-layout\");\n  }\n}\nfunction LayoutComponent_modern_layout_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"modern-layout\");\n  }\n}\nfunction LayoutComponent_classic_layout_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"classic-layout\");\n  }\n}\nfunction LayoutComponent_classy_layout_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"classy-layout\");\n  }\n}\nfunction LayoutComponent_compact_layout_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"compact-layout\");\n  }\n}\nfunction LayoutComponent_dense_layout_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"dense-layout\");\n  }\n}\nfunction LayoutComponent_futuristic_layout_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"futuristic-layout\");\n  }\n}\nfunction LayoutComponent_thin_layout_10_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"thin-layout\");\n  }\n}\nexport let LayoutComponent = /*#__PURE__*/(() => {\n  class LayoutComponent {\n    /**\r\n     * Constructor\r\n     */\n    constructor(_activatedRoute, _document, _renderer2, _router, _fuseConfigService, _fuseMediaWatcherService) {\n      this._activatedRoute = _activatedRoute;\n      this._document = _document;\n      this._renderer2 = _renderer2;\n      this._router = _router;\n      this._fuseConfigService = _fuseConfigService;\n      this._fuseMediaWatcherService = _fuseMediaWatcherService;\n      this._unsubscribeAll = new Subject();\n    }\n    // -----------------------------------------------------------------------------------------------------\n    // @ Lifecycle hooks\n    // -----------------------------------------------------------------------------------------------------\n    /**\r\n     * On init\r\n     */\n    ngOnInit() {\n      // Set the theme and scheme based on the configuration\n      combineLatest([this._fuseConfigService.config$, this._fuseMediaWatcherService.onMediaQueryChange$(['(prefers-color-scheme: dark)', '(prefers-color-scheme: light)'])]).pipe(takeUntil(this._unsubscribeAll), map(([config, mql]) => {\n        const options = {\n          scheme: config.scheme,\n          theme: config.theme\n        };\n        // If the scheme is set to 'auto'...\n        if (config.scheme === 'auto') {\n          // Decide the scheme using the media query\n          options.scheme = mql.breakpoints['(prefers-color-scheme: dark)'] ? 'dark' : 'light';\n        }\n        return options;\n      })).subscribe(options => {\n        // Store the options\n        this.scheme = options.scheme;\n        this.theme = options.theme;\n        // Update the scheme and theme\n        this._updateScheme();\n        this._updateTheme();\n      });\n      // Subscribe to config changes\n      this._fuseConfigService.config$.pipe(takeUntil(this._unsubscribeAll)).subscribe(config => {\n        // Store the config\n        this.config = config;\n        // Update the layout\n        this._updateLayout();\n      });\n      // Subscribe to NavigationEnd event\n      this._router.events.pipe(filter(event => event instanceof NavigationEnd), takeUntil(this._unsubscribeAll)).subscribe(() => {\n        // Update the layout\n        this._updateLayout();\n      });\n      // Set the app version\n      this._renderer2.setAttribute(this._document.querySelector('[ng-version]'), 'fuse-version', FUSE_VERSION);\n    }\n    /**\r\n     * On destroy\r\n     */\n    ngOnDestroy() {\n      // Unsubscribe from all subscriptions\n      this._unsubscribeAll.next();\n      this._unsubscribeAll.complete();\n    }\n    // -----------------------------------------------------------------------------------------------------\n    // @ Private methods\n    // -----------------------------------------------------------------------------------------------------\n    /**\r\n     * Update the selected layout\r\n     */\n    _updateLayout() {\n      // Get the current activated route\n      let route = this._activatedRoute;\n      while (route.firstChild) {\n        route = route.firstChild;\n      }\n      // 1. Set the layout from the config\n      this.layout = this.config.layout;\n      // 2. Get the query parameter from the current route and\n      // set the layout and save the layout to the config\n      const layoutFromQueryParam = route.snapshot.queryParamMap.get('layout');\n      if (layoutFromQueryParam) {\n        this.layout = layoutFromQueryParam;\n        if (this.config) {\n          this.config.layout = layoutFromQueryParam;\n        }\n      }\n      // 3. Iterate through the paths and change the layout as we find\n      // a config for it.\n      //\n      // The reason we do this is that there might be empty grouping\n      // paths or componentless routes along the path. Because of that,\n      // we cannot just assume that the layout configuration will be\n      // in the last path's config or in the first path's config.\n      //\n      // So, we get all the paths that matched starting from root all\n      // the way to the current activated route, walk through them one\n      // by one and change the layout as we find the layout config. This\n      // way, layout configuration can live anywhere within the path and\n      // we won't miss it.\n      //\n      // Also, this will allow overriding the layout in any time so we\n      // can have different layouts for different routes.\n      const paths = route.pathFromRoot;\n      paths.forEach(path => {\n        // Check if there is a 'layout' data\n        if (path.routeConfig && path.routeConfig.data && path.routeConfig.data.layout) {\n          // Set the layout\n          this.layout = path.routeConfig.data.layout;\n        }\n      });\n    }\n    /**\r\n     * Update the selected scheme\r\n     *\r\n     * @private\r\n     */\n    _updateScheme() {\n      // Remove class names for all schemes\n      this._document.body.classList.remove('light', 'dark');\n      // Add class name for the currently selected scheme\n      this._document.body.classList.add(this.scheme);\n    }\n    /**\r\n     * Update the selected theme\r\n     *\r\n     * @private\r\n     */\n    _updateTheme() {\n      // Find the class name for the previously selected theme and remove it\n      this._document.body.classList.forEach(className => {\n        if (className.startsWith('theme-')) {\n          this._document.body.classList.remove(className, className.split('-')[1]);\n        }\n      });\n      // Add class name for the currently selected theme\n      this._document.body.classList.add(`theme-${this.theme}`);\n    }\n  }\n  LayoutComponent.ɵfac = function LayoutComponent_Factory(t) {\n    return new (t || LayoutComponent)(i0.ɵɵdirectiveInject(i1.ActivatedRoute), i0.ɵɵdirectiveInject(DOCUMENT), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i1.Router), i0.ɵɵdirectiveInject(i2.FuseConfigService), i0.ɵɵdirectiveInject(i3.FuseMediaWatcherService));\n  };\n  LayoutComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: LayoutComponent,\n    selectors: [[\"layout\"]],\n    decls: 12,\n    vars: 11,\n    consts: [[4, \"ngIf\"]],\n    template: function LayoutComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, LayoutComponent_empty_layout_0_Template, 1, 0, \"empty-layout\", 0);\n        i0.ɵɵtemplate(1, LayoutComponent_centered_layout_1_Template, 1, 0, \"centered-layout\", 0);\n        i0.ɵɵtemplate(2, LayoutComponent_enterprise_layout_2_Template, 1, 0, \"enterprise-layout\", 0);\n        i0.ɵɵtemplate(3, LayoutComponent_material_layout_3_Template, 1, 0, \"material-layout\", 0);\n        i0.ɵɵtemplate(4, LayoutComponent_modern_layout_4_Template, 1, 0, \"modern-layout\", 0);\n        i0.ɵɵtemplate(5, LayoutComponent_classic_layout_5_Template, 1, 0, \"classic-layout\", 0);\n        i0.ɵɵtemplate(6, LayoutComponent_classy_layout_6_Template, 1, 0, \"classy-layout\", 0);\n        i0.ɵɵtemplate(7, LayoutComponent_compact_layout_7_Template, 1, 0, \"compact-layout\", 0);\n        i0.ɵɵtemplate(8, LayoutComponent_dense_layout_8_Template, 1, 0, \"dense-layout\", 0);\n        i0.ɵɵtemplate(9, LayoutComponent_futuristic_layout_9_Template, 1, 0, \"futuristic-layout\", 0);\n        i0.ɵɵtemplate(10, LayoutComponent_thin_layout_10_Template, 1, 0, \"thin-layout\", 0);\n        i0.ɵɵelement(11, \"settings\");\n      }\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngIf\", ctx.layout === \"empty\");\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.layout === \"centered\");\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.layout === \"enterprise\");\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.layout === \"material\");\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.layout === \"modern\");\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.layout === \"classic\");\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.layout === \"classy\");\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.layout === \"compact\");\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.layout === \"dense\");\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.layout === \"futuristic\");\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.layout === \"thin\");\n      }\n    },\n    directives: [i4.NgIf, i5.SettingsComponent, i6.EmptyLayoutComponent, i7.CenteredLayoutComponent, i8.EnterpriseLayoutComponent, i9.MaterialLayoutComponent, i10.ModernLayoutComponent, i11.ClassicLayoutComponent, i12.ClassyLayoutComponent, i13.CompactLayoutComponent, i14.DenseLayoutComponent, i15.FuturisticLayoutComponent, i16.ThinLayoutComponent],\n    styles: [\"layout{display:flex;flex:1 1 auto;width:100%;max-width:100%;min-width:0}layout>*{position:relative;display:flex;flex:1 1 auto;width:100%}layout router-outlet+*{position:relative;display:flex;flex:1 1 auto;width:100%}\\n\"],\n    encapsulation: 2\n  });\n  return LayoutComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}