{"ast":null,"code":"import { BehaviorSubject, of, throwError } from 'rxjs';\nimport { map, switchMap, tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let QuickChatService = /*#__PURE__*/(() => {\n  class QuickChatService {\n    /**\r\n     * Constructor\r\n     */\n    constructor(_httpClient) {\n      this._httpClient = _httpClient;\n      this._chat = new BehaviorSubject(null);\n      this._chats = new BehaviorSubject(null);\n    }\n    // -----------------------------------------------------------------------------------------------------\n    // @ Accessors\n    // -----------------------------------------------------------------------------------------------------\n    /**\r\n     * Getter for chat\r\n     */\n    get chat$() {\n      return this._chat.asObservable();\n    }\n    /**\r\n     * Getter for chat\r\n     */\n    get chats$() {\n      return this._chats.asObservable();\n    }\n    // -----------------------------------------------------------------------------------------------------\n    // @ Public methods\n    // -----------------------------------------------------------------------------------------------------\n    /**\r\n     * Get chats\r\n     */\n    getChats() {\n      return this._httpClient.get('api/apps/chat/chats').pipe(tap(response => {\n        this._chats.next(response);\n      }));\n    }\n    /**\r\n     * Get chat\r\n     *\r\n     * @param id\r\n     */\n    getChatById(id) {\n      return this._httpClient.get('api/apps/chat/chat', {\n        params: {\n          id\n        }\n      }).pipe(map(chat => {\n        // Update the chat\n        this._chat.next(chat);\n        // Return the chat\n        return chat;\n      }), switchMap(chat => {\n        if (!chat) {\n          return throwError('Could not found chat with id of ' + id + '!');\n        }\n        return of(chat);\n      }));\n    }\n  }\n  QuickChatService.ɵfac = function QuickChatService_Factory(t) {\n    return new (t || QuickChatService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  QuickChatService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: QuickChatService,\n    factory: QuickChatService.ɵfac,\n    providedIn: 'root'\n  });\n  return QuickChatService;\n})();","map":null,"metadata":{},"sourceType":"module"}