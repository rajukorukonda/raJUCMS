{"ast":null,"code":"import Base64 from 'crypto-js/enc-base64';\nimport HmacSHA256 from 'crypto-js/hmac-sha256';\nimport Utf8 from 'crypto-js/enc-utf8';\nimport { cloneDeep } from 'lodash-es';\nimport { user as userData } from 'app/mock-api/common/user/data';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@fuse/lib/mock-api\";\nexport let AuthMockApi = /*#__PURE__*/(() => {\n  class AuthMockApi {\n    /**\r\n     * Constructor\r\n     */\n    constructor(_fuseMockApiService) {\n      this._fuseMockApiService = _fuseMockApiService;\n      this._user = userData;\n      // Set the mock-api\n      this._secret = 'YOUR_VERY_CONFIDENTIAL_SECRET_FOR_SIGNING_JWT_TOKENS!!!';\n      // Register Mock API handlers\n      this.registerHandlers();\n    }\n    // -----------------------------------------------------------------------------------------------------\n    // @ Public methods\n    // -----------------------------------------------------------------------------------------------------\n    /**\r\n     * Register Mock API handlers\r\n     */\n    registerHandlers() {\n      // -----------------------------------------------------------------------------------------------------\n      // @ Forgot password - POST\n      // -----------------------------------------------------------------------------------------------------\n      this._fuseMockApiService.onPost('api/auth/forgot-password', 1000).reply(() => [200, true]);\n      // -----------------------------------------------------------------------------------------------------\n      // @ Reset password - POST\n      // -----------------------------------------------------------------------------------------------------\n      this._fuseMockApiService.onPost('api/auth/reset-password', 1000).reply(() => [200, true]);\n      // -----------------------------------------------------------------------------------------------------\n      // @ Sign in - POST\n      // -----------------------------------------------------------------------------------------------------\n      this._fuseMockApiService.onPost('api/auth/sign-in', 1500).reply(({\n        request\n      }) => {\n        // Sign in successful\n        if (request.body.email === 'hughes.brian@company.com' && request.body.password === 'admin') {\n          return [200, {\n            user: cloneDeep(this._user),\n            accessToken: this._generateJWTToken(),\n            tokenType: 'bearer'\n          }];\n        }\n        // Invalid credentials\n        return [404, false];\n      });\n      // -----------------------------------------------------------------------------------------------------\n      // @ Verify and refresh the access token - POST\n      // -----------------------------------------------------------------------------------------------------\n      this._fuseMockApiService.onPost('api/auth/refresh-access-token').reply(({\n        request\n      }) => {\n        // Get the access token\n        const accessToken = request.body.accessToken;\n        // Verify the token\n        if (this._verifyJWTToken(accessToken)) {\n          return [200, {\n            user: cloneDeep(this._user),\n            accessToken: this._generateJWTToken(),\n            tokenType: 'bearer'\n          }];\n        }\n        // Invalid token\n        return [401, {\n          error: 'Invalid token'\n        }];\n      });\n      // -----------------------------------------------------------------------------------------------------\n      // @ Sign up - POST\n      // -----------------------------------------------------------------------------------------------------\n      this._fuseMockApiService.onPost('api/auth/sign-up', 1500).reply(() =>\n      // Simply return true\n      [200, true]);\n      // -----------------------------------------------------------------------------------------------------\n      // @ Unlock session - POST\n      // -----------------------------------------------------------------------------------------------------\n      this._fuseMockApiService.onPost('api/auth/unlock-session', 1500).reply(({\n        request\n      }) => {\n        // Sign in successful\n        if (request.body.email === 'hughes.brian@company.com' && request.body.password === 'admin') {\n          return [200, {\n            user: cloneDeep(this._user),\n            accessToken: this._generateJWTToken(),\n            tokenType: 'bearer'\n          }];\n        }\n        // Invalid credentials\n        return [404, false];\n      });\n    }\n    // -----------------------------------------------------------------------------------------------------\n    // @ Private methods\n    // -----------------------------------------------------------------------------------------------------\n    /**\r\n     * Return base64 encoded version of the given string\r\n     *\r\n     * @param source\r\n     * @private\r\n     */\n    _base64url(source) {\n      // Encode in classical base64\n      let encodedSource = Base64.stringify(source);\n      // Remove padding equal characters\n      encodedSource = encodedSource.replace(/=+$/, '');\n      // Replace characters according to base64url specifications\n      encodedSource = encodedSource.replace(/\\+/g, '-');\n      encodedSource = encodedSource.replace(/\\//g, '_');\n      // Return the base64 encoded string\n      return encodedSource;\n    }\n    /**\r\n     * Generates a JWT token using CryptoJS library.\r\n     *\r\n     * This generator is for mocking purposes only and it is NOT\r\n     * safe to use it in production frontend applications!\r\n     *\r\n     * @private\r\n     */\n    _generateJWTToken() {\n      // Define token header\n      const header = {\n        alg: 'HS256',\n        typ: 'JWT'\n      };\n      // Calculate the issued at and expiration dates\n      const date = new Date();\n      const iat = Math.floor(date.getTime() / 1000);\n      const exp = Math.floor(date.setDate(date.getDate() + 7) / 1000);\n      // Define token payload\n      const payload = {\n        iat: iat,\n        iss: 'Fuse',\n        exp: exp\n      };\n      // Stringify and encode the header\n      const stringifiedHeader = Utf8.parse(JSON.stringify(header));\n      const encodedHeader = this._base64url(stringifiedHeader);\n      // Stringify and encode the payload\n      const stringifiedPayload = Utf8.parse(JSON.stringify(payload));\n      const encodedPayload = this._base64url(stringifiedPayload);\n      // Sign the encoded header and mock-api\n      let signature = encodedHeader + '.' + encodedPayload;\n      signature = HmacSHA256(signature, this._secret);\n      signature = this._base64url(signature);\n      // Build and return the token\n      return encodedHeader + '.' + encodedPayload + '.' + signature;\n    }\n    /**\r\n     * Verify the given token\r\n     *\r\n     * @param token\r\n     * @private\r\n     */\n    _verifyJWTToken(token) {\n      // Split the token into parts\n      const parts = token.split('.');\n      const header = parts[0];\n      const payload = parts[1];\n      const signature = parts[2];\n      // Re-sign and encode the header and payload using the secret\n      const signatureCheck = this._base64url(HmacSHA256(header + '.' + payload, this._secret));\n      // Verify that the resulting signature is valid\n      return signature === signatureCheck;\n    }\n  }\n  AuthMockApi.ɵfac = function AuthMockApi_Factory(t) {\n    return new (t || AuthMockApi)(i0.ɵɵinject(i1.FuseMockApiService));\n  };\n  AuthMockApi.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthMockApi,\n    factory: AuthMockApi.ɵfac,\n    providedIn: 'root'\n  });\n  return AuthMockApi;\n})();","map":null,"metadata":{},"sourceType":"module"}