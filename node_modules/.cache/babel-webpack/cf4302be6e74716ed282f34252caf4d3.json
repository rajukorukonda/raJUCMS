{"ast":null,"code":"/*!\nFullCalendar RRule Plugin v4.4.2\nDocs & License: https://fullcalendar.io/\n(c) 2019 Adam Shaw\n*/\n\nimport { rrulestr, RRule } from 'rrule';\nimport { createPlugin, refineProps, createDuration } from '@fullcalendar/core';\n\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\n\nvar __assign = function () {\n  __assign = Object.assign || function __assign(t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar EVENT_DEF_PROPS = {\n  rrule: null,\n  duration: createDuration\n};\nvar recurring = {\n  parse: function (rawEvent, leftoverProps, dateEnv) {\n    if (rawEvent.rrule != null) {\n      var props = refineProps(rawEvent, EVENT_DEF_PROPS, {}, leftoverProps);\n      var parsed = parseRRule(props.rrule, dateEnv);\n      if (parsed) {\n        return {\n          typeData: parsed.rrule,\n          allDayGuess: parsed.allDayGuess,\n          duration: props.duration\n        };\n      }\n    }\n    return null;\n  },\n  expand: function (rrule, framingRange) {\n    // we WANT an inclusive start and in exclusive end, but the js rrule lib will only do either BOTH\n    // inclusive or BOTH exclusive, which is stupid: https://github.com/jakubroztocil/rrule/issues/84\n    // Workaround: make inclusive, which will generate extra occurences, and then trim.\n    return rrule.between(framingRange.start, framingRange.end, true).filter(function (date) {\n      return date.valueOf() < framingRange.end.valueOf();\n    });\n  }\n};\nvar main = createPlugin({\n  recurringTypes: [recurring]\n});\nfunction parseRRule(input, dateEnv) {\n  var allDayGuess = null;\n  var rrule;\n  if (typeof input === 'string') {\n    rrule = rrulestr(input);\n  } else if (typeof input === 'object' && input) {\n    // non-null object\n    var refined = __assign({}, input); // copy\n    if (typeof refined.dtstart === 'string') {\n      var dtstartMeta = dateEnv.createMarkerMeta(refined.dtstart);\n      if (dtstartMeta) {\n        refined.dtstart = dtstartMeta.marker;\n        allDayGuess = dtstartMeta.isTimeUnspecified;\n      } else {\n        delete refined.dtstart;\n      }\n    }\n    if (typeof refined.until === 'string') {\n      refined.until = dateEnv.createMarker(refined.until);\n    }\n    if (refined.freq != null) {\n      refined.freq = convertConstant(refined.freq);\n    }\n    if (refined.wkst != null) {\n      refined.wkst = convertConstant(refined.wkst);\n    } else {\n      refined.wkst = (dateEnv.weekDow - 1 + 7) % 7; // convert Sunday-first to Monday-first\n    }\n\n    if (refined.byweekday != null) {\n      refined.byweekday = convertConstants(refined.byweekday); // the plural version\n    }\n\n    rrule = new RRule(refined);\n  }\n  if (rrule) {\n    return {\n      rrule: rrule,\n      allDayGuess: allDayGuess\n    };\n  }\n  return null;\n}\nfunction convertConstants(input) {\n  if (Array.isArray(input)) {\n    return input.map(convertConstant);\n  }\n  return convertConstant(input);\n}\nfunction convertConstant(input) {\n  if (typeof input === 'string') {\n    return RRule[input.toUpperCase()];\n  }\n  return input;\n}\nexport default main;","map":null,"metadata":{},"sourceType":"module"}