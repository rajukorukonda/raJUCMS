{"ast":null,"code":"import { DateWithZone } from './datewithzone';\nimport { iter } from './iter/index';\nimport dateutil from './dateutil';\nexport function iterSet(iterResult, _rrule, _exrule, _rdate, _exdate, tzid) {\n  var _exdateHash = {};\n  var _accept = iterResult.accept;\n  function evalExdate(after, before) {\n    _exrule.forEach(function (rrule) {\n      rrule.between(after, before, true).forEach(function (date) {\n        _exdateHash[Number(date)] = true;\n      });\n    });\n  }\n  _exdate.forEach(function (date) {\n    var zonedDate = new DateWithZone(date, tzid).rezonedDate();\n    _exdateHash[Number(zonedDate)] = true;\n  });\n  iterResult.accept = function (date) {\n    var dt = Number(date);\n    if (isNaN(dt)) return _accept.call(this, date);\n    if (!_exdateHash[dt]) {\n      evalExdate(new Date(dt - 1), new Date(dt + 1));\n      if (!_exdateHash[dt]) {\n        _exdateHash[dt] = true;\n        return _accept.call(this, date);\n      }\n    }\n    return true;\n  };\n  if (iterResult.method === 'between') {\n    evalExdate(iterResult.args.after, iterResult.args.before);\n    iterResult.accept = function (date) {\n      var dt = Number(date);\n      if (!_exdateHash[dt]) {\n        _exdateHash[dt] = true;\n        return _accept.call(this, date);\n      }\n      return true;\n    };\n  }\n  for (var i = 0; i < _rdate.length; i++) {\n    var zonedDate = new DateWithZone(_rdate[i], tzid).rezonedDate();\n    if (!iterResult.accept(new Date(zonedDate.getTime()))) break;\n  }\n  _rrule.forEach(function (rrule) {\n    iter(iterResult, rrule.options);\n  });\n  var res = iterResult._result;\n  dateutil.sort(res);\n  switch (iterResult.method) {\n    case 'all':\n    case 'between':\n      return res;\n    case 'before':\n      return res.length && res[res.length - 1] || null;\n    case 'after':\n    default:\n      return res.length && res[0] || null;\n  }\n}\n//# sourceMappingURL=iterset.js.map","map":null,"metadata":{},"sourceType":"module"}