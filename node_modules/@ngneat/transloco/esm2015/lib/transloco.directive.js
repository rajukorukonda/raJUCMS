/**
 * @fileoverview added by tsickle
 * Generated from: lib/transloco.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectorRef, Directive, ElementRef, Inject, Input, Optional, TemplateRef, ViewContainerRef } from '@angular/core';
import { forkJoin } from 'rxjs';
import { switchMap } from 'rxjs/operators';
import { TemplateHandler } from './template-handler';
import { TRANSLOCO_LANG } from './transloco-lang';
import { TRANSLOCO_LOADING_TEMPLATE } from './transloco-loading-template';
import { TRANSLOCO_SCOPE } from './transloco-scope';
import { TranslocoService } from './transloco.service';
import { listenOrNotOperator, resolveInlineLoader, shouldListenToLangChanges } from './shared';
import { LangResolver } from './lang-resolver';
import { ScopeResolver } from './scope-resolver';
export class TranslocoDirective {
    /**
     * @param {?} translocoService
     * @param {?} tpl
     * @param {?} providerScope
     * @param {?} providerLang
     * @param {?} providedLoadingTpl
     * @param {?} vcr
     * @param {?} cdr
     * @param {?} host
     */
    constructor(translocoService, tpl, providerScope, providerLang, providedLoadingTpl, vcr, cdr, host) {
        this.translocoService = translocoService;
        this.tpl = tpl;
        this.providerScope = providerScope;
        this.providerLang = providerLang;
        this.providedLoadingTpl = providedLoadingTpl;
        this.vcr = vcr;
        this.cdr = cdr;
        this.host = host;
        this.translationMemo = {};
        this.params = {};
        this.loaderTplHandler = null;
        // Whether we already rendered the view once
        this.initialized = false;
        this.langResolver = new LangResolver();
        this.scopeResolver = new ScopeResolver(this.translocoService);
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        /** @type {?} */
        const listenToLangChange = shouldListenToLangChanges(this.translocoService, this.providerLang || this.inlineLang);
        this.subscription = this.translocoService.langChanges$
            .pipe(switchMap((/**
         * @param {?} activeLang
         * @return {?}
         */
        activeLang => {
            /** @type {?} */
            const lang = this.langResolver.resolve({
                inline: this.inlineLang,
                provider: this.providerLang,
                active: activeLang
            });
            return Array.isArray(this.providerScope)
                ? forkJoin(((/** @type {?} */ (this.providerScope))).map((/**
                 * @param {?} providerScope
                 * @return {?}
                 */
                providerScope => this.resolveScope(lang, providerScope))))
                : this.resolveScope(lang, this.providerScope);
        })), listenOrNotOperator(listenToLangChange))
            .subscribe((/**
         * @return {?}
         */
        () => {
            this.currentLang = this.langResolver.resolveLangBasedOnScope(this.path);
            this.tpl === null ? this.simpleStrategy() : this.structuralStrategy(this.currentLang, this.inlineRead);
            this.cdr.markForCheck();
            this.initialized = true;
        }));
        /** @type {?} */
        const loadingTpl = this.getLoadingTpl();
        if (!this.initialized && loadingTpl) {
            this.loaderTplHandler = new TemplateHandler(loadingTpl, this.vcr);
            this.loaderTplHandler.attachView();
        }
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        // We need to support dynamic keys/params, so if this is not the first change CD cycle
        // we need to run the function again in order to update the value
        /** @type {?} */
        const notInit = Object.keys(changes).some((/**
         * @param {?} v
         * @return {?}
         */
        v => changes[v].firstChange === false));
        notInit && this.simpleStrategy();
    }
    /**
     * @private
     * @return {?}
     */
    simpleStrategy() {
        this.detachLoader();
        this.host.nativeElement.innerText = this.translocoService.translate(this.key, this.params, this.currentLang);
    }
    /**
     * @private
     * @param {?} lang
     * @param {?} read
     * @return {?}
     */
    structuralStrategy(lang, read) {
        this.translationMemo = {};
        if (this.view) {
            // when the lang changes we need to change the reference so Angular will update the view
            this.view.context['$implicit'] = this.getTranslateFn(lang, read);
            this.view.context['currentLang'] = this.currentLang;
        }
        else {
            this.detachLoader();
            this.view = this.vcr.createEmbeddedView(this.tpl, {
                $implicit: this.getTranslateFn(lang, read),
                currentLang: this.currentLang
            });
        }
    }
    /**
     * @private
     * @param {?} lang
     * @param {?} read
     * @return {?}
     */
    getTranslateFn(lang, read) {
        return (/**
         * @param {?} key
         * @param {?} params
         * @return {?}
         */
        (key, params) => {
            /** @type {?} */
            const withRead = read ? `${read}.${key}` : key;
            /** @type {?} */
            const withParams = params ? `${withRead}${JSON.stringify(params)}` : withRead;
            if (this.translationMemo.hasOwnProperty(withParams)) {
                return this.translationMemo[withParams].value;
            }
            this.translationMemo[withParams] = {
                params,
                value: this.translocoService.translate(withRead, params, lang)
            };
            return this.translationMemo[withParams].value;
        });
    }
    /**
     * @private
     * @return {?}
     */
    getLoadingTpl() {
        return this.inlineTpl || this.providedLoadingTpl;
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.subscription && this.subscription.unsubscribe();
    }
    /**
     * @private
     * @return {?}
     */
    detachLoader() {
        this.loaderTplHandler && this.loaderTplHandler.detachView();
    }
    /**
     * @private
     * @param {?} lang
     * @param {?} providerScope
     * @return {?}
     */
    resolveScope(lang, providerScope) {
        /** @type {?} */
        let resolvedScope = this.scopeResolver.resolve({ inline: this.inlineScope, provider: providerScope });
        this.path = this.langResolver.resolveLangPath(lang, resolvedScope);
        /** @type {?} */
        const inlineLoader = resolveInlineLoader(providerScope, resolvedScope);
        return this.translocoService._loadDependencies(this.path, inlineLoader);
    }
}
TranslocoDirective.decorators = [
    { type: Directive, args: [{
                selector: '[transloco]'
            },] }
];
/** @nocollapse */
TranslocoDirective.ctorParameters = () => [
    { type: TranslocoService },
    { type: TemplateRef, decorators: [{ type: Optional }] },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [TRANSLOCO_SCOPE,] }] },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [TRANSLOCO_LANG,] }] },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [TRANSLOCO_LOADING_TEMPLATE,] }] },
    { type: ViewContainerRef },
    { type: ChangeDetectorRef },
    { type: ElementRef }
];
TranslocoDirective.propDecorators = {
    key: [{ type: Input, args: ['transloco',] }],
    params: [{ type: Input, args: ['translocoParams',] }],
    inlineScope: [{ type: Input, args: ['translocoScope',] }],
    inlineRead: [{ type: Input, args: ['translocoRead',] }],
    inlineLang: [{ type: Input, args: ['translocoLang',] }],
    inlineTpl: [{ type: Input, args: ['translocoLoadingTpl',] }]
};
if (false) {
    /** @type {?} */
    TranslocoDirective.prototype.subscription;
    /** @type {?} */
    TranslocoDirective.prototype.view;
    /**
     * @type {?}
     * @private
     */
    TranslocoDirective.prototype.translationMemo;
    /** @type {?} */
    TranslocoDirective.prototype.key;
    /** @type {?} */
    TranslocoDirective.prototype.params;
    /** @type {?} */
    TranslocoDirective.prototype.inlineScope;
    /** @type {?} */
    TranslocoDirective.prototype.inlineRead;
    /** @type {?} */
    TranslocoDirective.prototype.inlineLang;
    /** @type {?} */
    TranslocoDirective.prototype.inlineTpl;
    /**
     * @type {?}
     * @private
     */
    TranslocoDirective.prototype.currentLang;
    /**
     * @type {?}
     * @private
     */
    TranslocoDirective.prototype.loaderTplHandler;
    /**
     * @type {?}
     * @private
     */
    TranslocoDirective.prototype.initialized;
    /**
     * @type {?}
     * @private
     */
    TranslocoDirective.prototype.path;
    /**
     * @type {?}
     * @private
     */
    TranslocoDirective.prototype.langResolver;
    /**
     * @type {?}
     * @private
     */
    TranslocoDirective.prototype.scopeResolver;
    /**
     * @type {?}
     * @private
     */
    TranslocoDirective.prototype.translocoService;
    /**
     * @type {?}
     * @private
     */
    TranslocoDirective.prototype.tpl;
    /**
     * @type {?}
     * @private
     */
    TranslocoDirective.prototype.providerScope;
    /**
     * @type {?}
     * @private
     */
    TranslocoDirective.prototype.providerLang;
    /**
     * @type {?}
     * @private
     */
    TranslocoDirective.prototype.providedLoadingTpl;
    /**
     * @type {?}
     * @private
     */
    TranslocoDirective.prototype.vcr;
    /**
     * @type {?}
     * @private
     */
    TranslocoDirective.prototype.cdr;
    /**
     * @type {?}
     * @private
     */
    TranslocoDirective.prototype.host;
}
//# sourceMappingURL=data:application/json;base64,