{"version":3,"file":"angular-material-components-datetime-picker.js","sources":["../../../../projects/datetime-picker/src/lib/core/date-adapter.ts","../../../../projects/datetime-picker/src/lib/core/date-formats.ts","../../../../projects/datetime-picker/src/lib/calendar-body.ts","../../../../projects/datetime-picker/src/lib/date-range-selection-strategy.ts","../../../../projects/datetime-picker/src/lib/utils/date-utils.ts","../../../../projects/datetime-picker/src/lib/month-view.ts","../../../../projects/datetime-picker/src/lib/multi-year-view.ts","../../../../projects/datetime-picker/src/lib/year-view.ts","../../../../projects/datetime-picker/src/lib/calendar.ts","../../../../projects/datetime-picker/src/lib/timepicker.component.ts","../../../../projects/datetime-picker/src/lib/datetime-picker.component.ts","../../../../projects/datetime-picker/src/lib/datetime-input.ts","../../../../projects/datetime-picker/src/lib/timepicker.module.ts","../../../../projects/datetime-picker/src/lib/datetime-picker.module.ts","../../../../projects/datetime-picker/src/lib/core/native-date-adapter.ts","../../../../projects/datetime-picker/src/lib/core/native-date-formats.ts","../../../../projects/datetime-picker/src/lib/core/native-date.module.ts","../../../../projects/datetime-picker/src/public-api.ts","../../../../projects/datetime-picker/src/angular-material-components-datetime-picker.ts"],"names":[],"mappings":"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","sourcesContent":["import { DateAdapter } from '@angular/material/core';\r\n\r\nexport abstract class NgxMatDateAdapter<D> extends DateAdapter<D> {\r\n  /**\r\n * Gets the hour component of the given date.\r\n * @param date The date to extract the month from.\r\n * @returns The hour component.\r\n */\r\n  abstract getHour(date: D): number;\r\n\r\n  /**\r\n* Gets the minute component of the given date.\r\n* @param date The date to extract the month from.\r\n* @returns The minute component.\r\n*/\r\n  abstract getMinute(date: D): number;\r\n\r\n  /**\r\n  * Gets the second component of the given date.\r\n  * @param date The date to extract the month from.\r\n  * @returns The second component.\r\n  */\r\n  abstract getSecond(date: D): number;\r\n\r\n  /**\r\n  * Set the hour component of the given date.\r\n  * @param date The date to extract the month from.\r\n  * @param value The value to set.\r\n  */\r\n  abstract setHour(date: D, value: number): void;\r\n\r\n  /**\r\n  * Set the second component of the given date.\r\n  * @param date The date to extract the month from.\r\n  * @param value The value to set.\r\n  */\r\n  abstract setMinute(date: D, value: number): void;\r\n\r\n  /**\r\n   * Set the second component of the given date.\r\n   * @param date The date to extract the month from.\r\n   * @param value The value to set.\r\n   */\r\n  abstract setSecond(date: D, value: number): void;\r\n\r\n  /**\r\n   * Check if two date have same time\r\n   * @param a Date 1\r\n   * @param b Date 2\r\n   */\r\n  isSameTime(a: D, b: D): boolean {\r\n    if (a == null || b == null) return true;\r\n    return this.getHour(a) === this.getHour(b)\r\n      && this.getMinute(a) === this.getMinute(b)\r\n      && this.getSecond(a) === this.getSecond(b);\r\n  }\r\n\r\n  /**\r\n   * Copy time from a date to a another date\r\n   * @param toDate \r\n   * @param fromDate \r\n   */\r\n  copyTime(toDate: D, fromDate: D) {\r\n    this.setHour(toDate, this.getHour(fromDate));\r\n    this.setMinute(toDate, this.getMinute(fromDate));\r\n    this.setSecond(toDate, this.getSecond(fromDate));\r\n  }\r\n\r\n  /**\r\n * Compares two dates.\r\n * @param first The first date to compare.\r\n * @param second The second date to compare.\r\n * @returns 0 if the dates are equal, a number less than 0 if the first date is earlier,\r\n *     a number greater than 0 if the first date is later.\r\n */\r\n  compareDateWithTime(first: D, second: D, showSeconds?: boolean): number {\r\n    let res = super.compareDate(first, second) ||\r\n      this.getHour(first) - this.getHour(second) ||\r\n      this.getMinute(first) - this.getMinute(second);\r\n    if (showSeconds) {\r\n      res = res || this.getSecond(first) - this.getSecond(second);\r\n    }\r\n    return res;\r\n  }\r\n\r\n  /**\r\n   * Set time by using default values\r\n   * @param defaultTime List default values [hour, minute, second]\r\n   */\r\n  setTimeByDefaultValues(date: D, defaultTime: number[]) {\r\n    if (!Array.isArray(defaultTime)) {\r\n      throw Error('@Input DefaultTime should be an array');\r\n    }\r\n    this.setHour(date, defaultTime[0] || 0);\r\n    this.setMinute(date, defaultTime[1] || 0);\r\n    this.setSecond(date, defaultTime[2] || 0);\r\n  }\r\n\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport { InjectionToken } from '@angular/core';\r\n\r\n\r\nexport type NgxMatDateFormats = {\r\n    parse: {\r\n        dateInput: any\r\n    },\r\n    display: {\r\n        dateInput: any,\r\n        monthYearLabel: any,\r\n        dateA11yLabel: any,\r\n        monthYearA11yLabel: any,\r\n    }\r\n};\r\n\r\n\r\nexport const NGX_MAT_DATE_FORMATS = new InjectionToken<NgxMatDateFormats>('ngx-mat-date-formats');\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  ElementRef,\r\n  EventEmitter,\r\n  Input,\r\n  Output,\r\n  ViewEncapsulation,\r\n  NgZone,\r\n  OnChanges,\r\n  SimpleChanges,\r\n  OnDestroy,\r\n} from '@angular/core';\r\nimport {take} from 'rxjs/operators';\r\n\r\n/**\r\n * Extra CSS classes that can be associated with a calendar cell.\r\n */\r\nexport type NgxMatCalendarCellCssClasses = string | string[] | Set<string> | {[key: string]: any};\r\n\r\n/**\r\n * An internal class that represents the data corresponding to a single calendar cell.\r\n * @docs-private\r\n */\r\nexport class NgxMatCalendarCell<D = any> {\r\n  constructor(public value: number,\r\n              public displayValue: string,\r\n              public ariaLabel: string,\r\n              public enabled: boolean,\r\n              public cssClasses: NgxMatCalendarCellCssClasses = {},\r\n              public compareValue = value,\r\n              public rawValue?: D) {}\r\n}\r\n\r\n/** Event emitted when a date inside the calendar is triggered as a result of a user action. */\r\nexport interface NgxMatCalendarUserEvent<D> {\r\n  value: D;\r\n  event: Event;\r\n}\r\n\r\n/**\r\n * An internal component used to display calendar data in a table.\r\n * @docs-private\r\n */\r\n@Component({\r\n  selector: '[ngx-mat-calendar-body]',\r\n  templateUrl: 'calendar-body.html',\r\n  styleUrls: ['calendar-body.scss'],\r\n  host: {\r\n    'class': 'ngx-mat-calendar-body',\r\n    'role': 'grid',\r\n    'aria-readonly': 'true'\r\n  },\r\n  exportAs: 'NgxMatCalendarBody',\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class NgxMatCalendarBody implements OnChanges, OnDestroy {\r\n  /**\r\n   * Used to skip the next focus event when rendering the preview range.\r\n   * We need a flag like this, because some browsers fire focus events asynchronously.\r\n   */\r\n  private _skipNextFocus: boolean;\r\n\r\n  /** The label for the table. (e.g. \"Jan 2017\"). */\r\n  @Input() label: string;\r\n\r\n  /** The cells to display in the table. */\r\n  @Input() rows: NgxMatCalendarCell[][];\r\n\r\n  /** The value in the table that corresponds to today. */\r\n  @Input() todayValue: number;\r\n\r\n  /** Start value of the selected date range. */\r\n  @Input() startValue: number;\r\n\r\n  /** End value of the selected date range. */\r\n  @Input() endValue: number;\r\n\r\n  /** The minimum number of free cells needed to fit the label in the first row. */\r\n  @Input() labelMinRequiredCells: number;\r\n\r\n  /** The number of columns in the table. */\r\n  @Input() numCols: number = 7;\r\n\r\n  /** The cell number of the active cell in the table. */\r\n  @Input() activeCell: number = 0;\r\n\r\n  /** Whether a range is being selected. */\r\n  @Input() isRange: boolean = false;\r\n\r\n  /**\r\n   * The aspect ratio (width / height) to use for the cells in the table. This aspect ratio will be\r\n   * maintained even as the table resizes.\r\n   */\r\n  @Input() cellAspectRatio: number = 1;\r\n\r\n  /** Start of the comparison range. */\r\n  @Input() comparisonStart: number | null;\r\n\r\n  /** End of the comparison range. */\r\n  @Input() comparisonEnd: number | null;\r\n\r\n  /** Start of the preview range. */\r\n  @Input() previewStart: number | null = null;\r\n\r\n  /** End of the preview range. */\r\n  @Input() previewEnd: number | null = null;\r\n\r\n  /** Emits when a new value is selected. */\r\n  @Output() readonly selectedValueChange: EventEmitter<NgxMatCalendarUserEvent<number>> =\r\n      new EventEmitter<NgxMatCalendarUserEvent<number>>();\r\n\r\n  /** Emits when the preview has changed as a result of a user action. */\r\n  @Output() previewChange = new EventEmitter<NgxMatCalendarUserEvent<NgxMatCalendarCell | null>>();\r\n\r\n  /** The number of blank cells to put at the beginning for the first row. */\r\n  _firstRowOffset: number;\r\n\r\n  /** Padding for the individual date cells. */\r\n  _cellPadding: string;\r\n\r\n  /** Width of an individual cell. */\r\n  _cellWidth: string;\r\n\r\n  constructor(private _elementRef: ElementRef<HTMLElement>, private _ngZone: NgZone) {\r\n    _ngZone.runOutsideAngular(() => {\r\n      const element = _elementRef.nativeElement;\r\n      element.addEventListener('mouseenter', this._enterHandler, true);\r\n      element.addEventListener('focus', this._enterHandler, true);\r\n      element.addEventListener('mouseleave', this._leaveHandler, true);\r\n      element.addEventListener('blur', this._leaveHandler, true);\r\n    });\r\n  }\r\n\r\n  /** Called when a cell is clicked. */\r\n  _cellClicked(cell: NgxMatCalendarCell, event: MouseEvent): void {\r\n    if (cell.enabled) {\r\n      this.selectedValueChange.emit({value: cell.value, event});\r\n    }\r\n  }\r\n\r\n  /** Returns whether a cell should be marked as selected. */\r\n  _isSelected(cell: NgxMatCalendarCell) {\r\n    return this.startValue === cell.compareValue || this.endValue === cell.compareValue;\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    const columnChanges = changes['numCols'];\r\n    const {rows, numCols} = this;\r\n\r\n    if (changes['rows'] || columnChanges) {\r\n      this._firstRowOffset = rows && rows.length && rows[0].length ? numCols - rows[0].length : 0;\r\n    }\r\n\r\n    if (changes['cellAspectRatio'] || columnChanges || !this._cellPadding) {\r\n      this._cellPadding = `${50 * this.cellAspectRatio / numCols}%`;\r\n    }\r\n\r\n    if (columnChanges || !this._cellWidth) {\r\n      this._cellWidth = `${100 / numCols}%`;\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    const element = this._elementRef.nativeElement;\r\n    element.removeEventListener('mouseenter', this._enterHandler, true);\r\n    element.removeEventListener('focus', this._enterHandler, true);\r\n    element.removeEventListener('mouseleave', this._leaveHandler, true);\r\n    element.removeEventListener('blur', this._leaveHandler, true);\r\n  }\r\n\r\n  /** Returns whether a cell is active. */\r\n  _isActiveCell(rowIndex: number, colIndex: number): boolean {\r\n    let cellNumber = rowIndex * this.numCols + colIndex;\r\n\r\n    // Account for the fact that the first row may not have as many cells.\r\n    if (rowIndex) {\r\n      cellNumber -= this._firstRowOffset;\r\n    }\r\n\r\n    return cellNumber == this.activeCell;\r\n  }\r\n\r\n  /** Focuses the active cell after the microtask queue is empty. */\r\n  _focusActiveCell(movePreview = true) {\r\n    this._ngZone.runOutsideAngular(() => {\r\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\r\n        const activeCell: HTMLElement | null =\r\n            this._elementRef.nativeElement.querySelector('.ngx-mat-calendar-body-active');\r\n\r\n        if (activeCell) {\r\n          if (!movePreview) {\r\n            this._skipNextFocus = true;\r\n          }\r\n\r\n          activeCell.focus();\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  /** Gets whether a value is the start of the main range. */\r\n  _isRangeStart(value: number) {\r\n    return isStart(value, this.startValue, this.endValue);\r\n  }\r\n\r\n  /** Gets whether a value is the end of the main range. */\r\n  _isRangeEnd(value: number) {\r\n    return isEnd(value, this.startValue, this.endValue);\r\n  }\r\n\r\n  /** Gets whether a value is within the currently-selected range. */\r\n  _isInRange(value: number): boolean {\r\n    return isInRange(value, this.startValue, this.endValue, this.isRange);\r\n  }\r\n\r\n  /** Gets whether a value is the start of the comparison range. */\r\n  _isComparisonStart(value: number) {\r\n    return isStart(value, this.comparisonStart, this.comparisonEnd);\r\n  }\r\n\r\n  /** Whether the cell is a start bridge cell between the main and comparison ranges. */\r\n  _isComparisonBridgeStart(value: number, rowIndex: number, colIndex: number) {\r\n    if (!this._isComparisonStart(value) || this._isRangeStart(value) || !this._isInRange(value)) {\r\n      return false;\r\n    }\r\n\r\n    let previousCell: NgxMatCalendarCell | undefined = this.rows[rowIndex][colIndex - 1];\r\n\r\n    if (!previousCell) {\r\n      const previousRow = this.rows[rowIndex - 1];\r\n      previousCell = previousRow && previousRow[previousRow.length - 1];\r\n    }\r\n\r\n    return previousCell && !this._isRangeEnd(previousCell.compareValue);\r\n  }\r\n\r\n  /** Whether the cell is an end bridge cell between the main and comparison ranges. */\r\n  _isComparisonBridgeEnd(value: number, rowIndex: number, colIndex: number) {\r\n    if (!this._isComparisonEnd(value) || this._isRangeEnd(value) || !this._isInRange(value)) {\r\n      return false;\r\n    }\r\n\r\n    let nextCell: NgxMatCalendarCell | undefined = this.rows[rowIndex][colIndex + 1];\r\n\r\n    if (!nextCell) {\r\n      const nextRow = this.rows[rowIndex + 1];\r\n      nextCell = nextRow && nextRow[0];\r\n    }\r\n\r\n    return nextCell && !this._isRangeStart(nextCell.compareValue);\r\n  }\r\n\r\n  /** Gets whether a value is the end of the comparison range. */\r\n  _isComparisonEnd(value: number) {\r\n    return isEnd(value, this.comparisonStart, this.comparisonEnd);\r\n  }\r\n\r\n  /** Gets whether a value is within the current comparison range. */\r\n  _isInComparisonRange(value: number) {\r\n    return isInRange(value, this.comparisonStart, this.comparisonEnd, this.isRange);\r\n  }\r\n\r\n  /** Gets whether a value is the start of the preview range. */\r\n  _isPreviewStart(value: number) {\r\n    return isStart(value, this.previewStart, this.previewEnd);\r\n  }\r\n\r\n  /** Gets whether a value is the end of the preview range. */\r\n  _isPreviewEnd(value: number) {\r\n    return isEnd(value, this.previewStart, this.previewEnd);\r\n  }\r\n\r\n  /** Gets whether a value is inside the preview range. */\r\n  _isInPreview(value: number) {\r\n    return isInRange(value, this.previewStart, this.previewEnd, this.isRange);\r\n  }\r\n\r\n  /**\r\n   * Event handler for when the user enters an element\r\n   * inside the calendar body (e.g. by hovering in or focus).\r\n   */\r\n  private _enterHandler = (event: Event) => {\r\n    if (this._skipNextFocus && event.type === 'focus') {\r\n      this._skipNextFocus = false;\r\n      return;\r\n    }\r\n\r\n    // We only need to hit the zone when we're selecting a range.\r\n    if (event.target && this.isRange) {\r\n      const cell = this._getCellFromElement(event.target as HTMLElement);\r\n\r\n      if (cell) {\r\n        this._ngZone.run(() => this.previewChange.emit({value: cell.enabled ? cell : null, event}));\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Event handler for when the user's pointer leaves an element\r\n   * inside the calendar body (e.g. by hovering out or blurring).\r\n   */\r\n  private _leaveHandler = (event: Event) => {\r\n    // We only need to hit the zone when we're selecting a range.\r\n    if (this.previewEnd !== null && this.isRange) {\r\n      // Only reset the preview end value when leaving cells. This looks better, because\r\n      // we have a gap between the cells and the rows and we don't want to remove the\r\n      // range just for it to show up again when the user moves a few pixels to the side.\r\n      if (event.target && isTableCell(event.target as HTMLElement)) {\r\n        this._ngZone.run(() => this.previewChange.emit({value: null, event}));\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Finds the NgxMatCalendarCell that corresponds to a DOM node. */\r\n  private _getCellFromElement(element: HTMLElement): NgxMatCalendarCell | null {\r\n    let cell: HTMLElement | undefined;\r\n\r\n    if (isTableCell(element)) {\r\n      cell = element;\r\n    } else if (isTableCell(element.parentNode!)) {\r\n      cell = element.parentNode as HTMLElement;\r\n    }\r\n\r\n    if (cell) {\r\n      const row = cell.getAttribute('data-ngx-mat-row');\r\n      const col = cell.getAttribute('data-ngx-mat-col');\r\n\r\n      if (row && col) {\r\n        return this.rows[parseInt(row)][parseInt(col)];\r\n      }\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n}\r\n\r\n/** Checks whether a node is a table cell element. */\r\nfunction isTableCell(node: Node): node is HTMLTableCellElement {\r\n  return node.nodeName === 'TD';\r\n}\r\n\r\n/** Checks whether a value is the start of a range. */\r\nfunction isStart(value: number, start: number | null, end: number | null): boolean {\r\n  return end !== null && start !== end && value < end && value === start;\r\n}\r\n\r\n/** Checks whether a value is the end of a range. */\r\nfunction isEnd(value: number, start: number | null, end: number | null): boolean {\r\n  return start !== null && start !== end && value >= start && value === end;\r\n}\r\n\r\n/** Checks whether a value is inside of a range. */\r\nfunction isInRange(value: number,\r\n                   start: number | null,\r\n                   end: number | null,\r\n                   rangeEnabled: boolean): boolean {\r\n  return rangeEnabled && start !== null && end !== null && start !== end &&\r\n         value >= start && value <= end;\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {Injectable, InjectionToken} from '@angular/core';\r\nimport { DateRange } from '@angular/material/datepicker';\r\nimport { NgxMatDateAdapter } from './core/date-adapter';\r\n\r\n/** Injection token used to customize the date range selection behavior. */\r\nexport const NGX_MAT_DATE_RANGE_SELECTION_STRATEGY =\r\n    new InjectionToken<NgxMatDateRangeSelectionStrategy<any>>('NGX_MAT_DATE_RANGE_SELECTION_STRATEGY');\r\n\r\n/** Object that can be provided in order to customize the date range selection behavior. */\r\nexport interface NgxMatDateRangeSelectionStrategy<D> {\r\n  /**\r\n   * Called when the user has finished selecting a value.\r\n   * @param date Date that was selected. Will be null if the user cleared the selection.\r\n   * @param currentRange Range that is currently show in the calendar.\r\n   * @param event DOM event that triggered the selection. Currently only corresponds to a `click`\r\n   *    event, but it may get expanded in the future.\r\n   */\r\n  selectionFinished(date: D | null, currentRange: DateRange<D>, event: Event): DateRange<D>;\r\n\r\n  /**\r\n   * Called when the user has activated a new date (e.g. by hovering over\r\n   * it or moving focus) and the calendar tries to display a date range.\r\n   *\r\n   * @param activeDate Date that the user has activated. Will be null if the user moved\r\n   *    focus to an element that's no a calendar cell.\r\n   * @param currentRange Range that is currently shown in the calendar.\r\n   * @param event DOM event that caused the preview to be changed. Will be either a\r\n   *    `mouseenter`/`mouseleave` or `focus`/`blur` depending on how the user is navigating.\r\n   */\r\n  createPreview(activeDate: D | null, currentRange: DateRange<D>, event: Event): DateRange<D>;\r\n}\r\n\r\n/** Provides the default date range selection behavior. */\r\n@Injectable()\r\nexport class DefaultNgxMatCalendarRangeStrategy<D> implements NgxMatDateRangeSelectionStrategy<D> {\r\n  constructor(private _dateAdapter: NgxMatDateAdapter<D>) {}\r\n\r\n  selectionFinished(date: D, currentRange: DateRange<D>) {\r\n    let {start, end} = currentRange;\r\n\r\n    if (start == null) {\r\n      start = date;\r\n    } else if (end == null && date && this._dateAdapter.compareDate(date, start) >= 0) {\r\n      end = date;\r\n    } else {\r\n      start = date;\r\n      end = null;\r\n    }\r\n\r\n    return new DateRange<D>(start, end);\r\n  }\r\n\r\n  createPreview(activeDate: D | null, currentRange: DateRange<D>) {\r\n    let start: D | null = null;\r\n    let end: D | null = null;\r\n\r\n    if (currentRange.start && !currentRange.end && activeDate) {\r\n      start = currentRange.start;\r\n      end = activeDate;\r\n    }\r\n\r\n    return new DateRange<D>(start, end);\r\n  }\r\n}\r\n","export const LIMIT_TIMES = {\r\n    minHour: 0,\r\n    maxHour: 24,\r\n    minMinute: 0,\r\n    maxMinute: 60,\r\n    minSecond: 0,\r\n    maxSecond: 60,\r\n    meridian: 12\r\n}\r\n\r\nexport const MERIDIANS = {\r\n    AM: 'AM',\r\n    PM: 'PM'\r\n}\r\n\r\nexport const DEFAULT_STEP = 1;\r\nexport const NUMERIC_REGEX = /[^0-9]/g;\r\n\r\nexport const PATTERN_INPUT_HOUR = /^(2[0-3]|[0-1][0-9]|[0-9])$/;\r\nexport const PATTERN_INPUT_MINUTE = /^([0-5][0-9]|[0-9])$/;\r\nexport const PATTERN_INPUT_SECOND = /^([0-5][0-9]|[0-9])$/;\r\n\r\nexport function formatTwoDigitTimeValue(val: number) {\r\n    const txt = val.toString();\r\n    return txt.length > 1 ? txt : `0${txt}`;\r\n}\r\n\r\nexport function createMissingDateImplError(provider: string) {\r\n    return Error(\r\n        `NgxMatDatepicker: No provider found for ${provider}. You must import one of the following ` +\r\n        `modules at your application root: NgxMatNativeDateModule, NgxMatMomentModule, or provide a ` +\r\n        `custom implementation.`);\r\n}\r\n\r\n/** Formats a range of years. */\r\nexport function formatYearRange(start: string, end: string): string {\r\n    return `${start} \\u2013 ${end}`;\r\n}\r\n\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {\r\n  DOWN_ARROW,\r\n  END,\r\n  ENTER,\r\n  HOME,\r\n  LEFT_ARROW,\r\n  PAGE_DOWN,\r\n  PAGE_UP,\r\n  RIGHT_ARROW,\r\n  UP_ARROW,\r\n  SPACE,\r\n  ESCAPE,\r\n} from '@angular/cdk/keycodes';\r\nimport {\r\n  AfterContentInit,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  EventEmitter,\r\n  Inject,\r\n  Input,\r\n  Optional,\r\n  Output,\r\n  ViewEncapsulation,\r\n  ViewChild,\r\n  OnDestroy,\r\n} from '@angular/core';\r\nimport {Directionality} from '@angular/cdk/bidi';\r\n\r\nimport {Subscription} from 'rxjs';\r\nimport {startWith} from 'rxjs/operators';\r\nimport { DateRange } from '@angular/material/datepicker';\r\nimport { NgxMatCalendarCellCssClasses, NgxMatCalendarUserEvent, NgxMatCalendarBody, NgxMatCalendarCell } from './calendar-body';\r\nimport { NGX_MAT_DATE_FORMATS, NgxMatDateFormats } from './core/date-formats';\r\nimport { NgxMatDateAdapter } from './core/date-adapter';\r\nimport { NGX_MAT_DATE_RANGE_SELECTION_STRATEGY, NgxMatDateRangeSelectionStrategy } from './date-range-selection-strategy';\r\nimport { createMissingDateImplError } from './utils/date-utils';\r\n\r\n\r\n\r\nconst DAYS_PER_WEEK = 7;\r\n\r\n\r\n/**\r\n * An internal component used to display a single month in the datepicker.\r\n * @docs-private\r\n */\r\n@Component({\r\n  selector: 'ngx-mat-month-view',\r\n  templateUrl: 'month-view.html',\r\n  exportAs: 'ngxMatMonthView',\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class NgxMatMonthView<D> implements AfterContentInit, OnDestroy {\r\n  private _rerenderSubscription = Subscription.EMPTY;\r\n\r\n  /**\r\n   * The date to display in this month view (everything other than the month and year is ignored).\r\n   */\r\n  @Input()\r\n  get activeDate(): D { return this._activeDate; }\r\n  set activeDate(value: D) {\r\n    const oldActiveDate = this._activeDate;\r\n    const validDate =\r\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\r\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\r\n    if (!this._hasSameMonthAndYear(oldActiveDate, this._activeDate)) {\r\n      this._init();\r\n    }\r\n  }\r\n  private _activeDate: D;\r\n\r\n  /** The currently selected date. */\r\n  @Input()\r\n  get selected(): DateRange<D> | D | null { return this._selected; }\r\n  set selected(value: DateRange<D> | D | null) {\r\n    if (value instanceof DateRange) {\r\n      this._selected = value;\r\n    } else {\r\n      this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\r\n    }\r\n\r\n    this._setRanges(this._selected);\r\n  }\r\n  private _selected: DateRange<D> | D | null;\r\n\r\n  /** The minimum selectable date. */\r\n  @Input()\r\n  get minDate(): D | null { return this._minDate; }\r\n  set minDate(value: D | null) {\r\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\r\n  }\r\n  private _minDate: D | null;\r\n\r\n  /** The maximum selectable date. */\r\n  @Input()\r\n  get maxDate(): D | null { return this._maxDate; }\r\n  set maxDate(value: D | null) {\r\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\r\n  }\r\n  private _maxDate: D | null;\r\n\r\n  /** Function used to filter which dates are selectable. */\r\n  @Input() dateFilter: (date: D) => boolean;\r\n\r\n  /** Function that can be used to add custom CSS classes to dates. */\r\n  @Input() dateClass: (date: D) => NgxMatCalendarCellCssClasses;\r\n\r\n  /** Start of the comparison range. */\r\n  @Input() comparisonStart: D | null;\r\n\r\n  /** End of the comparison range. */\r\n  @Input() comparisonEnd: D | null;\r\n\r\n  /** Emits when a new date is selected. */\r\n  @Output() readonly selectedChange: EventEmitter<D | null> = new EventEmitter<D | null>();\r\n\r\n  /** Emits when any date is selected. */\r\n  @Output() readonly _userSelection: EventEmitter<NgxMatCalendarUserEvent<D | null>> =\r\n      new EventEmitter<NgxMatCalendarUserEvent<D | null>>();\r\n\r\n  /** Emits when any date is activated. */\r\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\r\n\r\n  /** The body of calendar table */\r\n  @ViewChild(NgxMatCalendarBody) _matCalendarBody: NgxMatCalendarBody;\r\n\r\n  /** The label for this month (e.g. \"January 2017\"). */\r\n  _monthLabel: string;\r\n\r\n  /** Grid of calendar cells representing the dates of the month. */\r\n  _weeks: NgxMatCalendarCell[][];\r\n\r\n  /** The number of blank cells in the first row before the 1st of the month. */\r\n  _firstWeekOffset: number;\r\n\r\n  /** Start value of the currently-shown date range. */\r\n  _rangeStart: number | null;\r\n\r\n  /** End value of the currently-shown date range. */\r\n  _rangeEnd: number | null;\r\n\r\n  /** Start value of the currently-shown comparison date range. */\r\n  _comparisonRangeStart: number | null;\r\n\r\n  /** End value of the currently-shown comparison date range. */\r\n  _comparisonRangeEnd: number | null;\r\n\r\n  /** Start of the preview range. */\r\n  _previewStart: number | null;\r\n\r\n  /** End of the preview range. */\r\n  _previewEnd: number | null;\r\n\r\n  /** Whether the user is currently selecting a range of dates. */\r\n  _isRange: boolean;\r\n\r\n  /** The date of the month that today falls on. Null if today is in another month. */\r\n  _todayDate: number | null;\r\n\r\n  /** The names of the weekdays. */\r\n  _weekdays: {long: string, narrow: string}[];\r\n\r\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\r\n              @Optional() @Inject(NGX_MAT_DATE_FORMATS) private _dateFormats: NgxMatDateFormats,\r\n              @Optional() public _dateAdapter: NgxMatDateAdapter<D>,\r\n              @Optional() private _dir?: Directionality,\r\n              @Inject(NGX_MAT_DATE_RANGE_SELECTION_STRATEGY) @Optional()\r\n                  private _rangeStrategy?: NgxMatDateRangeSelectionStrategy<D>) {\r\n    if (!this._dateAdapter) {\r\n      throw createMissingDateImplError('NgxMatDateAdapter');\r\n    }\r\n    if (!this._dateFormats) {\r\n      throw createMissingDateImplError('NGX_MAT_DATE_FORMATS');\r\n    }\r\n\r\n    this._activeDate = this._dateAdapter.today();\r\n  }\r\n\r\n  ngAfterContentInit() {\r\n    this._rerenderSubscription = this._dateAdapter.localeChanges\r\n      .pipe(startWith(null))\r\n      .subscribe(() => this._init());\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._rerenderSubscription.unsubscribe();\r\n  }\r\n\r\n  /** Handles when a new date is selected. */\r\n  _dateSelected(event: NgxMatCalendarUserEvent<number>) {\r\n    const date = event.value;\r\n    const selectedYear = this._dateAdapter.getYear(this.activeDate);\r\n    const selectedMonth = this._dateAdapter.getMonth(this.activeDate);\r\n    const selectedDate = this._dateAdapter.createDate(selectedYear, selectedMonth, date);\r\n    let rangeStartDate: number | null;\r\n    let rangeEndDate: number | null;\r\n\r\n    if (this._selected instanceof DateRange) {\r\n      rangeStartDate = this._getDateInCurrentMonth(this._selected.start);\r\n      rangeEndDate = this._getDateInCurrentMonth(this._selected.end);\r\n    } else {\r\n      rangeStartDate = rangeEndDate = this._getDateInCurrentMonth(this._selected);\r\n    }\r\n\r\n    if (rangeStartDate !== date || rangeEndDate !== date) {\r\n      this.selectedChange.emit(selectedDate);\r\n    }\r\n\r\n    this._userSelection.emit({value: selectedDate, event: event.event});\r\n  }\r\n\r\n  /** Handles keydown events on the calendar body when calendar is in month view. */\r\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\r\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\r\n    // disabled ones from being selected. This may not be ideal, we should look into whether\r\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\r\n\r\n    const oldActiveDate = this._activeDate;\r\n    const isRtl = this._isRtl();\r\n\r\n    switch (event.keyCode) {\r\n      case LEFT_ARROW:\r\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? 1 : -1);\r\n        break;\r\n      case RIGHT_ARROW:\r\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? -1 : 1);\r\n        break;\r\n      case UP_ARROW:\r\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, -7);\r\n        break;\r\n      case DOWN_ARROW:\r\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 7);\r\n        break;\r\n      case HOME:\r\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\r\n            1 - this._dateAdapter.getDate(this._activeDate));\r\n        break;\r\n      case END:\r\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\r\n            (this._dateAdapter.getNumDaysInMonth(this._activeDate) -\r\n              this._dateAdapter.getDate(this._activeDate)));\r\n        break;\r\n      case PAGE_UP:\r\n        this.activeDate = event.altKey ?\r\n            this._dateAdapter.addCalendarYears(this._activeDate, -1) :\r\n            this._dateAdapter.addCalendarMonths(this._activeDate, -1);\r\n        break;\r\n      case PAGE_DOWN:\r\n        this.activeDate = event.altKey ?\r\n            this._dateAdapter.addCalendarYears(this._activeDate, 1) :\r\n            this._dateAdapter.addCalendarMonths(this._activeDate, 1);\r\n        break;\r\n      case ENTER:\r\n      case SPACE:\r\n        if (!this.dateFilter || this.dateFilter(this._activeDate)) {\r\n          this._dateSelected({value: this._dateAdapter.getDate(this._activeDate), event});\r\n          // Prevent unexpected default actions such as form submission.\r\n          event.preventDefault();\r\n        }\r\n        return;\r\n      case ESCAPE:\r\n        // Abort the current range selection if the user presses escape mid-selection.\r\n        if (this._previewEnd != null) {\r\n          this._previewStart = this._previewEnd = null;\r\n          this.selectedChange.emit(null);\r\n          this._userSelection.emit({value: null, event});\r\n          event.preventDefault();\r\n          event.stopPropagation(); // Prevents the overlay from closing.\r\n        }\r\n        return;\r\n      default:\r\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\r\n        return;\r\n    }\r\n\r\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\r\n      this.activeDateChange.emit(this.activeDate);\r\n    }\r\n\r\n    this._focusActiveCell();\r\n    // Prevent unexpected default actions such as form submission.\r\n    event.preventDefault();\r\n  }\r\n\r\n  /** Initializes this month view. */\r\n  _init() {\r\n    this._setRanges(this.selected);\r\n    this._todayDate = this._getCellCompareValue(this._dateAdapter.today());\r\n    this._monthLabel =\r\n        this._dateAdapter.getMonthNames('short')[this._dateAdapter.getMonth(this.activeDate)]\r\n            .toLocaleUpperCase();\r\n\r\n    let firstOfMonth = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate),\r\n        this._dateAdapter.getMonth(this.activeDate), 1);\r\n    this._firstWeekOffset =\r\n        (DAYS_PER_WEEK + this._dateAdapter.getDayOfWeek(firstOfMonth) -\r\n         this._dateAdapter.getFirstDayOfWeek()) % DAYS_PER_WEEK;\r\n\r\n    this._initWeekdays();\r\n    this._createWeekCells();\r\n    this._changeDetectorRef.markForCheck();\r\n  }\r\n\r\n  /** Focuses the active cell after the microtask queue is empty. */\r\n  _focusActiveCell(movePreview?: boolean) {\r\n    this._matCalendarBody._focusActiveCell(movePreview);\r\n  }\r\n\r\n  /** Called when the user has activated a new cell and the preview needs to be updated. */\r\n  _previewChanged({event, value: cell}: NgxMatCalendarUserEvent<NgxMatCalendarCell<D> | null>) {\r\n    if (this._rangeStrategy) {\r\n      // We can assume that this will be a range, because preview\r\n      // events aren't fired for single date selections.\r\n      const value = cell ? cell.rawValue! : null;\r\n      const previewRange =\r\n          this._rangeStrategy.createPreview(value, this.selected as DateRange<D>, event);\r\n      this._previewStart = this._getCellCompareValue(previewRange.start);\r\n      this._previewEnd = this._getCellCompareValue(previewRange.end);\r\n\r\n      // Note that here we need to use `detectChanges`, rather than `markForCheck`, because\r\n      // the way `_focusActiveCell` is set up at the moment makes it fire at the wrong time\r\n      // when navigating one month back using the keyboard which will cause this handler\r\n      // to throw a \"changed after checked\" error when updating the preview state.\r\n      this._changeDetectorRef.detectChanges();\r\n    }\r\n  }\r\n\r\n  /** Initializes the weekdays. */\r\n  private _initWeekdays() {\r\n    const firstDayOfWeek = this._dateAdapter.getFirstDayOfWeek();\r\n    const narrowWeekdays = this._dateAdapter.getDayOfWeekNames('narrow');\r\n    const longWeekdays = this._dateAdapter.getDayOfWeekNames('long');\r\n\r\n    // Rotate the labels for days of the week based on the configured first day of the week.\r\n    let weekdays = longWeekdays.map((long, i) => {\r\n        return {long, narrow: narrowWeekdays[i]};\r\n    });\r\n    this._weekdays = weekdays.slice(firstDayOfWeek).concat(weekdays.slice(0, firstDayOfWeek));\r\n  }\r\n\r\n  /** Creates MatCalendarCells for the dates in this month. */\r\n  private _createWeekCells() {\r\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(this.activeDate);\r\n    const dateNames = this._dateAdapter.getDateNames();\r\n    this._weeks = [[]];\r\n    for (let i = 0, cell = this._firstWeekOffset; i < daysInMonth; i++, cell++) {\r\n      if (cell == DAYS_PER_WEEK) {\r\n        this._weeks.push([]);\r\n        cell = 0;\r\n      }\r\n      const date = this._dateAdapter.createDate(\r\n            this._dateAdapter.getYear(this.activeDate),\r\n            this._dateAdapter.getMonth(this.activeDate), i + 1);\r\n      const enabled = this._shouldEnableDate(date);\r\n      const ariaLabel = this._dateAdapter.format(date, this._dateFormats.display.dateA11yLabel);\r\n      const cellClasses = this.dateClass ? this.dateClass(date) : undefined;\r\n\r\n      this._weeks[this._weeks.length - 1].push(new NgxMatCalendarCell<D>(i + 1, dateNames[i],\r\n          ariaLabel, enabled, cellClasses, this._getCellCompareValue(date)!, date));\r\n    }\r\n  }\r\n\r\n  /** Date filter for the month */\r\n  private _shouldEnableDate(date: D): boolean {\r\n    return !!date &&\r\n        (!this.minDate || this._dateAdapter.compareDate(date, this.minDate) >= 0) &&\r\n        (!this.maxDate || this._dateAdapter.compareDate(date, this.maxDate) <= 0) &&\r\n        (!this.dateFilter || this.dateFilter(date));\r\n  }\r\n\r\n  /**\r\n   * Gets the date in this month that the given Date falls on.\r\n   * Returns null if the given Date is in another month.\r\n   */\r\n  private _getDateInCurrentMonth(date: D | null): number | null {\r\n    return date && this._hasSameMonthAndYear(date, this.activeDate) ?\r\n        this._dateAdapter.getDate(date) : null;\r\n  }\r\n\r\n  /** Checks whether the 2 dates are non-null and fall within the same month of the same year. */\r\n  private _hasSameMonthAndYear(d1: D | null, d2: D | null): boolean {\r\n    return !!(d1 && d2 && this._dateAdapter.getMonth(d1) == this._dateAdapter.getMonth(d2) &&\r\n              this._dateAdapter.getYear(d1) == this._dateAdapter.getYear(d2));\r\n  }\r\n\r\n  /** Gets the value that will be used to one cell to another. */\r\n  private _getCellCompareValue(date: D | null): number | null {\r\n    if (date) {\r\n      // We use the time since the Unix epoch to compare dates in this view, rather than the\r\n      // cell values, because we need to support ranges that span across multiple months/years.\r\n      const year = this._dateAdapter.getYear(date);\r\n      const month = this._dateAdapter.getMonth(date);\r\n      const day = this._dateAdapter.getDate(date);\r\n      return new Date(year, month, day).getTime();\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * @param obj The object to check.\r\n   * @returns The given object if it is both a date instance and valid, otherwise null.\r\n   */\r\n  private _getValidDateOrNull(obj: any): D | null {\r\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\r\n  }\r\n\r\n  /** Determines whether the user has the RTL layout direction. */\r\n  private _isRtl() {\r\n    return this._dir && this._dir.value === 'rtl';\r\n  }\r\n\r\n  /** Sets the current range based on a model value. */\r\n  private _setRanges(selectedValue: DateRange<D> | D | null) {\r\n    if (selectedValue instanceof DateRange) {\r\n      this._rangeStart = this._getCellCompareValue(selectedValue.start);\r\n      this._rangeEnd = this._getCellCompareValue(selectedValue.end);\r\n      this._isRange = true;\r\n    } else {\r\n      this._rangeStart = this._rangeEnd = this._getCellCompareValue(selectedValue);\r\n      this._isRange = false;\r\n    }\r\n\r\n    this._comparisonRangeStart = this._getCellCompareValue(this.comparisonStart);\r\n    this._comparisonRangeEnd = this._getCellCompareValue(this.comparisonEnd);\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {\r\n  DOWN_ARROW,\r\n  END,\r\n  ENTER,\r\n  HOME,\r\n  LEFT_ARROW,\r\n  PAGE_DOWN,\r\n  PAGE_UP,\r\n  RIGHT_ARROW,\r\n  UP_ARROW,\r\n  SPACE,\r\n} from '@angular/cdk/keycodes';\r\nimport {\r\n  AfterContentInit,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  EventEmitter,\r\n  Input,\r\n  Optional,\r\n  Output,\r\n  ViewChild,\r\n  ViewEncapsulation,\r\n  OnDestroy,\r\n} from '@angular/core';\r\nimport {Directionality} from '@angular/cdk/bidi';\r\nimport {Subscription} from 'rxjs';\r\nimport {startWith} from 'rxjs/operators';\r\nimport { DateRange } from '@angular/material/datepicker';\r\nimport { NgxMatCalendarCell, NgxMatCalendarBody, NgxMatCalendarUserEvent } from './calendar-body';\r\nimport { NgxMatDateAdapter } from './core/date-adapter';\r\nimport { createMissingDateImplError } from './utils/date-utils';\r\n\r\nexport const yearsPerPage = 24;\r\n\r\nexport const yearsPerRow = 4;\r\n\r\n/**\r\n * An internal component used to display a year selector in the datepicker.\r\n * @docs-private\r\n */\r\n@Component({\r\n  selector: 'ngx-mat-multi-year-view',\r\n  templateUrl: 'multi-year-view.html',\r\n  exportAs: 'ngxMatMultiYearView',\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class NgxMatMultiYearView<D> implements AfterContentInit, OnDestroy {\r\n  private _rerenderSubscription = Subscription.EMPTY;\r\n\r\n  /** The date to display in this multi-year view (everything other than the year is ignored). */\r\n  @Input()\r\n  get activeDate(): D { return this._activeDate; }\r\n  set activeDate(value: D) {\r\n    let oldActiveDate = this._activeDate;\r\n    const validDate =\r\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\r\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\r\n\r\n    if (!isSameMultiYearView(\r\n      this._dateAdapter, oldActiveDate, this._activeDate, this.minDate, this.maxDate)) {\r\n      this._init();\r\n    }\r\n  }\r\n  private _activeDate: D;\r\n\r\n  /** The currently selected date. */\r\n  @Input()\r\n  get selected(): DateRange<D> | D | null { return this._selected; }\r\n  set selected(value: DateRange<D> | D | null) {\r\n    if (value instanceof DateRange) {\r\n      this._selected = value;\r\n    } else {\r\n      this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\r\n    }\r\n\r\n    this._setSelectedYear(value);\r\n  }\r\n  private _selected: DateRange<D> | D | null;\r\n\r\n\r\n  /** The minimum selectable date. */\r\n  @Input()\r\n  get minDate(): D | null { return this._minDate; }\r\n  set minDate(value: D | null) {\r\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\r\n  }\r\n  private _minDate: D | null;\r\n\r\n  /** The maximum selectable date. */\r\n  @Input()\r\n  get maxDate(): D | null { return this._maxDate; }\r\n  set maxDate(value: D | null) {\r\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\r\n  }\r\n  private _maxDate: D | null;\r\n\r\n  /** A function used to filter which dates are selectable. */\r\n  @Input() dateFilter: (date: D) => boolean;\r\n\r\n  /** Emits when a new year is selected. */\r\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\r\n\r\n  /** Emits the selected year. This doesn't imply a change on the selected date */\r\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\r\n\r\n  /** Emits when any date is activated. */\r\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\r\n\r\n  /** The body of calendar table */\r\n  @ViewChild(NgxMatCalendarBody) _matCalendarBody: NgxMatCalendarBody;\r\n\r\n  /** Grid of calendar cells representing the currently displayed years. */\r\n  _years: NgxMatCalendarCell[][];\r\n\r\n  /** The year that today falls on. */\r\n  _todayYear: number;\r\n\r\n  /** The year of the selected date. Null if the selected date is null. */\r\n  _selectedYear: number | null;\r\n\r\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\r\n              @Optional() public _dateAdapter: NgxMatDateAdapter<D>,\r\n              @Optional() private _dir?: Directionality) {\r\n    if (!this._dateAdapter) {\r\n      throw createMissingDateImplError('NgxMatDateAdapter');\r\n    }\r\n\r\n    this._activeDate = this._dateAdapter.today();\r\n  }\r\n\r\n  ngAfterContentInit() {\r\n    this._rerenderSubscription = this._dateAdapter.localeChanges\r\n      .pipe(startWith(null))\r\n      .subscribe(() => this._init());\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._rerenderSubscription.unsubscribe();\r\n  }\r\n\r\n  /** Initializes this multi-year view. */\r\n  _init() {\r\n    this._todayYear = this._dateAdapter.getYear(this._dateAdapter.today());\r\n\r\n    // We want a range years such that we maximize the number of\r\n    // enabled dates visible at once. This prevents issues where the minimum year\r\n    // is the last item of a page OR the maximum year is the first item of a page.\r\n\r\n    // The offset from the active year to the \"slot\" for the starting year is the\r\n    // *actual* first rendered year in the multi-year view.\r\n    const activeYear = this._dateAdapter.getYear(this._activeDate);\r\n    const minYearOfPage = activeYear - getActiveOffset(\r\n      this._dateAdapter, this.activeDate, this.minDate, this.maxDate);\r\n\r\n    this._years = [];\r\n    for (let i = 0, row: number[] = []; i < yearsPerPage; i++) {\r\n      row.push(minYearOfPage + i);\r\n      if (row.length == yearsPerRow) {\r\n        this._years.push(row.map(year => this._createCellForYear(year)));\r\n        row = [];\r\n      }\r\n    }\r\n    this._changeDetectorRef.markForCheck();\r\n  }\r\n\r\n  /** Handles when a new year is selected. */\r\n  _yearSelected(event: NgxMatCalendarUserEvent<number>) {\r\n    const year = event.value;\r\n    this.yearSelected.emit(this._dateAdapter.createDate(year, 0, 1));\r\n    let month = this._dateAdapter.getMonth(this.activeDate);\r\n    let daysInMonth =\r\n        this._dateAdapter.getNumDaysInMonth(this._dateAdapter.createDate(year, month, 1));\r\n    this.selectedChange.emit(this._dateAdapter.createDate(year, month,\r\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\r\n  }\r\n\r\n  /** Handles keydown events on the calendar body when calendar is in multi-year view. */\r\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\r\n    const oldActiveDate = this._activeDate;\r\n    const isRtl = this._isRtl();\r\n\r\n    switch (event.keyCode) {\r\n      case LEFT_ARROW:\r\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? 1 : -1);\r\n        break;\r\n      case RIGHT_ARROW:\r\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? -1 : 1);\r\n        break;\r\n      case UP_ARROW:\r\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, -yearsPerRow);\r\n        break;\r\n      case DOWN_ARROW:\r\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, yearsPerRow);\r\n        break;\r\n      case HOME:\r\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\r\n          -getActiveOffset(this._dateAdapter, this.activeDate, this.minDate, this.maxDate));\r\n        break;\r\n      case END:\r\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\r\n          yearsPerPage - getActiveOffset(\r\n            this._dateAdapter, this.activeDate, this.minDate, this.maxDate) - 1);\r\n        break;\r\n      case PAGE_UP:\r\n        this.activeDate =\r\n            this._dateAdapter.addCalendarYears(\r\n                this._activeDate, event.altKey ? -yearsPerPage * 10 : -yearsPerPage);\r\n        break;\r\n      case PAGE_DOWN:\r\n        this.activeDate =\r\n            this._dateAdapter.addCalendarYears(\r\n                this._activeDate, event.altKey ? yearsPerPage * 10 : yearsPerPage);\r\n        break;\r\n      case ENTER:\r\n      case SPACE:\r\n        this._yearSelected({value: this._dateAdapter.getYear(this._activeDate), event});\r\n        break;\r\n      default:\r\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\r\n        return;\r\n    }\r\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\r\n      this.activeDateChange.emit(this.activeDate);\r\n    }\r\n\r\n    this._focusActiveCell();\r\n    // Prevent unexpected default actions such as form submission.\r\n    event.preventDefault();\r\n  }\r\n\r\n  _getActiveCell(): number {\r\n    return getActiveOffset(this._dateAdapter, this.activeDate, this.minDate, this.maxDate);\r\n  }\r\n\r\n  /** Focuses the active cell after the microtask queue is empty. */\r\n  _focusActiveCell() {\r\n    this._matCalendarBody._focusActiveCell();\r\n  }\r\n\r\n  /** Creates an MatCalendarCell for the given year. */\r\n  private _createCellForYear(year: number) {\r\n    let yearName = this._dateAdapter.getYearName(this._dateAdapter.createDate(year, 0, 1));\r\n    return new NgxMatCalendarCell(year, yearName, yearName, this._shouldEnableYear(year));\r\n  }\r\n\r\n  /** Whether the given year is enabled. */\r\n  private _shouldEnableYear(year: number) {\r\n    // disable if the year is greater than maxDate lower than minDate\r\n    if (year === undefined || year === null ||\r\n        (this.maxDate && year > this._dateAdapter.getYear(this.maxDate)) ||\r\n        (this.minDate && year < this._dateAdapter.getYear(this.minDate))) {\r\n      return false;\r\n    }\r\n\r\n    // enable if it reaches here and there's no filter defined\r\n    if (!this.dateFilter) {\r\n      return true;\r\n    }\r\n\r\n    const firstOfYear = this._dateAdapter.createDate(year, 0, 1);\r\n\r\n    // If any date in the year is enabled count the year as enabled.\r\n    for (let date = firstOfYear; this._dateAdapter.getYear(date) == year;\r\n      date = this._dateAdapter.addCalendarDays(date, 1)) {\r\n      if (this.dateFilter(date)) {\r\n        return true;\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * @param obj The object to check.\r\n   * @returns The given object if it is both a date instance and valid, otherwise null.\r\n   */\r\n  private _getValidDateOrNull(obj: any): D | null {\r\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\r\n  }\r\n\r\n  /** Determines whether the user has the RTL layout direction. */\r\n  private _isRtl() {\r\n    return this._dir && this._dir.value === 'rtl';\r\n  }\r\n\r\n  /** Sets the currently-highlighted year based on a model value. */\r\n  private _setSelectedYear(value: DateRange<D> | D | null) {\r\n    this._selectedYear = null;\r\n\r\n    if (value instanceof DateRange) {\r\n      const displayValue = value.start || value.end;\r\n\r\n      if (displayValue) {\r\n        this._selectedYear = this._dateAdapter.getYear(displayValue);\r\n      }\r\n    } else if (value) {\r\n      this._selectedYear = this._dateAdapter.getYear(value);\r\n    }\r\n  }\r\n}\r\n\r\nexport function isSameMultiYearView<D>(\r\n  dateAdapter: NgxMatDateAdapter<D>, date1: D, date2: D, minDate: D | null, maxDate: D | null): boolean {\r\n  const year1 = dateAdapter.getYear(date1);\r\n  const year2 = dateAdapter.getYear(date2);\r\n  const startingYear = getStartingYear(dateAdapter, minDate, maxDate);\r\n  return Math.floor((year1 - startingYear) / yearsPerPage) ===\r\n          Math.floor((year2 - startingYear) / yearsPerPage);\r\n}\r\n\r\n/**\r\n * When the multi-year view is first opened, the active year will be in view.\r\n * So we compute how many years are between the active year and the *slot* where our\r\n * \"startingYear\" will render when paged into view.\r\n */\r\nexport function getActiveOffset<D>(\r\n  dateAdapter: NgxMatDateAdapter<D>, activeDate: D, minDate: D | null, maxDate: D | null): number {\r\n  const activeYear = dateAdapter.getYear(activeDate);\r\n  return euclideanModulo((activeYear - getStartingYear(dateAdapter, minDate, maxDate)),\r\n    yearsPerPage);\r\n}\r\n\r\n/**\r\n * We pick a \"starting\" year such that either the maximum year would be at the end\r\n * or the minimum year would be at the beginning of a page.\r\n */\r\nfunction getStartingYear<D>(\r\n  dateAdapter: NgxMatDateAdapter<D>, minDate: D | null, maxDate: D | null): number {\r\n  let startingYear = 0;\r\n  if (maxDate) {\r\n    const maxYear = dateAdapter.getYear(maxDate);\r\n    startingYear = maxYear - yearsPerPage + 1;\r\n  } else if (minDate) {\r\n    startingYear = dateAdapter.getYear(minDate);\r\n  }\r\n  return startingYear;\r\n}\r\n\r\n/** Gets remainder that is non-negative, even if first number is negative */\r\nfunction euclideanModulo (a: number, b: number): number {\r\n  return (a % b + b) % b;\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {\r\n  DOWN_ARROW,\r\n  END,\r\n  ENTER,\r\n  HOME,\r\n  LEFT_ARROW,\r\n  PAGE_DOWN,\r\n  PAGE_UP,\r\n  RIGHT_ARROW,\r\n  UP_ARROW,\r\n  SPACE,\r\n} from '@angular/cdk/keycodes';\r\nimport {\r\n  AfterContentInit,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  EventEmitter,\r\n  Inject,\r\n  Input,\r\n  Optional,\r\n  Output,\r\n  ViewChild,\r\n  ViewEncapsulation,\r\n  OnDestroy,\r\n} from '@angular/core';\r\nimport { Directionality } from '@angular/cdk/bidi';\r\nimport { Subscription } from 'rxjs';\r\nimport { startWith } from 'rxjs/operators';\r\nimport { DateRange } from '@angular/material/datepicker';\r\nimport { NgxMatCalendarBody, NgxMatCalendarCell, NgxMatCalendarUserEvent } from './calendar-body';\r\nimport { NGX_MAT_DATE_FORMATS, NgxMatDateFormats } from './core/date-formats';\r\nimport { NgxMatDateAdapter } from './core/date-adapter';\r\nimport { createMissingDateImplError } from './utils/date-utils';\r\n\r\n/**\r\n * An internal component used to display a single year in the datepicker.\r\n * @docs-private\r\n */\r\n@Component({\r\n  selector: 'ngx-mat-year-view',\r\n  templateUrl: 'year-view.html',\r\n  exportAs: 'ngxMatYearView',\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class NgxMatYearView<D> implements AfterContentInit, OnDestroy {\r\n  private _rerenderSubscription = Subscription.EMPTY;\r\n\r\n  /** The date to display in this year view (everything other than the year is ignored). */\r\n  @Input()\r\n  get activeDate(): D { return this._activeDate; }\r\n  set activeDate(value: D) {\r\n    let oldActiveDate = this._activeDate;\r\n    const validDate =\r\n      this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\r\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\r\n    if (this._dateAdapter.getYear(oldActiveDate) !== this._dateAdapter.getYear(this._activeDate)) {\r\n      this._init();\r\n    }\r\n  }\r\n  private _activeDate: D;\r\n\r\n  /** The currently selected date. */\r\n  @Input()\r\n  get selected(): DateRange<D> | D | null { return this._selected; }\r\n  set selected(value: DateRange<D> | D | null) {\r\n    if (value instanceof DateRange) {\r\n      this._selected = value;\r\n    } else {\r\n      this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\r\n    }\r\n\r\n    this._setSelectedMonth(value);\r\n  }\r\n  private _selected: DateRange<D> | D | null;\r\n\r\n  /** The minimum selectable date. */\r\n  @Input()\r\n  get minDate(): D | null { return this._minDate; }\r\n  set minDate(value: D | null) {\r\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\r\n  }\r\n  private _minDate: D | null;\r\n\r\n  /** The maximum selectable date. */\r\n  @Input()\r\n  get maxDate(): D | null { return this._maxDate; }\r\n  set maxDate(value: D | null) {\r\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\r\n  }\r\n  private _maxDate: D | null;\r\n\r\n  /** A function used to filter which dates are selectable. */\r\n  @Input() dateFilter: (date: D) => boolean;\r\n\r\n  /** Emits when a new month is selected. */\r\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\r\n\r\n  /** Emits the selected month. This doesn't imply a change on the selected date */\r\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\r\n\r\n  /** Emits when any date is activated. */\r\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\r\n\r\n  /** The body of calendar table */\r\n  @ViewChild(NgxMatCalendarBody) _matCalendarBody: NgxMatCalendarBody;\r\n\r\n  /** Grid of calendar cells representing the months of the year. */\r\n  _months: NgxMatCalendarCell[][];\r\n\r\n  /** The label for this year (e.g. \"2017\"). */\r\n  _yearLabel: string;\r\n\r\n  /** The month in this year that today falls on. Null if today is in a different year. */\r\n  _todayMonth: number | null;\r\n\r\n  /**\r\n   * The month in this year that the selected Date falls on.\r\n   * Null if the selected Date is in a different year.\r\n   */\r\n  _selectedMonth: number | null;\r\n\r\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\r\n    @Optional() @Inject(NGX_MAT_DATE_FORMATS) private _dateFormats: NgxMatDateFormats,\r\n    @Optional() public _dateAdapter: NgxMatDateAdapter<D>,\r\n    @Optional() private _dir?: Directionality) {\r\n    if (!this._dateAdapter) {\r\n      throw createMissingDateImplError('NgxMatDateAdapter');\r\n    }\r\n    if (!this._dateFormats) {\r\n      throw createMissingDateImplError('NGX_MAT_DATE_FORMATS');\r\n    }\r\n\r\n    this._activeDate = this._dateAdapter.today();\r\n  }\r\n\r\n  ngAfterContentInit() {\r\n    this._rerenderSubscription = this._dateAdapter.localeChanges\r\n      .pipe(startWith(null))\r\n      .subscribe(() => this._init());\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._rerenderSubscription.unsubscribe();\r\n  }\r\n\r\n  /** Handles when a new month is selected. */\r\n  _monthSelected(event: NgxMatCalendarUserEvent<number>) {\r\n    const month = event.value;\r\n    const normalizedDate =\r\n      this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1);\r\n\r\n    this.monthSelected.emit(normalizedDate);\r\n\r\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(normalizedDate);\r\n\r\n    this.selectedChange.emit(this._dateAdapter.createDate(\r\n      this._dateAdapter.getYear(this.activeDate), month,\r\n      Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\r\n  }\r\n\r\n  /** Handles keydown events on the calendar body when calendar is in year view. */\r\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\r\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\r\n    // disabled ones from being selected. This may not be ideal, we should look into whether\r\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\r\n\r\n    const oldActiveDate = this._activeDate;\r\n    const isRtl = this._isRtl();\r\n\r\n    switch (event.keyCode) {\r\n      case LEFT_ARROW:\r\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? 1 : -1);\r\n        break;\r\n      case RIGHT_ARROW:\r\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? -1 : 1);\r\n        break;\r\n      case UP_ARROW:\r\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, -4);\r\n        break;\r\n      case DOWN_ARROW:\r\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, 4);\r\n        break;\r\n      case HOME:\r\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\r\n          -this._dateAdapter.getMonth(this._activeDate));\r\n        break;\r\n      case END:\r\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\r\n          11 - this._dateAdapter.getMonth(this._activeDate));\r\n        break;\r\n      case PAGE_UP:\r\n        this.activeDate =\r\n          this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? -10 : -1);\r\n        break;\r\n      case PAGE_DOWN:\r\n        this.activeDate =\r\n          this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? 10 : 1);\r\n        break;\r\n      case ENTER:\r\n      case SPACE:\r\n        this._monthSelected({ value: this._dateAdapter.getMonth(this._activeDate), event });\r\n        break;\r\n      default:\r\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\r\n        return;\r\n    }\r\n\r\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\r\n      this.activeDateChange.emit(this.activeDate);\r\n    }\r\n\r\n    this._focusActiveCell();\r\n    // Prevent unexpected default actions such as form submission.\r\n    event.preventDefault();\r\n  }\r\n\r\n  /** Initializes this year view. */\r\n  _init() {\r\n    this._setSelectedMonth(this.selected);\r\n    this._todayMonth = this._getMonthInCurrentYear(this._dateAdapter.today());\r\n    this._yearLabel = this._dateAdapter.getYearName(this.activeDate);\r\n\r\n    let monthNames = this._dateAdapter.getMonthNames('short');\r\n    // First row of months only contains 5 elements so we can fit the year label on the same row.\r\n    this._months = [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]].map(row => row.map(\r\n      month => this._createCellForMonth(month, monthNames[month])));\r\n    this._changeDetectorRef.markForCheck();\r\n  }\r\n\r\n  /** Focuses the active cell after the microtask queue is empty. */\r\n  _focusActiveCell() {\r\n    this._matCalendarBody._focusActiveCell();\r\n  }\r\n\r\n  /**\r\n   * Gets the month in this year that the given Date falls on.\r\n   * Returns null if the given Date is in another year.\r\n   */\r\n  private _getMonthInCurrentYear(date: D | null) {\r\n    return date && this._dateAdapter.getYear(date) == this._dateAdapter.getYear(this.activeDate) ?\r\n      this._dateAdapter.getMonth(date) : null;\r\n  }\r\n\r\n  /** Creates an MatCalendarCell for the given month. */\r\n  private _createCellForMonth(month: number, monthName: string) {\r\n    let ariaLabel = this._dateAdapter.format(\r\n      this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1),\r\n      this._dateFormats.display.monthYearA11yLabel);\r\n    return new NgxMatCalendarCell(\r\n      month, monthName.toLocaleUpperCase(), ariaLabel, this._shouldEnableMonth(month));\r\n  }\r\n\r\n  /** Whether the given month is enabled. */\r\n  private _shouldEnableMonth(month: number) {\r\n\r\n    const activeYear = this._dateAdapter.getYear(this.activeDate);\r\n\r\n    if (month === undefined || month === null ||\r\n      this._isYearAndMonthAfterMaxDate(activeYear, month) ||\r\n      this._isYearAndMonthBeforeMinDate(activeYear, month)) {\r\n      return false;\r\n    }\r\n\r\n    if (!this.dateFilter) {\r\n      return true;\r\n    }\r\n\r\n    const firstOfMonth = this._dateAdapter.createDate(activeYear, month, 1);\r\n\r\n    // If any date in the month is enabled count the month as enabled.\r\n    for (let date = firstOfMonth; this._dateAdapter.getMonth(date) == month;\r\n      date = this._dateAdapter.addCalendarDays(date, 1)) {\r\n      if (this.dateFilter(date)) {\r\n        return true;\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Tests whether the combination month/year is after this.maxDate, considering\r\n   * just the month and year of this.maxDate\r\n   */\r\n  private _isYearAndMonthAfterMaxDate(year: number, month: number) {\r\n    if (this.maxDate) {\r\n      const maxYear = this._dateAdapter.getYear(this.maxDate);\r\n      const maxMonth = this._dateAdapter.getMonth(this.maxDate);\r\n\r\n      return year > maxYear || (year === maxYear && month > maxMonth);\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Tests whether the combination month/year is before this.minDate, considering\r\n   * just the month and year of this.minDate\r\n   */\r\n  private _isYearAndMonthBeforeMinDate(year: number, month: number) {\r\n    if (this.minDate) {\r\n      const minYear = this._dateAdapter.getYear(this.minDate);\r\n      const minMonth = this._dateAdapter.getMonth(this.minDate);\r\n\r\n      return year < minYear || (year === minYear && month < minMonth);\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * @param obj The object to check.\r\n   * @returns The given object if it is both a date instance and valid, otherwise null.\r\n   */\r\n  private _getValidDateOrNull(obj: any): D | null {\r\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\r\n  }\r\n\r\n  /** Determines whether the user has the RTL layout direction. */\r\n  private _isRtl() {\r\n    return this._dir && this._dir.value === 'rtl';\r\n  }\r\n\r\n  /** Sets the currently-selected month based on a model value. */\r\n  private _setSelectedMonth(value: DateRange<D> | D | null) {\r\n    if (value instanceof DateRange) {\r\n      this._selectedMonth = this._getMonthInCurrentYear(value.start) ||\r\n        this._getMonthInCurrentYear(value.end);\r\n    } else {\r\n      this._selectedMonth = this._getMonthInCurrentYear(value);\r\n    }\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport { ComponentPortal, ComponentType, Portal } from '@angular/cdk/portal';\r\nimport { AfterContentInit, AfterViewChecked, ChangeDetectionStrategy, ChangeDetectorRef, Component, EventEmitter, forwardRef, Inject, Input, OnChanges, OnDestroy, Optional, Output, SimpleChanges, ViewChild, ViewEncapsulation } from '@angular/core';\r\nimport { MatCalendarCellCssClasses, MatDatepickerIntl } from '@angular/material/datepicker';\r\nimport { Subject, Subscription } from 'rxjs';\r\nimport { NgxMatDateAdapter } from './core/date-adapter';\r\nimport { NgxMatDateFormats, NGX_MAT_DATE_FORMATS } from './core/date-formats';\r\nimport { NgxMatMonthView } from './month-view';\r\nimport { getActiveOffset, isSameMultiYearView, NgxMatMultiYearView, yearsPerPage } from './multi-year-view';\r\nimport { createMissingDateImplError, formatYearRange } from './utils/date-utils';\r\nimport { NgxMatYearView } from './year-view';\r\n\r\n/**\r\n * Possible views for the calendar.\r\n * @docs-private\r\n */\r\nexport type MatCalendarView = 'month' | 'year' | 'multi-year';\r\n\r\n/** Default header for NgxMatCalendar */\r\n@Component({\r\n  selector: 'ngx-mat-calendar-header',\r\n  templateUrl: 'calendar-header.html',\r\n  exportAs: 'ngxMatCalendarHeader',\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class NgxMatCalendarHeader<D> {\r\n  constructor(private _intl: MatDatepickerIntl,\r\n    @Inject(forwardRef(() => NgxMatCalendar)) public calendar: NgxMatCalendar<D>,\r\n    @Optional() private _dateAdapter: NgxMatDateAdapter<D>,\r\n    @Optional() @Inject(NGX_MAT_DATE_FORMATS) private _dateFormats: NgxMatDateFormats,\r\n    changeDetectorRef: ChangeDetectorRef) {\r\n\r\n    this.calendar.stateChanges.subscribe(() => changeDetectorRef.markForCheck());\r\n  }\r\n\r\n  /** The label for the current calendar view. */\r\n  get periodButtonText(): string {\r\n    if (this.calendar.currentView == 'month') {\r\n      return this._dateAdapter\r\n        .format(this.calendar.activeDate, this._dateFormats.display.monthYearLabel)\r\n        .toLocaleUpperCase();\r\n    }\r\n    if (this.calendar.currentView == 'year') {\r\n      return this._dateAdapter.getYearName(this.calendar.activeDate);\r\n    }\r\n\r\n    // The offset from the active year to the \"slot\" for the starting year is the\r\n    // *actual* first rendered year in the multi-year view, and the last year is\r\n    // just yearsPerPage - 1 away.\r\n    const activeYear = this._dateAdapter.getYear(this.calendar.activeDate);\r\n    const minYearOfPage = activeYear - getActiveOffset(\r\n      this._dateAdapter, this.calendar.activeDate, this.calendar.minDate, this.calendar.maxDate);\r\n    const maxYearOfPage = minYearOfPage + yearsPerPage - 1;\r\n    const minYearName =\r\n      this._dateAdapter.getYearName(this._dateAdapter.createDate(minYearOfPage, 0, 1));\r\n    const maxYearName =\r\n      this._dateAdapter.getYearName(this._dateAdapter.createDate(maxYearOfPage, 0, 1));\r\n    return formatYearRange(minYearName, maxYearName);\r\n  }\r\n\r\n  get periodButtonLabel(): string {\r\n    return this.calendar.currentView == 'month' ?\r\n      this._intl.switchToMultiYearViewLabel : this._intl.switchToMonthViewLabel;\r\n  }\r\n\r\n  /** The label for the previous button. */\r\n  get prevButtonLabel(): string {\r\n    return {\r\n      'month': this._intl.prevMonthLabel,\r\n      'year': this._intl.prevYearLabel,\r\n      'multi-year': this._intl.prevMultiYearLabel\r\n    }[this.calendar.currentView];\r\n  }\r\n\r\n  /** The label for the next button. */\r\n  get nextButtonLabel(): string {\r\n    return {\r\n      'month': this._intl.nextMonthLabel,\r\n      'year': this._intl.nextYearLabel,\r\n      'multi-year': this._intl.nextMultiYearLabel\r\n    }[this.calendar.currentView];\r\n  }\r\n\r\n  /** Handles user clicks on the period label. */\r\n  currentPeriodClicked(): void {\r\n    this.calendar.currentView = this.calendar.currentView == 'month' ? 'multi-year' : 'month';\r\n  }\r\n\r\n  /** Handles user clicks on the previous button. */\r\n  previousClicked(): void {\r\n    this.calendar.activeDate = this.calendar.currentView == 'month' ?\r\n      this._dateAdapter.addCalendarMonths(this.calendar.activeDate, -1) :\r\n      this._dateAdapter.addCalendarYears(\r\n        this.calendar.activeDate, this.calendar.currentView == 'year' ? -1 : -yearsPerPage\r\n      );\r\n  }\r\n\r\n  /** Handles user clicks on the next button. */\r\n  nextClicked(): void {\r\n    this.calendar.activeDate = this.calendar.currentView == 'month' ?\r\n      this._dateAdapter.addCalendarMonths(this.calendar.activeDate, 1) :\r\n      this._dateAdapter.addCalendarYears(\r\n        this.calendar.activeDate,\r\n        this.calendar.currentView == 'year' ? 1 : yearsPerPage\r\n      );\r\n  }\r\n\r\n  /** Whether the previous period button is enabled. */\r\n  previousEnabled(): boolean {\r\n    if (!this.calendar.minDate) {\r\n      return true;\r\n    }\r\n    return !this.calendar.minDate ||\r\n      !this._isSameView(this.calendar.activeDate, this.calendar.minDate);\r\n  }\r\n\r\n  /** Whether the next period button is enabled. */\r\n  nextEnabled(): boolean {\r\n    return !this.calendar.maxDate ||\r\n      !this._isSameView(this.calendar.activeDate, this.calendar.maxDate);\r\n  }\r\n\r\n  /** Whether the two dates represent the same view in the current view mode (month or year). */\r\n  private _isSameView(date1: D, date2: D): boolean {\r\n    if (this.calendar.currentView == 'month') {\r\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2) &&\r\n        this._dateAdapter.getMonth(date1) == this._dateAdapter.getMonth(date2);\r\n    }\r\n    if (this.calendar.currentView == 'year') {\r\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2);\r\n    }\r\n    // Otherwise we are in 'multi-year' view.\r\n    return isSameMultiYearView(\r\n      this._dateAdapter, date1, date2, this.calendar.minDate, this.calendar.maxDate);\r\n  }\r\n}\r\n\r\n/**\r\n * A calendar that is used as part of the datepicker.\r\n * @docs-private\r\n */\r\n@Component({\r\n  selector: 'ngx-mat-calendar',\r\n  templateUrl: 'calendar.html',\r\n  styleUrls: ['calendar.scss'],\r\n  host: {\r\n    'class': 'mat-calendar',\r\n  },\r\n  exportAs: 'ngxMatCalendar',\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class NgxMatCalendar<D> implements AfterContentInit, AfterViewChecked, OnDestroy, OnChanges {\r\n  /** An input indicating the type of the header component, if set. */\r\n  @Input() headerComponent: ComponentType<any>;\r\n\r\n  /** A portal containing the header component type for this calendar. */\r\n  _calendarHeaderPortal: Portal<any>;\r\n\r\n  private _intlChanges: Subscription;\r\n\r\n  /**\r\n   * Used for scheduling that focus should be moved to the active cell on the next tick.\r\n   * We need to schedule it, rather than do it immediately, because we have to wait\r\n   * for Angular to re-evaluate the view children.\r\n   */\r\n  private _moveFocusOnNextTick = false;\r\n\r\n  /** A date representing the period (month or year) to start the calendar in. */\r\n  @Input()\r\n  get startAt(): D | null { return this._startAt; }\r\n  set startAt(value: D | null) {\r\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\r\n  }\r\n  private _startAt: D | null;\r\n\r\n  /** Whether the calendar should be started in month or year view. */\r\n  @Input() startView: MatCalendarView = 'month';\r\n\r\n  /** The currently selected date. */\r\n  @Input()\r\n  get selected(): D | null { return this._selected; }\r\n  set selected(value: D | null) {\r\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\r\n  }\r\n  private _selected: D | null;\r\n\r\n  /** The minimum selectable date. */\r\n  @Input()\r\n  get minDate(): D | null { return this._minDate; }\r\n  set minDate(value: D | null) {\r\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\r\n  }\r\n  private _minDate: D | null;\r\n\r\n  /** The maximum selectable date. */\r\n  @Input()\r\n  get maxDate(): D | null { return this._maxDate; }\r\n  set maxDate(value: D | null) {\r\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\r\n  }\r\n  private _maxDate: D | null;\r\n\r\n  /** Function used to filter which dates are selectable. */\r\n  @Input() dateFilter: (date: D) => boolean;\r\n\r\n  /** Function that can be used to add custom CSS classes to dates. */\r\n  @Input() dateClass: (date: D) => MatCalendarCellCssClasses;\r\n\r\n  /** Emits when the currently selected date changes. */\r\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\r\n\r\n  /**\r\n   * Emits the year chosen in multiyear view.\r\n   * This doesn't imply a change on the selected date.\r\n   */\r\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\r\n\r\n  /**\r\n   * Emits the month chosen in year view.\r\n   * This doesn't imply a change on the selected date.\r\n   */\r\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\r\n\r\n  /** Emits when any date is selected. */\r\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\r\n\r\n  /** Reference to the current month view component. */\r\n  @ViewChild(NgxMatMonthView) monthView: NgxMatMonthView<D>;\r\n\r\n  /** Reference to the current year view component. */\r\n  @ViewChild(NgxMatYearView) yearView: NgxMatYearView<D>;\r\n\r\n  /** Reference to the current multi-year view component. */\r\n  @ViewChild(NgxMatMultiYearView) multiYearView: NgxMatMultiYearView<D>;\r\n\r\n  /**\r\n   * The current active date. This determines which time period is shown and which date is\r\n   * highlighted when using keyboard navigation.\r\n   */\r\n  get activeDate(): D { return this._clampedActiveDate; }\r\n  set activeDate(value: D) {\r\n    this._clampedActiveDate = this._dateAdapter.clampDate(value, this.minDate, this.maxDate);\r\n    this.stateChanges.next();\r\n    this._changeDetectorRef.markForCheck();\r\n  }\r\n  private _clampedActiveDate: D;\r\n\r\n  /** Whether the calendar is in month view. */\r\n  get currentView(): MatCalendarView { return this._currentView; }\r\n  set currentView(value: MatCalendarView) {\r\n    this._currentView = value;\r\n    this._moveFocusOnNextTick = true;\r\n    this._changeDetectorRef.markForCheck();\r\n  }\r\n  private _currentView: MatCalendarView;\r\n\r\n  /**\r\n   * Emits whenever there is a state change that the header may need to respond to.\r\n   */\r\n  stateChanges = new Subject<void>();\r\n\r\n  constructor(_intl: MatDatepickerIntl,\r\n    @Optional() private _dateAdapter: NgxMatDateAdapter<D>,\r\n    @Optional() @Inject(NGX_MAT_DATE_FORMATS) private _dateFormats: NgxMatDateFormats,\r\n    private _changeDetectorRef: ChangeDetectorRef) {\r\n\r\n    if (!this._dateAdapter) {\r\n      throw createMissingDateImplError('NgxDateAdapter');\r\n    }\r\n\r\n    if (!this._dateFormats) {\r\n      throw createMissingDateImplError('NGX_MAT_DATE_FORMATS');\r\n    }\r\n\r\n    this._intlChanges = _intl.changes.subscribe(() => {\r\n      _changeDetectorRef.markForCheck();\r\n      this.stateChanges.next();\r\n    });\r\n  }\r\n\r\n  ngAfterContentInit() {\r\n    this._calendarHeaderPortal = new ComponentPortal(this.headerComponent || NgxMatCalendarHeader);\r\n    this.activeDate = this.startAt || this._dateAdapter.today();\r\n\r\n    // Assign to the private property since we don't want to move focus on init.\r\n    this._currentView = this.startView;\r\n  }\r\n\r\n  ngAfterViewChecked() {\r\n    if (this._moveFocusOnNextTick) {\r\n      this._moveFocusOnNextTick = false;\r\n      this.focusActiveCell();\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._intlChanges.unsubscribe();\r\n    this.stateChanges.complete();\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    const change =\r\n      changes['minDate'] || changes['maxDate'] || changes['dateFilter'];\r\n\r\n    if (change && !change.firstChange) {\r\n      const view = this._getCurrentViewComponent();\r\n\r\n      if (view) {\r\n        // We need to `detectChanges` manually here, because the `minDate`, `maxDate` etc. are\r\n        // passed down to the view via data bindings which won't be up-to-date when we call `_init`.\r\n        this._changeDetectorRef.detectChanges();\r\n        view._init();\r\n      }\r\n    }\r\n\r\n    this.stateChanges.next();\r\n  }\r\n\r\n  focusActiveCell() {\r\n    this._getCurrentViewComponent()._focusActiveCell();\r\n  }\r\n\r\n  /** Updates today's date after an update of the active date */\r\n  updateTodaysDate() {\r\n    let view = this.currentView == 'month' ? this.monthView :\r\n      (this.currentView == 'year' ? this.yearView : this.multiYearView);\r\n\r\n    view.ngAfterContentInit();\r\n  }\r\n\r\n  /** Handles date selection in the month view. */\r\n  _dateSelected(date: D | null): void {\r\n    if (date && !this._dateAdapter.sameDate(date, this.selected)) {\r\n      this.selectedChange.emit(date);\r\n    }\r\n  }\r\n\r\n  /** Handles year selection in the multiyear view. */\r\n  _yearSelectedInMultiYearView(normalizedYear: D) {\r\n    this.yearSelected.emit(normalizedYear);\r\n  }\r\n\r\n  /** Handles month selection in the year view. */\r\n  _monthSelectedInYearView(normalizedMonth: D) {\r\n    this.monthSelected.emit(normalizedMonth);\r\n  }\r\n\r\n  _userSelected(): void {\r\n    this._userSelection.emit();\r\n  }\r\n\r\n  /** Handles year/month selection in the multi-year/year views. */\r\n  _goToDateInView(date: D, view: 'month' | 'year' | 'multi-year'): void {\r\n    this.activeDate = date;\r\n    this.currentView = view;\r\n  }\r\n\r\n  /**\r\n   * @param obj The object to check.\r\n   * @returns The given object if it is both a date instance and valid, otherwise null.\r\n   */\r\n  private _getValidDateOrNull(obj: any): D | null {\r\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\r\n  }\r\n\r\n  /** Returns the component instance that corresponds to the current calendar view. */\r\n  private _getCurrentViewComponent() {\r\n    return this.monthView || this.yearView || this.multiYearView;\r\n  }\r\n}\r\n","import { ChangeDetectorRef, Component, forwardRef, Input, OnChanges, OnInit, Optional, SimpleChanges, ViewEncapsulation } from '@angular/core';\r\nimport { ControlValueAccessor, FormBuilder, FormGroup, NG_VALUE_ACCESSOR, Validators } from '@angular/forms';\r\nimport { ThemePalette } from '@angular/material/core';\r\nimport { Subject } from 'rxjs';\r\nimport { debounceTime, takeUntil } from 'rxjs/operators';\r\nimport { NgxMatDateAdapter } from './core/date-adapter';\r\nimport { createMissingDateImplError, DEFAULT_STEP, formatTwoDigitTimeValue, LIMIT_TIMES, MERIDIANS, NUMERIC_REGEX, PATTERN_INPUT_HOUR, PATTERN_INPUT_MINUTE, PATTERN_INPUT_SECOND } from './utils/date-utils';\r\n\r\n@Component({\r\n  selector: 'ngx-mat-timepicker',\r\n  templateUrl: './timepicker.component.html',\r\n  styleUrls: ['./timepicker.component.scss'],\r\n  host: {\r\n    'class': 'ngx-mat-timepicker'\r\n  },\r\n  providers: [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      useExisting: forwardRef(() => NgxMatTimepickerComponent),\r\n      multi: true\r\n    }\r\n  ],\r\n  exportAs: 'ngxMatTimepicker',\r\n  encapsulation: ViewEncapsulation.None,\r\n})\r\nexport class NgxMatTimepickerComponent<D> implements ControlValueAccessor, OnInit, OnChanges {\r\n\r\n  public form: FormGroup;\r\n\r\n  @Input() disabled = false;\r\n  @Input() showSpinners = true;\r\n  @Input() stepHour: number = DEFAULT_STEP;\r\n  @Input() stepMinute: number = DEFAULT_STEP;\r\n  @Input() stepSecond: number = DEFAULT_STEP;\r\n  @Input() showSeconds = false;\r\n  @Input() disableMinute = false;\r\n  @Input() enableMeridian = false;\r\n  @Input() defaultTime: number[];\r\n  @Input() color: ThemePalette = 'primary';\r\n\r\n  public meridian: string = MERIDIANS.AM;\r\n\r\n  /** Hour */\r\n  private get hour() {\r\n    let val = Number(this.form.controls['hour'].value);\r\n    return isNaN(val) ? 0 : val;\r\n  };\r\n\r\n  private get minute() {\r\n    let val = Number(this.form.controls['minute'].value);\r\n    return isNaN(val) ? 0 : val;\r\n  };\r\n\r\n  private get second() {\r\n    let val = Number(this.form.controls['second'].value);\r\n    return isNaN(val) ? 0 : val;\r\n  };\r\n\r\n  /** Whether or not the form is valid */\r\n  public get valid(): boolean {\r\n    return this.form.valid;\r\n  }\r\n\r\n  private _onChange: any = () => { };\r\n  private _onTouched: any = () => { };\r\n  private _disabled: boolean;\r\n  private _model: D;\r\n\r\n  private _destroyed: Subject<void> = new Subject<void>();\r\n\r\n  public pattern = PATTERN_INPUT_HOUR;\r\n\r\n  constructor(@Optional() public _dateAdapter: NgxMatDateAdapter<D>,\r\n    private cd: ChangeDetectorRef, private formBuilder: FormBuilder) {\r\n    if (!this._dateAdapter) {\r\n      throw createMissingDateImplError('NgxMatDateAdapter');\r\n    }\r\n    this.form = this.formBuilder.group(\r\n      {\r\n        hour: [{ value: null, disabled: this.disabled }, [Validators.required, Validators.pattern(PATTERN_INPUT_HOUR)]],\r\n        minute: [{ value: null, disabled: this.disabled }, [Validators.required, Validators.pattern(PATTERN_INPUT_MINUTE)]],\r\n        second: [{ value: null, disabled: this.disabled }, [Validators.required, Validators.pattern(PATTERN_INPUT_SECOND)]]\r\n      });\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.form.valueChanges.pipe(takeUntil(this._destroyed), debounceTime(400)).subscribe(val => {\r\n      this._updateModel();\r\n    })\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    if (changes.disabled || changes.disableMinute) {\r\n      this._setDisableStates();\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._destroyed.next();\r\n    this._destroyed.complete();\r\n  }\r\n\r\n  /**\r\n   * Writes a new value to the element.\r\n   * @param obj\r\n   */\r\n  writeValue(val: D): void {\r\n    if (val != null) {\r\n      this._model = val;\r\n    } else {\r\n      this._model = this._dateAdapter.today();\r\n      if (this.defaultTime != null) {\r\n        this._dateAdapter.setTimeByDefaultValues(this._model, this.defaultTime);\r\n      }\r\n    }\r\n    this._updateHourMinuteSecond();\r\n  }\r\n\r\n  /** Registers a callback function that is called when the control's value changes in the UI. */\r\n  registerOnChange(fn: (_: any) => {}): void {\r\n    this._onChange = fn;\r\n  }\r\n\r\n  /**\r\n   * Set the function to be called when the control receives a touch event.\r\n   */\r\n  registerOnTouched(fn: () => {}): void {\r\n    this._onTouched = fn;\r\n  }\r\n\r\n  /** Enables or disables the appropriate DOM element */\r\n  setDisabledState(isDisabled: boolean): void {\r\n    this._disabled = isDisabled;\r\n    this.cd.markForCheck();\r\n  }\r\n\r\n  /**\r\n   * Format input\r\n   * @param input \r\n   */\r\n  public formatInput(input: HTMLInputElement) {\r\n    input.value = input.value.replace(NUMERIC_REGEX, '');\r\n  }\r\n\r\n  /** Toggle meridian */\r\n  public toggleMeridian() {\r\n    this.meridian = (this.meridian === MERIDIANS.AM) ? MERIDIANS.PM : MERIDIANS.AM;\r\n    this.change('hour');\r\n  }\r\n\r\n  /** Change property of time */\r\n  public change(prop: string, up?: boolean) {\r\n    const next = this._getNextValueByProp(prop, up);\r\n    this.form.controls[prop].setValue(formatTwoDigitTimeValue(next), { onlySelf: false, emitEvent: false });\r\n    this._updateModel();\r\n  }\r\n\r\n  /** Update controls of form by model */\r\n  private _updateHourMinuteSecond() {\r\n    let _hour = this._dateAdapter.getHour(this._model);\r\n    const _minute = this._dateAdapter.getMinute(this._model);\r\n    const _second = this._dateAdapter.getSecond(this._model);\r\n\r\n    if (this.enableMeridian) {\r\n      if (_hour >= LIMIT_TIMES.meridian) {\r\n        _hour = _hour - LIMIT_TIMES.meridian;\r\n        this.meridian = MERIDIANS.PM;\r\n      } else {\r\n        this.meridian = MERIDIANS.AM;\r\n      }\r\n      if (_hour === 0) {\r\n        _hour = LIMIT_TIMES.meridian;\r\n      }\r\n    }\r\n\r\n    this.form.controls['hour'].setValue(formatTwoDigitTimeValue(_hour));\r\n    this.form.controls['minute'].setValue(formatTwoDigitTimeValue(_minute));\r\n    this.form.controls['second'].setValue(formatTwoDigitTimeValue(_second));\r\n  }\r\n\r\n  /** Update model */\r\n  private _updateModel() {\r\n    let _hour = this.hour;\r\n\r\n    if (this.enableMeridian) {\r\n      if (this.meridian === MERIDIANS.AM && _hour === LIMIT_TIMES.meridian) {\r\n        _hour = 0;\r\n      } else if (this.meridian === MERIDIANS.PM && _hour !== LIMIT_TIMES.meridian) {\r\n        _hour = _hour + LIMIT_TIMES.meridian;\r\n      }\r\n    }\r\n\r\n    this._dateAdapter.setHour(this._model, _hour);\r\n    this._dateAdapter.setMinute(this._model, this.minute);\r\n    this._dateAdapter.setSecond(this._model, this.second);\r\n    this._onChange(this._model);\r\n  }\r\n\r\n  /**\r\n   * Get next value by property\r\n   * @param prop \r\n   * @param up\r\n   */\r\n  private _getNextValueByProp(prop: string, up?: boolean): number {\r\n    const keyProp = prop[0].toUpperCase() + prop.slice(1);\r\n    const min = LIMIT_TIMES[`min${keyProp}`];\r\n    let max = LIMIT_TIMES[`max${keyProp}`];\r\n\r\n    if (prop === 'hour' && this.enableMeridian) {\r\n      max = LIMIT_TIMES.meridian;\r\n    }\r\n\r\n    let next;\r\n    if (up == null) {\r\n      next = this[prop] % (max);\r\n      if (prop === 'hour' && this.enableMeridian) {\r\n        if (next === 0) next = max;\r\n      }\r\n    } else {\r\n      next = up ? this[prop] + this[`step${keyProp}`] : this[prop] - this[`step${keyProp}`];\r\n      if (prop === 'hour' && this.enableMeridian) {\r\n        next = next % (max + 1);\r\n        if (next === 0) next = up ? 1 : max;\r\n      } else {\r\n        next = next % max;\r\n      }\r\n      if (up) {\r\n        next = next > max ? (next - max + min) : next;\r\n      } else {\r\n        next = next < min ? (next - min + max) : next;\r\n      }\r\n\r\n    }\r\n\r\n    return next;\r\n  }\r\n\r\n  /**\r\n   * Set disable states\r\n   */\r\n  private _setDisableStates() {\r\n    if (this.disabled) {\r\n      this.form.disable();\r\n    }\r\n    else {\r\n      this.form.enable();\r\n      if (this.disableMinute) {\r\n        this.form.get('minute').disable();\r\n        if (this.showSeconds) {\r\n          this.form.get('second').disable();\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport { Directionality } from '@angular/cdk/bidi';\r\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\r\nimport { ESCAPE, UP_ARROW } from '@angular/cdk/keycodes';\r\nimport { Overlay, OverlayConfig, OverlayRef, PositionStrategy, ScrollStrategy } from '@angular/cdk/overlay';\r\nimport { ComponentPortal, ComponentType, TemplatePortal } from '@angular/cdk/portal';\r\nimport { DOCUMENT } from '@angular/common';\r\nimport { AfterViewInit, ChangeDetectionStrategy, ChangeDetectorRef, Component, ComponentRef, ContentChild, ElementRef, EventEmitter, Inject, Input, NgZone, OnDestroy, Optional, Output, TemplateRef, ViewChild, ViewContainerRef, ViewEncapsulation } from '@angular/core';\r\nimport { ValidationErrors } from '@angular/forms';\r\nimport { CanColor, CanColorCtor, mixinColor, ThemePalette } from '@angular/material/core';\r\nimport { MatCalendarCellCssClasses, matDatepickerAnimations, MAT_DATEPICKER_SCROLL_STRATEGY } from '@angular/material/datepicker';\r\nimport { MatDialog, MatDialogRef } from '@angular/material/dialog';\r\nimport { merge, Subject, Subscription } from 'rxjs';\r\nimport { filter, take } from 'rxjs/operators';\r\nimport { NgxMatCalendar } from './calendar';\r\nimport { NgxMatDateAdapter } from './core/date-adapter';\r\nimport { NgxMatDatetimeInput } from './datetime-input';\r\nimport { NgxMatTimepickerComponent } from './timepicker.component';\r\nimport { createMissingDateImplError, DEFAULT_STEP } from './utils/date-utils';\r\n\r\n/** Used to generate a unique ID for each datepicker instance. */\r\nlet datepickerUid = 0;\r\n\r\n// Boilerplate for applying mixins to MatDatepickerContent.\r\n/** @docs-private */\r\nclass MatDatepickerContentBase {\r\n  constructor(public _elementRef: ElementRef) { }\r\n}\r\nconst _MatDatepickerContentMixinBase: CanColorCtor & typeof MatDatepickerContentBase =\r\n  mixinColor(MatDatepickerContentBase);\r\n\r\n/**\r\n * Component used as the content for the datepicker dialog and popup. We use this instead of using\r\n * NgxMatCalendar directly as the content so we can control the initial focus. This also gives us a\r\n * place to put additional features of the popup that are not part of the calendar itself in the\r\n * future. (e.g. confirmation buttons).\r\n * @docs-private\r\n */\r\n@Component({\r\n  selector: 'ngx-mat-datetime-content',\r\n  templateUrl: 'datetime-content.component.html',\r\n  styleUrls: ['datetime-content.component.scss'],\r\n  host: {\r\n    'class': 'mat-datepicker-content',\r\n    '[@transformPanel]': '\"enter\"',\r\n    '[class.mat-datepicker-content-touch]': 'datepicker.touchUi',\r\n  },\r\n  animations: [\r\n    matDatepickerAnimations.transformPanel,\r\n    matDatepickerAnimations.fadeInCalendar,\r\n  ],\r\n  exportAs: 'ngxMatDatetimeContent',\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  inputs: ['color'],\r\n})\r\nexport class NgxMatDatetimeContent<D> extends _MatDatepickerContentMixinBase\r\n  implements AfterViewInit, CanColor {\r\n\r\n  /** Reference to the internal calendar component. */\r\n  @ViewChild(NgxMatCalendar) _calendar: NgxMatCalendar<D>;\r\n\r\n  /** Reference to the internal time picker component. */\r\n  @ViewChild(NgxMatTimepickerComponent) _timePicker: NgxMatTimepickerComponent<D>;\r\n\r\n  /** Reference to the datepicker that created the overlay. */\r\n  datepicker: NgxMatDatetimePicker<D>;\r\n\r\n  /** Whether the datepicker is above or below the input. */\r\n  _isAbove: boolean;\r\n\r\n  /** Whether or not the selected date is valid (min,max...) */\r\n  get valid(): boolean {\r\n    if (this.datepicker.hideTime) return this.datepicker.valid;\r\n    return this._timePicker && this._timePicker.valid && this.datepicker.valid;\r\n  }\r\n\r\n  get isViewMonth(): boolean {\r\n    if (!this._calendar || this._calendar.currentView == null) return true;\r\n    return this._calendar.currentView == 'month';\r\n  }\r\n\r\n  _templateCustomIconPortal: TemplatePortal<any>;\r\n\r\n  constructor(elementRef: ElementRef, private cd: ChangeDetectorRef,\r\n    private _viewContainerRef: ViewContainerRef) {\r\n    super(elementRef);\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    this._calendar.focusActiveCell();\r\n    if (this.datepicker._customIcon) {\r\n      this._templateCustomIconPortal = new TemplatePortal(\r\n        this.datepicker._customIcon,\r\n        this._viewContainerRef\r\n      );\r\n      this.cd.detectChanges();\r\n    }\r\n\r\n  }\r\n\r\n}\r\n\r\n// TODO(mmalerba): We use a component instead of a directive here so the user can use implicit\r\n// template reference variables (e.g. #d vs #d=\"matDatepicker\"). We can change this to a directive\r\n// if angular adds support for `exportAs: '$implicit'` on directives.\r\n/** Component responsible for managing the datepicker popup/dialog. */\r\n@Component({\r\n  selector: 'ngx-mat-datetime-picker',\r\n  template: '',\r\n  exportAs: 'ngxMatDatetimePicker',\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  encapsulation: ViewEncapsulation.None,\r\n})\r\nexport class NgxMatDatetimePicker<D> implements OnDestroy, CanColor {\r\n\r\n  private _scrollStrategy: () => ScrollStrategy;\r\n\r\n  /** An input indicating the type of the custom header component for the calendar, if set. */\r\n  @Input() calendarHeaderComponent: ComponentType<any>;\r\n\r\n  /** Custom icon set by the consumer. */\r\n  @ContentChild(TemplateRef) _customIcon: TemplateRef<any>;\r\n\r\n  /** The date to open the calendar to initially. */\r\n  @Input()\r\n  get startAt(): D | null {\r\n    // If an explicit startAt is set we start there, otherwise we start at whatever the currently\r\n    // selected value is.\r\n    return this._startAt || (this.datepickerInput ? this.datepickerInput.value : null);\r\n  }\r\n  set startAt(value: D | null) {\r\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\r\n  }\r\n  private _startAt: D | null;\r\n\r\n  /** The view that the calendar should start in. */\r\n  @Input() startView: 'month' | 'year' | 'multi-year' = 'month';\r\n\r\n  /** Default Color palette to use on the datepicker's calendar. */\r\n  @Input()\r\n  get defaultColor(): ThemePalette {\r\n    return this._defaultColor;\r\n  }\r\n  set defaultColor(value: ThemePalette) {\r\n    this._defaultColor = value;\r\n  }\r\n  _defaultColor: ThemePalette = 'primary';\r\n\r\n  /** Color palette to use on the datepicker's calendar. */\r\n  @Input()\r\n  get color(): ThemePalette {\r\n    return this._color ||\r\n      (this.datepickerInput ? this.datepickerInput._getThemePalette() : 'primary');\r\n  }\r\n  set color(value: ThemePalette) {\r\n    this._color = value;\r\n  }\r\n  _color: ThemePalette;\r\n\r\n  /**\r\n   * Whether the calendar UI is in touch mode. In touch mode the calendar opens in a dialog rather\r\n   * than a popup and elements have more padding to allow for bigger touch targets.\r\n   */\r\n  @Input()\r\n  get touchUi(): boolean { return this._touchUi; }\r\n  set touchUi(value: boolean) {\r\n    this._touchUi = coerceBooleanProperty(value);\r\n  }\r\n  private _touchUi = false;\r\n\r\n  @Input()\r\n  get hideTime(): boolean { return this._hideTime; }\r\n  set hideTime(value: boolean) {\r\n    this._hideTime = coerceBooleanProperty(value);\r\n  }\r\n  public _hideTime = false;\r\n\r\n  /** Whether the datepicker pop-up should be disabled. */\r\n  @Input()\r\n  get disabled(): boolean {\r\n    return this._disabled === undefined && this.datepickerInput ?\r\n      this.datepickerInput.disabled : !!this._disabled;\r\n  }\r\n  set disabled(value: boolean) {\r\n    const newValue = coerceBooleanProperty(value);\r\n\r\n    if (newValue !== this._disabled) {\r\n      this._disabled = newValue;\r\n      this.stateChanges.next(newValue);\r\n    }\r\n  }\r\n  public _disabled: boolean;\r\n\r\n  /**\r\n   * Emits selected year in multiyear view.\r\n   * This doesn't imply a change on the selected date.\r\n   */\r\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\r\n\r\n  /**\r\n   * Emits selected month in year view.\r\n   * This doesn't imply a change on the selected date.\r\n   */\r\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\r\n\r\n  /** Classes to be passed to the date picker panel. Supports the same syntax as `ngClass`. */\r\n  @Input() panelClass: string | string[];\r\n\r\n  /** Function that can be used to add custom CSS classes to dates. */\r\n  @Input() dateClass: (date: D) => MatCalendarCellCssClasses;\r\n\r\n  /** Emits when the datepicker has been opened. */\r\n  @Output('opened') openedStream: EventEmitter<void> = new EventEmitter<void>();\r\n\r\n  /** Emits when the datepicker has been closed. */\r\n  @Output('closed') closedStream: EventEmitter<void> = new EventEmitter<void>();\r\n\r\n\r\n  /** Whether the calendar is open. */\r\n  @Input()\r\n  get opened(): boolean { return this._opened; }\r\n  set opened(value: boolean) { value ? this.open() : this.close(); }\r\n  private _opened = false;\r\n\r\n  /** Whether the timepicker'spinners is shown. */\r\n  @Input()\r\n  get showSpinners(): boolean { return this._showSpinners; }\r\n  set showSpinners(value: boolean) { this._showSpinners = value; }\r\n  public _showSpinners = true;\r\n\r\n  /** Whether the second part is disabled. */\r\n  @Input()\r\n  get showSeconds(): boolean { return this._showSeconds; }\r\n  set showSeconds(value: boolean) { this._showSeconds = value; }\r\n  public _showSeconds = false;\r\n\r\n  /** Step hour */\r\n  @Input()\r\n  get stepHour(): number { return this._stepHour; }\r\n  set stepHour(value: number) { this._stepHour = value; }\r\n  public _stepHour: number = DEFAULT_STEP;\r\n\r\n  /** Step minute */\r\n  @Input()\r\n  get stepMinute(): number { return this._stepMinute; }\r\n  set stepMinute(value: number) { this._stepMinute = value; }\r\n  public _stepMinute: number = DEFAULT_STEP;\r\n\r\n  /** Step second */\r\n  @Input()\r\n  get stepSecond(): number { return this._stepSecond; }\r\n  set stepSecond(value: number) { this._stepSecond = value; }\r\n  public _stepSecond: number = DEFAULT_STEP;\r\n\r\n  /** Enable meridian */\r\n  @Input()\r\n  get enableMeridian(): boolean { return this._enableMeridian; }\r\n  set enableMeridian(value: boolean) { this._enableMeridian = value; }\r\n  public _enableMeridian: boolean = false;\r\n\r\n  /** disable minute */\r\n  @Input()\r\n  get disableMinute(): boolean { return this._disableMinute; }\r\n  set disableMinute(value: boolean) { this._disableMinute = value; }\r\n  public _disableMinute: boolean;\r\n\r\n  /** Step second */\r\n  @Input()\r\n  get defaultTime(): number[] { return this._defaultTime; }\r\n  set defaultTime(value: number[]) { this._defaultTime = value; }\r\n  public _defaultTime: number[];\r\n\r\n  private _hasBackdrop: boolean = true;\r\n\r\n  /** The id for the datepicker calendar. */\r\n  id: string = `mat-datepicker-${datepickerUid++}`;\r\n\r\n  /** The currently selected date. */\r\n  get _selected(): D | null { return this._validSelected; }\r\n  set _selected(value: D | null) { this._validSelected = value; }\r\n  private _validSelected: D | null = null;\r\n\r\n  /** The minimum selectable date. */\r\n  get _minDate(): D | null {\r\n    return this.datepickerInput && this.datepickerInput.min;\r\n  }\r\n\r\n  /** The maximum selectable date. */\r\n  get _maxDate(): D | null {\r\n    return this.datepickerInput && this.datepickerInput.max;\r\n  }\r\n\r\n  get valid(): boolean {\r\n    const minValidators = this._minValidator();\r\n    const maxValidators = this._maxValidator();\r\n    return minValidators == null && maxValidators == null;\r\n  }\r\n\r\n  get _dateFilter(): (date: D | null) => boolean {\r\n    return this.datepickerInput && this.datepickerInput._dateFilter;\r\n  }\r\n\r\n  /** A reference to the overlay when the calendar is opened as a popup. */\r\n  _popupRef: OverlayRef;\r\n\r\n  /** A reference to the dialog when the calendar is opened as a dialog. */\r\n  private _dialogRef: MatDialogRef<NgxMatDatetimeContent<D>> | null;\r\n\r\n  /** A portal containing the calendar for this datepicker. */\r\n  private _calendarPortal: ComponentPortal<NgxMatDatetimeContent<D>>;\r\n\r\n  /** Reference to the component instantiated in popup mode. */\r\n  private _popupComponentRef: ComponentRef<NgxMatDatetimeContent<D>> | null;\r\n\r\n  /** The element that was focused before the datepicker was opened. */\r\n  private _focusedElementBeforeOpen: HTMLElement | null = null;\r\n\r\n  /** Subscription to value changes in the associated input element. */\r\n  private _inputSubscription = Subscription.EMPTY;\r\n\r\n  /** The input element this datepicker is associated with. */\r\n  datepickerInput: NgxMatDatetimeInput<D>;\r\n\r\n  /** Emits when the datepicker is disabled. */\r\n  readonly stateChanges = new Subject<boolean>();\r\n\r\n  /** Emits new selected date when selected date changes. */\r\n  readonly _selectedChanged = new Subject<D>();\r\n\r\n  /** Raw value before  */\r\n  private _rawValue: D;\r\n\r\n  constructor(private _dialog: MatDialog,\r\n    private _overlay: Overlay,\r\n    private _ngZone: NgZone,\r\n    private _viewContainerRef: ViewContainerRef,\r\n    @Inject(MAT_DATEPICKER_SCROLL_STRATEGY) scrollStrategy: any,\r\n    @Optional() private _dateAdapter: NgxMatDateAdapter<D>,\r\n    @Optional() private _dir: Directionality,\r\n    @Optional() @Inject(DOCUMENT) private _document: any) {\r\n    if (!this._dateAdapter) {\r\n      throw createMissingDateImplError('NgxMatDateAdapter');\r\n    }\r\n\r\n    this._scrollStrategy = scrollStrategy;\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.close();\r\n\r\n    if (this._popupRef) {\r\n      this._popupRef.dispose();\r\n      this._popupComponentRef = null;\r\n    }\r\n    this._inputSubscription.unsubscribe();\r\n    this.stateChanges.complete();\r\n  }\r\n\r\n  /** The form control validator for the min date. */\r\n  private _minValidator = (): ValidationErrors | null => {\r\n    return (!this._minDate || !this._selected ||\r\n      this._dateAdapter.compareDateWithTime(this._minDate, this._selected, this.showSeconds) <= 0) ?\r\n      null : { 'matDatetimePickerMin': { 'min': this._minDate, 'actual': this._selected } };\r\n  }\r\n\r\n  /** The form control validator for the max date. */\r\n  private _maxValidator = (): ValidationErrors | null => {\r\n    return (!this._maxDate || !this._selected ||\r\n      this._dateAdapter.compareDateWithTime(this._maxDate, this._selected, this.showSeconds) >= 0) ?\r\n      null : { 'matDatetimePickerMax': { 'max': this._maxDate, 'actual': this._selected } };\r\n  }\r\n\r\n  /** Selects the given date */\r\n  select(date: D): void {\r\n    this._dateAdapter.copyTime(date, this._selected);\r\n    this._selected = date;\r\n  }\r\n\r\n  /** Emits the selected year in multiyear view */\r\n  _selectYear(normalizedYear: D): void {\r\n    this.yearSelected.emit(normalizedYear);\r\n  }\r\n\r\n  /** Emits selected month in year view */\r\n  _selectMonth(normalizedMonth: D): void {\r\n    this.monthSelected.emit(normalizedMonth);\r\n  }\r\n\r\n  /** OK button handler and close*/\r\n  public ok(): void {\r\n    const cloned = this._dateAdapter.clone(this._selected);\r\n    this._selectedChanged.next(cloned);\r\n    this.close();\r\n  }\r\n\r\n  /** Cancel and close */\r\n  public cancel(): void {\r\n    this._selected = this._rawValue;\r\n    this.close();\r\n  }\r\n\r\n  /**\r\n   * Register an input with this datepicker.\r\n   * @param input The datepicker input to register with this datepicker.\r\n   */\r\n  _registerInput(input: NgxMatDatetimeInput<D>): void {\r\n    if (this.datepickerInput) {\r\n      throw Error('A NgxMatDatepicker can only be associated with a single input.');\r\n    }\r\n    this.datepickerInput = input;\r\n    this._inputSubscription =\r\n      this.datepickerInput._valueChange.subscribe((value: D | null) => this._selected = value);\r\n  }\r\n\r\n  /** Open the calendar. */\r\n  open(): void {\r\n    this._rawValue = this._selected != null\r\n      ? this._dateAdapter.clone(this._selected) : null;\r\n\r\n    if (this._selected == null) {\r\n      this._selected = this._dateAdapter.today();\r\n      if (this.defaultTime != null) {\r\n        this._dateAdapter.setTimeByDefaultValues(this._selected, this.defaultTime);\r\n      }\r\n    }\r\n\r\n    if (this._opened || this.disabled) {\r\n      return;\r\n    }\r\n    if (!this.datepickerInput) {\r\n      throw Error('Attempted to open an NgxMatDatepicker with no associated input.');\r\n    }\r\n    if (this._document) {\r\n      this._focusedElementBeforeOpen = this._document.activeElement;\r\n    }\r\n\r\n    this.touchUi ? this._openAsDialog() : this._openAsPopup();\r\n    this._opened = true;\r\n    this.openedStream.emit();\r\n  }\r\n\r\n  /** Close the calendar. */\r\n  close(): void {\r\n    if (!this._opened) {\r\n      return;\r\n    }\r\n    if (this._popupRef && this._popupRef.hasAttached()) {\r\n      this._popupRef.detach();\r\n    }\r\n    if (this._dialogRef) {\r\n      this._dialogRef.close();\r\n      this._dialogRef = null;\r\n    }\r\n    if (this._calendarPortal && this._calendarPortal.isAttached) {\r\n      this._calendarPortal.detach();\r\n    }\r\n\r\n    const completeClose = () => {\r\n      // The `_opened` could've been reset already if\r\n      // we got two events in quick succession.\r\n      if (this._opened) {\r\n        this._opened = false;\r\n        this.closedStream.emit();\r\n        this._focusedElementBeforeOpen = null;\r\n      }\r\n    };\r\n\r\n    if (this._focusedElementBeforeOpen &&\r\n      typeof this._focusedElementBeforeOpen.focus === 'function') {\r\n      // Because IE moves focus asynchronously, we can't count on it being restored before we've\r\n      // marked the datepicker as closed. If the event fires out of sequence and the element that\r\n      // we're refocusing opens the datepicker on focus, the user could be stuck with not being\r\n      // able to close the calendar at all. We work around it by making the logic, that marks\r\n      // the datepicker as closed, async as well.\r\n      this._focusedElementBeforeOpen.focus();\r\n      setTimeout(completeClose);\r\n    } else {\r\n      completeClose();\r\n    }\r\n  }\r\n\r\n  /** Open the calendar as a dialog. */\r\n  private _openAsDialog(): void {\r\n    // Usually this would be handled by `open` which ensures that we can only have one overlay\r\n    // open at a time, however since we reset the variables in async handlers some overlays\r\n    // may slip through if the user opens and closes multiple times in quick succession (e.g.\r\n    // by holding down the enter key).\r\n    if (this._dialogRef) {\r\n      this._dialogRef.close();\r\n    }\r\n\r\n    this._dialogRef = this._dialog.open<NgxMatDatetimeContent<D>>(NgxMatDatetimeContent, {\r\n      direction: this._dir ? this._dir.value : 'ltr',\r\n      viewContainerRef: this._viewContainerRef,\r\n      panelClass: 'mat-datepicker-dialog',\r\n      hasBackdrop: this._hasBackdrop\r\n    });\r\n\r\n    this._dialogRef.afterClosed().subscribe(() => this.close());\r\n    this._dialogRef.componentInstance.datepicker = this;\r\n    this._setColor();\r\n  }\r\n\r\n  /** Open the calendar as a popup. */\r\n  private _openAsPopup(): void {\r\n    if (!this._calendarPortal) {\r\n      this._calendarPortal = new ComponentPortal<NgxMatDatetimeContent<D>>(NgxMatDatetimeContent,\r\n        this._viewContainerRef);\r\n    }\r\n\r\n    if (!this._popupRef) {\r\n      this._createPopup();\r\n    }\r\n\r\n    if (!this._popupRef.hasAttached()) {\r\n      this._popupComponentRef = this._popupRef.attach(this._calendarPortal);\r\n      this._popupComponentRef.instance.datepicker = this;\r\n      this._setColor();\r\n\r\n      // Update the position once the calendar has rendered.\r\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\r\n        this._popupRef.updatePosition();\r\n      });\r\n    }\r\n  }\r\n\r\n  /** Create the popup. */\r\n  private _createPopup(): void {\r\n    const overlayConfig = new OverlayConfig({\r\n      positionStrategy: this._createPopupPositionStrategy(),\r\n      hasBackdrop: this._hasBackdrop,\r\n      backdropClass: 'mat-overlay-transparent-backdrop',\r\n      direction: this._dir,\r\n      scrollStrategy: this._scrollStrategy(),\r\n      panelClass: 'mat-datepicker-popup',\r\n    });\r\n\r\n    this._popupRef = this._overlay.create(overlayConfig);\r\n    this._popupRef.overlayElement.setAttribute('role', 'dialog');\r\n\r\n    merge(\r\n      this._popupRef.backdropClick(),\r\n      this._popupRef.detachments(),\r\n      this._popupRef.keydownEvents().pipe(filter(event => {\r\n        // Closing on alt + up is only valid when there's an input associated with the datepicker.\r\n        return event.keyCode === ESCAPE ||\r\n          (this.datepickerInput && event.altKey && event.keyCode === UP_ARROW);\r\n      }))\r\n    ).subscribe(event => {\r\n      if (event) {\r\n        event.preventDefault();\r\n      }\r\n\r\n      (this._hasBackdrop && event) ? this.cancel() : this.close();\r\n\r\n    });\r\n  }\r\n\r\n  /** Create the popup PositionStrategy. */\r\n  private _createPopupPositionStrategy(): PositionStrategy {\r\n    return this._overlay.position()\r\n      .flexibleConnectedTo(this.datepickerInput.getConnectedOverlayOrigin())\r\n      .withTransformOriginOn('.mat-datepicker-content')\r\n      .withFlexibleDimensions(false)\r\n      .withViewportMargin(8)\r\n      .withLockedPosition()\r\n      .withPositions([\r\n        {\r\n          originX: 'start',\r\n          originY: 'bottom',\r\n          overlayX: 'start',\r\n          overlayY: 'top'\r\n        },\r\n        {\r\n          originX: 'start',\r\n          originY: 'top',\r\n          overlayX: 'start',\r\n          overlayY: 'bottom'\r\n        },\r\n        {\r\n          originX: 'end',\r\n          originY: 'bottom',\r\n          overlayX: 'end',\r\n          overlayY: 'top'\r\n        },\r\n        {\r\n          originX: 'end',\r\n          originY: 'top',\r\n          overlayX: 'end',\r\n          overlayY: 'bottom'\r\n        }\r\n      ]);\r\n  }\r\n\r\n  /**\r\n   * @param obj The object to check.\r\n   * @returns The given object if it is both a date instance and valid, otherwise null.\r\n   */\r\n  private _getValidDateOrNull(obj: any): D | null {\r\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\r\n  }\r\n\r\n  /** Passes the current theme color along to the calendar overlay. */\r\n  private _setColor(): void {\r\n    const color = this.color;\r\n    if (this._popupComponentRef) {\r\n      this._popupComponentRef.instance.color = color;\r\n    }\r\n    if (this._dialogRef) {\r\n      this._dialogRef.componentInstance.color = color;\r\n    }\r\n  }\r\n\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport { DOWN_ARROW } from '@angular/cdk/keycodes';\r\nimport { Directive, ElementRef, EventEmitter, forwardRef, Inject, Input, OnDestroy, Optional, Output } from '@angular/core';\r\nimport { AbstractControl, ControlValueAccessor, NG_VALIDATORS, NG_VALUE_ACCESSOR, ValidationErrors, Validator, ValidatorFn, Validators } from '@angular/forms';\r\nimport { ThemePalette } from '@angular/material/core';\r\nimport { MatFormField } from '@angular/material/form-field';\r\nimport { MAT_INPUT_VALUE_ACCESSOR } from '@angular/material/input';\r\nimport { Subscription } from 'rxjs';\r\nimport { NgxMatDateAdapter } from './core/date-adapter';\r\nimport { NgxMatDateFormats, NGX_MAT_DATE_FORMATS } from './core/date-formats';\r\nimport { NgxMatDatetimePicker } from './datetime-picker.component';\r\nimport { createMissingDateImplError } from './utils/date-utils';\r\n\r\n/** @docs-private */\r\nexport const MAT_DATEPICKER_VALUE_ACCESSOR: any = {\r\n    provide: NG_VALUE_ACCESSOR,\r\n    useExisting: forwardRef(() => NgxMatDatetimeInput),\r\n    multi: true\r\n};\r\n\r\n/** @docs-private */\r\nexport const MAT_DATEPICKER_VALIDATORS: any = {\r\n    provide: NG_VALIDATORS,\r\n    useExisting: forwardRef(() => NgxMatDatetimeInput),\r\n    multi: true\r\n};\r\n\r\n\r\n/**\r\n * An event used for datepicker input and change events. We don't always have access to a native\r\n * input or change event because the event may have been triggered by the user clicking on the\r\n * calendar popup. For consistency, we always use MatDatetimePickerInputEvent instead.\r\n */\r\nexport class MatDatetimePickerInputEvent<D> {\r\n    /** The new value for the target datepicker input. */\r\n    value: D | null;\r\n\r\n    constructor(\r\n        /** Reference to the datepicker input component that emitted the event. */\r\n        public target: NgxMatDatetimeInput<D>,\r\n        /** Reference to the native input element associated with the datepicker input. */\r\n        public targetElement: HTMLElement) {\r\n        this.value = this.target.value;\r\n    }\r\n}\r\n\r\n\r\n/** Directive used to connect an input to a matDatetimePicker. */\r\n@Directive({\r\n    selector: 'input[ngxMatDatetimePicker]',\r\n    providers: [\r\n        MAT_DATEPICKER_VALUE_ACCESSOR,\r\n        MAT_DATEPICKER_VALIDATORS,\r\n        { provide: MAT_INPUT_VALUE_ACCESSOR, useExisting: NgxMatDatetimeInput },\r\n    ],\r\n    host: {\r\n        '[attr.aria-haspopup]': '_datepicker ? \"dialog\" : null',\r\n        '[attr.aria-owns]': '(_datepicker?.opened && _datepicker.id) || null',\r\n        '[attr.min]': 'min ? _dateAdapter.toIso8601(min) : null',\r\n        '[attr.max]': 'max ? _dateAdapter.toIso8601(max) : null',\r\n        '[disabled]': 'disabled',\r\n        '(input)': '_onInput($event.target.value)',\r\n        '(change)': '_onChange()',\r\n        '(blur)': '_onBlur()',\r\n        '(focus)': '_onFocus()',\r\n        '(keydown)': '_onKeydown($event)',\r\n    },\r\n    exportAs: 'ngxMatDatetimePickerInput',\r\n})\r\nexport class NgxMatDatetimeInput<D> implements ControlValueAccessor, OnDestroy, Validator {\r\n    /** The datepicker that this input is associated with. */\r\n    @Input()\r\n    set ngxMatDatetimePicker(value: NgxMatDatetimePicker<D>) {\r\n        if (!value) {\r\n            return;\r\n        }\r\n\r\n        this._datepicker = value;\r\n        this._datepicker._registerInput(this);\r\n        this._datepickerSubscription.unsubscribe();\r\n\r\n        this._datepickerSubscription = this._datepicker._selectedChanged.subscribe((selected: D) => {\r\n            this.value = selected;\r\n            this._cvaOnChange(selected);\r\n            this._onTouched();\r\n            this.dateInput.emit(new MatDatetimePickerInputEvent(this, this._elementRef.nativeElement));\r\n            this.dateChange.emit(new MatDatetimePickerInputEvent(this, this._elementRef.nativeElement));\r\n        });\r\n    }\r\n    _datepicker: NgxMatDatetimePicker<D>;\r\n\r\n    /** Function that can be used to filter out dates within the datepicker. */\r\n    @Input()\r\n    set ngxMatDatetimePickerFilter(value: (date: D | null) => boolean) {\r\n        this._dateFilter = value;\r\n        this._validatorOnChange();\r\n    }\r\n    _dateFilter: (date: D | null) => boolean;\r\n\r\n    /** The value of the input. */\r\n    @Input()\r\n    get value(): D | null { return this._value; }\r\n    set value(value: D | null) {\r\n        value = this._dateAdapter.deserialize(value);\r\n        this._lastValueValid = !value || this._dateAdapter.isValid(value);\r\n        value = this._getValidDateOrNull(value);\r\n        const oldDate = this.value;\r\n        this._value = value;\r\n        this._formatValue(value);\r\n\r\n        if (!this._dateAdapter.sameDate(oldDate, value)) {\r\n            this._valueChange.emit(value);\r\n        }\r\n    }\r\n    private _value: D | null;\r\n\r\n    /** The minimum valid date. */\r\n    @Input()\r\n    get min(): D | null { return this._min; }\r\n    set min(value: D | null) {\r\n        this._min = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\r\n        this._validatorOnChange();\r\n    }\r\n    private _min: D | null;\r\n\r\n    /** The maximum valid date. */\r\n    @Input()\r\n    get max(): D | null { return this._max; }\r\n    set max(value: D | null) {\r\n        this._max = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\r\n        this._validatorOnChange();\r\n    }\r\n    private _max: D | null;\r\n\r\n    /** Whether the datepicker-input is disabled. */\r\n    @Input()\r\n    get disabled(): boolean { return !!this._disabled; }\r\n    set disabled(value: boolean) {\r\n        const newValue = value != null && `${value}` !== 'false';\r\n        const element = this._elementRef.nativeElement;\r\n\r\n        if (this._disabled !== newValue) {\r\n            this._disabled = newValue;\r\n            this.stateChanges.emit(undefined);\r\n        }\r\n\r\n        // We need to null check the `blur` method, because it's undefined during SSR.\r\n        if (newValue && element.blur) {\r\n            // Normally, native input elements automatically blur if they turn disabled. This behavior\r\n            // is problematic, because it would mean that it triggers another change detection cycle,\r\n            // which then causes a changed after checked error if the input element was focused before.\r\n            element.blur();\r\n        }\r\n    }\r\n    private _disabled: boolean;\r\n\r\n    /** Emits when a `change` event is fired on this `<input>`. */\r\n    @Output() readonly dateChange: EventEmitter<MatDatetimePickerInputEvent<D>> =\r\n        new EventEmitter<MatDatetimePickerInputEvent<D>>();\r\n\r\n    /** Emits when an `input` event is fired on this `<input>`. */\r\n    @Output() readonly dateInput: EventEmitter<MatDatetimePickerInputEvent<D>> =\r\n        new EventEmitter<MatDatetimePickerInputEvent<D>>();\r\n\r\n    /** Emits when the value changes (either due to user input or programmatic change). */\r\n    _valueChange = new EventEmitter<D | null>();\r\n\r\n    /** Emits when the disabled state has changed */\r\n    stateChanges = new EventEmitter<void>();\r\n\r\n    _onTouched = () => { };\r\n\r\n    private _cvaOnChange: (value: any) => void = () => { };\r\n\r\n    private _validatorOnChange = () => { };\r\n\r\n    private _datepickerSubscription = Subscription.EMPTY;\r\n\r\n    private _localeSubscription = Subscription.EMPTY;\r\n\r\n    /** The form control validator for whether the input parses. */\r\n    private _parseValidator: ValidatorFn = (): ValidationErrors | null => {\r\n        return this._lastValueValid ?\r\n            null : { 'matDatetimePickerParse': { 'text': this._elementRef.nativeElement.value } };\r\n    }\r\n\r\n    /** The form control validator for the min date. */\r\n    private _minValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\r\n        const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\r\n        return (!this.min || !controlValue ||\r\n            this._dateAdapter.compareDateWithTime(this.min, controlValue, this._datepicker.showSeconds) <= 0) ?\r\n            null : { 'matDatetimePickerMin': { 'min': this.min, 'actual': controlValue } };\r\n    }\r\n\r\n    /** The form control validator for the max date. */\r\n    private _maxValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\r\n        const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\r\n        return (!this.max || !controlValue ||\r\n            this._dateAdapter.compareDateWithTime(this.max, controlValue, this._datepicker.showSeconds) >= 0) ?\r\n            null : { 'matDatetimePickerMax': { 'max': this.max, 'actual': controlValue } };\r\n    }\r\n\r\n    /** The form control validator for the date filter. */\r\n    private _filterValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\r\n        const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\r\n        return !this._dateFilter || !controlValue || this._dateFilter(controlValue) ?\r\n            null : { 'matDatetimePickerFilter': true };\r\n    }\r\n\r\n    /** The combined form control validator for this input. */\r\n    private _validator: ValidatorFn | null =\r\n        Validators.compose(\r\n            [this._parseValidator, this._minValidator, this._maxValidator, this._filterValidator]);\r\n\r\n    /** Whether the last value set on the input was valid. */\r\n    private _lastValueValid = false;\r\n\r\n    constructor(\r\n        private _elementRef: ElementRef<HTMLInputElement>,\r\n        @Optional() public _dateAdapter: NgxMatDateAdapter<D>,\r\n        @Optional() @Inject(NGX_MAT_DATE_FORMATS) private _dateFormats: NgxMatDateFormats,\r\n        @Optional() private _formField: MatFormField) {\r\n        if (!this._dateAdapter) {\r\n            throw createMissingDateImplError('NgxMatDateAdapter');\r\n        }\r\n        if (!this._dateFormats) {\r\n            throw createMissingDateImplError('NGX_MAT_DATE_FORMATS');\r\n        }\r\n\r\n        // Update the displayed date when the locale changes.\r\n        this._localeSubscription = _dateAdapter.localeChanges.subscribe(() => {\r\n            this.value = this.value;\r\n        });\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this._datepickerSubscription.unsubscribe();\r\n        this._localeSubscription.unsubscribe();\r\n        this._valueChange.complete();\r\n        this.stateChanges.complete();\r\n    }\r\n\r\n    /** @docs-private */\r\n    registerOnValidatorChange(fn: () => void): void {\r\n        this._validatorOnChange = fn;\r\n    }\r\n\r\n    /** @docs-private */\r\n    validate(c: AbstractControl): ValidationErrors | null {\r\n        return this._validator ? this._validator(c) : null;\r\n    }\r\n\r\n    /**\r\n     * @deprecated\r\n     * @breaking-change 8.0.0 Use `getConnectedOverlayOrigin` instead\r\n     */\r\n    getPopupConnectionElementRef(): ElementRef {\r\n        return this.getConnectedOverlayOrigin();\r\n    }\r\n\r\n    /**\r\n     * Gets the element that the datepicker popup should be connected to.\r\n     * @return The element to connect the popup to.\r\n     */\r\n    getConnectedOverlayOrigin(): ElementRef {\r\n        return this._formField ? this._formField.getConnectedOverlayOrigin() : this._elementRef;\r\n    }\r\n\r\n    // Implemented as part of ControlValueAccessor.\r\n    writeValue(value: D): void {\r\n        this.value = value;\r\n    }\r\n\r\n    // Implemented as part of ControlValueAccessor.\r\n    registerOnChange(fn: (value: any) => void): void {\r\n        this._cvaOnChange = fn;\r\n    }\r\n\r\n    // Implemented as part of ControlValueAccessor.\r\n    registerOnTouched(fn: () => void): void {\r\n        this._onTouched = fn;\r\n    }\r\n\r\n    // Implemented as part of ControlValueAccessor.\r\n    setDisabledState(isDisabled: boolean): void {\r\n        this.disabled = isDisabled;\r\n    }\r\n\r\n    _onKeydown(event: KeyboardEvent) {\r\n        const isAltDownArrow = event.altKey && event.keyCode === DOWN_ARROW;\r\n\r\n        if (this._datepicker && isAltDownArrow && !this._elementRef.nativeElement.readOnly) {\r\n            this._datepicker.open();\r\n            event.preventDefault();\r\n        }\r\n    }\r\n\r\n    _onInput(value: string) {\r\n        const lastValueWasValid = this._lastValueValid;\r\n        let date = this._dateAdapter.parse(value, this._dateFormats.parse.dateInput);\r\n        this._lastValueValid = !date || this._dateAdapter.isValid(date);\r\n        date = this._getValidDateOrNull(date);\r\n\r\n        const isSameTime = this._dateAdapter.isSameTime(date, this._value);\r\n\r\n        if ((date != null && (!isSameTime || !this._dateAdapter.sameDate(date, this._value)))\r\n            || (date == null && this._value != null)) {\r\n            this._value = date;\r\n            this._cvaOnChange(date);\r\n            this._valueChange.emit(date);\r\n            this.dateInput.emit(new MatDatetimePickerInputEvent(this, this._elementRef.nativeElement));\r\n        } else if (lastValueWasValid !== this._lastValueValid) {\r\n            this._validatorOnChange();\r\n        }\r\n    }\r\n\r\n    _onChange() {\r\n        this.dateChange.emit(new MatDatetimePickerInputEvent(this, this._elementRef.nativeElement));\r\n    }\r\n\r\n    /** Returns the palette used by the input's form field, if any. */\r\n    _getThemePalette(): ThemePalette {\r\n        return this._formField ? this._formField.color : undefined;\r\n    }\r\n\r\n    /** Handles blur events on the input. */\r\n    _onBlur() {\r\n        // Reformat the input only if we have a valid value.\r\n        if (this.value) {\r\n            this._formatValue(this.value);\r\n        }\r\n\r\n        this._onTouched();\r\n    }\r\n\r\n    /** Handles focus events on the input. */\r\n    _onFocus() {\r\n        // Close datetime picker if opened\r\n        if (this._datepicker && this._datepicker.opened) {\r\n            this._datepicker.cancel();\r\n        }\r\n    }\r\n\r\n    /** Formats a value and sets it on the input element. */\r\n    private _formatValue(value: D | null) {\r\n        this._elementRef.nativeElement.value =\r\n            value ? this._dateAdapter.format(value, this._dateFormats.display.dateInput) : '';\r\n    }\r\n\r\n    /**\r\n     * @param obj The object to check.\r\n     * @returns The given object if it is both a date instance and valid, otherwise null.\r\n     */\r\n    private _getValidDateOrNull(obj: any): D | null {\r\n        return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\r\n    }\r\n\r\n}\r\n","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { NgxMatTimepickerComponent } from './timepicker.component';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    MatInputModule,\r\n    ReactiveFormsModule,\r\n    FormsModule,\r\n    MatIconModule,\r\n    MatButtonModule,\r\n  ],\r\n  exports: [\r\n    NgxMatTimepickerComponent\r\n  ],\r\n  declarations: [\r\n    NgxMatTimepickerComponent\r\n  ]\r\n})\r\nexport class NgxMatTimepickerModule { }\r\n","import { PortalModule } from '@angular/cdk/portal';\r\nimport { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatDatepickerModule, MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER } from '@angular/material/datepicker';\r\nimport { MatDialogModule } from '@angular/material/dialog';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { NgxMatCalendar, NgxMatCalendarHeader } from './calendar';\r\nimport { NgxMatCalendarBody } from './calendar-body';\r\nimport { DefaultNgxMatCalendarRangeStrategy, NGX_MAT_DATE_RANGE_SELECTION_STRATEGY } from './date-range-selection-strategy';\r\nimport { NgxMatDatetimeInput } from './datetime-input';\r\nimport { NgxMatDatetimeContent, NgxMatDatetimePicker } from './datetime-picker.component';\r\nimport { NgxMatMonthView } from './month-view';\r\nimport { NgxMatMultiYearView } from './multi-year-view';\r\nimport { NgxMatTimepickerModule } from './timepicker.module';\r\nimport { NgxMatYearView } from './year-view';\r\n\r\n@NgModule({\r\n   imports: [\r\n      CommonModule,\r\n      MatDatepickerModule,\r\n      MatDialogModule,\r\n      PortalModule,\r\n      FormsModule,\r\n      MatIconModule,\r\n      MatButtonModule,\r\n      MatInputModule,\r\n      NgxMatTimepickerModule\r\n   ],\r\n   exports: [\r\n      NgxMatDatetimePicker,\r\n      NgxMatDatetimeInput,\r\n      NgxMatCalendar,\r\n      NgxMatMonthView,\r\n      NgxMatCalendarBody,\r\n      NgxMatYearView,\r\n      NgxMatMultiYearView,\r\n      NgxMatCalendarHeader\r\n   ],\r\n   declarations: [\r\n      NgxMatDatetimePicker,\r\n      NgxMatDatetimeContent,\r\n      NgxMatDatetimeInput,\r\n      NgxMatCalendar,\r\n      NgxMatMonthView,\r\n      NgxMatCalendarBody,\r\n      NgxMatYearView,\r\n      NgxMatMultiYearView,\r\n      NgxMatCalendarHeader\r\n   ],\r\n   entryComponents: [\r\n      NgxMatDatetimeContent,\r\n      NgxMatCalendarHeader\r\n   ],\r\n   providers: [\r\n      MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER,\r\n      {\r\n         provide: NGX_MAT_DATE_RANGE_SELECTION_STRATEGY,\r\n         useClass: DefaultNgxMatCalendarRangeStrategy\r\n      }\r\n   ]\r\n})\r\nexport class NgxMatDatetimePickerModule { }\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport { Platform } from '@angular/cdk/platform';\r\nimport { Inject, Injectable, Optional } from '@angular/core';\r\nimport { MAT_DATE_LOCALE } from '@angular/material/core';\r\nimport { NgxMatDateAdapter } from './date-adapter';\r\n\r\n// TODO(mmalerba): Remove when we no longer support safari 9.\r\n/** Whether the browser supports the Intl API. */\r\nlet SUPPORTS_INTL_API: boolean;\r\n\r\n// We need a try/catch around the reference to `Intl`, because accessing it in some cases can\r\n// cause IE to throw. These cases are tied to particular versions of Windows and can happen if\r\n// the consumer is providing a polyfilled `Map`. See:\r\n// https://github.com/Microsoft/ChakraCore/issues/3189\r\n// https://github.com/angular/components/issues/15687\r\ntry {\r\n  SUPPORTS_INTL_API = typeof Intl != 'undefined';\r\n} catch {\r\n  SUPPORTS_INTL_API = false;\r\n}\r\n\r\n/** The default month names to use if Intl API is not available. */\r\nconst DEFAULT_MONTH_NAMES = {\r\n  'long': [\r\n    'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September',\r\n    'October', 'November', 'December'\r\n  ],\r\n  'short': ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\r\n  'narrow': ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D']\r\n};\r\n\r\n\r\n/** The default date names to use if Intl API is not available. */\r\nconst DEFAULT_DATE_NAMES = range(31, i => String(i + 1));\r\n\r\n\r\n/** The default day of the week names to use if Intl API is not available. */\r\nconst DEFAULT_DAY_OF_WEEK_NAMES = {\r\n  'long': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\r\n  'short': ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\r\n  'narrow': ['S', 'M', 'T', 'W', 'T', 'F', 'S']\r\n};\r\n\r\n\r\n/**\r\n * Matches strings that have the form of a valid RFC 3339 string\r\n * (https://tools.ietf.org/html/rfc3339). Note that the string may not actually be a valid date\r\n * because the regex will match strings an with out of bounds month, date, etc.\r\n */\r\nconst ISO_8601_REGEX =\r\n  /^\\d{4}-\\d{2}-\\d{2}(?:T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?(?:Z|(?:(?:\\+|-)\\d{2}:\\d{2}))?)?$/;\r\n\r\n\r\n/** Creates an array and fills it with values. */\r\nfunction range<T>(length: number, valueFunction: (index: number) => T): T[] {\r\n  const valuesArray = Array(length);\r\n  for (let i = 0; i < length; i++) {\r\n    valuesArray[i] = valueFunction(i);\r\n  }\r\n  return valuesArray;\r\n}\r\n\r\n/** Adapts the native JS Date for use with cdk-based components that work with dates. */\r\n@Injectable()\r\nexport class NgxMatNativeDateAdapter extends NgxMatDateAdapter<Date> {\r\n\r\n  /** Whether to clamp the date between 1 and 9999 to avoid IE and Edge errors. */\r\n  private readonly _clampDate: boolean;\r\n\r\n  /**\r\n   * Whether to use `timeZone: 'utc'` with `Intl.DateTimeFormat` when formatting dates.\r\n   * Without this `Intl.DateTimeFormat` sometimes chooses the wrong timeZone, which can throw off\r\n   * the result. (e.g. in the en-US locale `new Date(1800, 7, 14).toLocaleDateString()`\r\n   * will produce `'8/13/1800'`.\r\n   *\r\n   * TODO(mmalerba): drop this variable. It's not being used in the code right now. We're now\r\n   * getting the string representation of a Date object from its utc representation. We're keeping\r\n   * it here for sometime, just for precaution, in case we decide to revert some of these changes\r\n   * though.\r\n   */\r\n  useUtcForDisplay: boolean = true;\r\n\r\n  constructor(@Optional() @Inject(MAT_DATE_LOCALE) matDateLocale: string, platform: Platform) {\r\n    super();\r\n    super.setLocale(matDateLocale);\r\n\r\n    // IE does its own time zone correction, so we disable this on IE.\r\n    this.useUtcForDisplay = !platform.TRIDENT;\r\n    this._clampDate = platform.TRIDENT || platform.EDGE;\r\n  }\r\n\r\n  getYear(date: Date): number {\r\n    return date.getFullYear();\r\n  }\r\n\r\n  getMonth(date: Date): number {\r\n    return date.getMonth();\r\n  }\r\n\r\n  getDate(date: Date): number {\r\n    return date.getDate();\r\n  }\r\n\r\n  getDayOfWeek(date: Date): number {\r\n    return date.getDay();\r\n  }\r\n\r\n  getMonthNames(style: 'long' | 'short' | 'narrow'): string[] {\r\n    if (SUPPORTS_INTL_API) {\r\n      const dtf = new Intl.DateTimeFormat(this.locale, { month: style, timeZone: 'utc' });\r\n      return range(12, i =>\r\n        this._stripDirectionalityCharacters(this._format(dtf, new Date(2017, i, 1))));\r\n    }\r\n    return DEFAULT_MONTH_NAMES[style];\r\n  }\r\n\r\n  getDateNames(): string[] {\r\n    if (SUPPORTS_INTL_API) {\r\n      const dtf = new Intl.DateTimeFormat(this.locale, { day: 'numeric', timeZone: 'utc' });\r\n      return range(31, i => this._stripDirectionalityCharacters(\r\n        this._format(dtf, new Date(2017, 0, i + 1))));\r\n    }\r\n    return DEFAULT_DATE_NAMES;\r\n  }\r\n\r\n  getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[] {\r\n    if (SUPPORTS_INTL_API) {\r\n      const dtf = new Intl.DateTimeFormat(this.locale, { weekday: style, timeZone: 'utc' });\r\n      return range(7, i => this._stripDirectionalityCharacters(\r\n        this._format(dtf, new Date(2017, 0, i + 1))));\r\n    }\r\n    return DEFAULT_DAY_OF_WEEK_NAMES[style];\r\n  }\r\n\r\n  getYearName(date: Date): string {\r\n    if (SUPPORTS_INTL_API) {\r\n      const dtf = new Intl.DateTimeFormat(this.locale, { year: 'numeric', timeZone: 'utc' });\r\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\r\n    }\r\n    return String(this.getYear(date));\r\n  }\r\n\r\n  getFirstDayOfWeek(): number {\r\n    // We can't tell using native JS Date what the first day of the week is, we default to Sunday.\r\n    return 0;\r\n  }\r\n\r\n  getNumDaysInMonth(date: Date): number {\r\n    return this.getDate(this._createDateWithOverflow(\r\n      this.getYear(date), this.getMonth(date) + 1, 0));\r\n  }\r\n\r\n  clone(date: Date): Date {\r\n    return new Date(date.getTime());\r\n  }\r\n\r\n  createDate(year: number, month: number, date: number): Date {\r\n    // Check for invalid month and date (except upper bound on date which we have to check after\r\n    // creating the Date).\r\n    if (month < 0 || month > 11) {\r\n      throw Error(`Invalid month index \"${month}\". Month index has to be between 0 and 11.`);\r\n    }\r\n\r\n    if (date < 1) {\r\n      throw Error(`Invalid date \"${date}\". Date has to be greater than 0.`);\r\n    }\r\n\r\n    let result = this._createDateWithOverflow(year, month, date);\r\n    // Check that the date wasn't above the upper bound for the month, causing the month to overflow\r\n    if (result.getMonth() != month) {\r\n      throw Error(`Invalid date \"${date}\" for month with index \"${month}\".`);\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  today(): Date {\r\n    return new Date();\r\n  }\r\n\r\n  parse(value: any): Date | null {\r\n    // We have no way using the native JS Date to set the parse format or locale, so we ignore these\r\n    // parameters.\r\n    if (typeof value == 'number') {\r\n      return new Date(value);\r\n    }\r\n    return value ? new Date(Date.parse(value)) : null;\r\n  }\r\n\r\n  format(date: Date, displayFormat: Object): string {\r\n    if (!this.isValid(date)) {\r\n      throw Error('NativeDateAdapter: Cannot format invalid date.');\r\n    }\r\n\r\n    if (SUPPORTS_INTL_API) {\r\n      // On IE and Edge the i18n API will throw a hard error that can crash the entire app\r\n      // if we attempt to format a date whose year is less than 1 or greater than 9999.\r\n      if (this._clampDate && (date.getFullYear() < 1 || date.getFullYear() > 9999)) {\r\n        date = this.clone(date);\r\n        date.setFullYear(Math.max(1, Math.min(9999, date.getFullYear())));\r\n      }\r\n\r\n      displayFormat = { ...displayFormat, timeZone: 'utc' };\r\n\r\n      const dtf = new Intl.DateTimeFormat(this.locale, displayFormat);\r\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\r\n    }\r\n    return this._stripDirectionalityCharacters(date.toDateString());\r\n  }\r\n\r\n  addCalendarYears(date: Date, years: number): Date {\r\n    return this.addCalendarMonths(date, years * 12);\r\n  }\r\n\r\n  addCalendarMonths(date: Date, months: number): Date {\r\n    let newDate = this._createDateWithOverflow(\r\n      this.getYear(date), this.getMonth(date) + months, this.getDate(date));\r\n\r\n    // It's possible to wind up in the wrong month if the original month has more days than the new\r\n    // month. In this case we want to go to the last day of the desired month.\r\n    // Note: the additional + 12 % 12 ensures we end up with a positive number, since JS % doesn't\r\n    // guarantee this.\r\n    if (this.getMonth(newDate) != ((this.getMonth(date) + months) % 12 + 12) % 12) {\r\n      newDate = this._createDateWithOverflow(this.getYear(newDate), this.getMonth(newDate), 0);\r\n    }\r\n\r\n    return newDate;\r\n  }\r\n\r\n  addCalendarDays(date: Date, days: number): Date {\r\n    return this._createDateWithOverflow(\r\n      this.getYear(date), this.getMonth(date), this.getDate(date) + days);\r\n  }\r\n\r\n  toIso8601(date: Date): string {\r\n    return [\r\n      date.getUTCFullYear(),\r\n      this._2digit(date.getUTCMonth() + 1),\r\n      this._2digit(date.getUTCDate())\r\n    ].join('-');\r\n  }\r\n\r\n  /**\r\n   * Returns the given value if given a valid Date or null. Deserializes valid ISO 8601 strings\r\n   * (https://www.ietf.org/rfc/rfc3339.txt) into valid Dates and empty string into null. Returns an\r\n   * invalid date for all other values.\r\n   */\r\n  deserialize(value: any): Date | null {\r\n    if (typeof value === 'string') {\r\n      if (!value) {\r\n        return null;\r\n      }\r\n      // The `Date` constructor accepts formats other than ISO 8601, so we need to make sure the\r\n      // string is the right format first.\r\n      if (ISO_8601_REGEX.test(value)) {\r\n        let date = new Date(value);\r\n        if (this.isValid(date)) {\r\n          return date;\r\n        }\r\n      }\r\n    }\r\n    return super.deserialize(value);\r\n  }\r\n\r\n  isDateInstance(obj: any) {\r\n    return obj instanceof Date;\r\n  }\r\n\r\n  isValid(date: Date) {\r\n    return !isNaN(date.getTime());\r\n  }\r\n\r\n  invalid(): Date {\r\n    return new Date(NaN);\r\n  }\r\n\r\n  getHour(date: Date): number {\r\n    return date.getHours();\r\n  }\r\n  getMinute(date: Date): number {\r\n    return date.getMinutes();\r\n  }\r\n  getSecond(date: Date): number {\r\n    return date.getSeconds()\r\n  }\r\n\r\n  setHour(date: Date, value: number): void {\r\n    date.setHours(value);\r\n  }\r\n  setMinute(date: Date, value: number): void {\r\n    date.setMinutes(value);\r\n  }\r\n  setSecond(date: Date, value: number): void {\r\n    date.setSeconds(value);\r\n  }\r\n\r\n  /** Creates a date but allows the month and date to overflow. */\r\n  private _createDateWithOverflow(year: number, month: number, date: number) {\r\n    const result = new Date(year, month, date);\r\n\r\n    // We need to correct for the fact that JS native Date treats years in range [0, 99] as\r\n    // abbreviations for 19xx.\r\n    if (year >= 0 && year < 100) {\r\n      result.setFullYear(this.getYear(result) - 1900);\r\n    }\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Pads a number to make it two digits.\r\n   * @param n The number to pad.\r\n   * @returns The padded number.\r\n   */\r\n  private _2digit(n: number) {\r\n    return ('00' + n).slice(-2);\r\n  }\r\n\r\n  /**\r\n   * Strip out unicode LTR and RTL characters. Edge and IE insert these into formatted dates while\r\n   * other browsers do not. We remove them to make output consistent and because they interfere with\r\n   * date parsing.\r\n   * @param str The string to strip direction characters from.\r\n   * @returns The stripped string.\r\n   */\r\n  private _stripDirectionalityCharacters(str: string) {\r\n    return str.replace(/[\\u200e\\u200f]/g, '');\r\n  }\r\n\r\n  /**\r\n   * When converting Date object to string, javascript built-in functions may return wrong\r\n   * results because it applies its internal DST rules. The DST rules around the world change\r\n   * very frequently, and the current valid rule is not always valid in previous years though.\r\n   * We work around this problem building a new Date object which has its internal UTC\r\n   * representation with the local date and time.\r\n   * @param dtf Intl.DateTimeFormat object, containg the desired string format. It must have\r\n   *    timeZone set to 'utc' to work fine.\r\n   * @param date Date from which we want to get the string representation according to dtf\r\n   * @returns A Date object with its UTC representation based on the passed in date info\r\n   */\r\n  private _format(dtf: Intl.DateTimeFormat, date: Date) {\r\n    // Passing the year to the constructor causes year numbers <100 to be converted to 19xx.\r\n    // To work around this we use `setUTCFullYear` and `setUTCHours` instead.\r\n    const d = new Date();\r\n    d.setUTCFullYear(date.getFullYear(), date.getMonth(), date.getDate());\r\n    d.setUTCHours(date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds());\r\n    return dtf.format(d);\r\n  }\r\n}\r\n","import { NgxMatDateFormats } from './date-formats';\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nconst DEFAULT_DATE_INPUT = {\r\n  year: 'numeric', month: 'numeric', day: 'numeric',\r\n  hour12: false, hour: \"2-digit\", minute: \"2-digit\", second: \"2-digit\"\r\n}\r\n\r\nexport const NGX_MAT_NATIVE_DATE_FORMATS: NgxMatDateFormats = {\r\n  parse: {\r\n    dateInput: DEFAULT_DATE_INPUT,\r\n  },\r\n  display: {\r\n    dateInput: DEFAULT_DATE_INPUT,\r\n    monthYearLabel: { year: 'numeric', month: 'short' },\r\n    dateA11yLabel: { year: 'numeric', month: 'long', day: 'numeric' },\r\n    monthYearA11yLabel: { year: 'numeric', month: 'long' },\r\n  }\r\n};\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport { PlatformModule } from '@angular/cdk/platform';\r\nimport { NgModule } from '@angular/core';\r\nimport { NgxMatDateAdapter } from './date-adapter';\r\nimport { NgxMatNativeDateAdapter } from './native-date-adapter';\r\nimport { NGX_MAT_NATIVE_DATE_FORMATS } from './native-date-formats';\r\nimport { NGX_MAT_DATE_FORMATS } from './date-formats';\r\n\r\n\r\n@NgModule({\r\n    imports: [PlatformModule],\r\n    providers: [\r\n        { provide: NgxMatDateAdapter, useClass: NgxMatNativeDateAdapter },\r\n    ],\r\n})\r\nexport class NgxNativeDateModule { }\r\n\r\n@NgModule({\r\n    imports: [NgxNativeDateModule],\r\n    providers: [{ provide: NGX_MAT_DATE_FORMATS, useValue: NGX_MAT_NATIVE_DATE_FORMATS }],\r\n})\r\nexport class NgxMatNativeDateModule { }\r\n","/*\r\n * Public API Surface of ngx-mat-datetime-picker\r\n */\r\n\r\nexport * from './lib/calendar';\r\nexport * from './lib/calendar-body';\r\nexport * from './lib/date-range-selection-strategy';\r\nexport * from './lib/month-view';\r\nexport * from './lib/multi-year-view';\r\nexport * from './lib/year-view';\r\nexport * from './lib/datetime-picker.component';\r\nexport * from './lib/datetime-input';\r\nexport * from './lib/datetime-picker.module';\r\nexport * from './lib/timepicker.component';\r\nexport * from './lib/timepicker.module';\r\nexport * from './lib/core/date-adapter';\r\nexport * from './lib/core/native-date-adapter';\r\nexport * from './lib/core/native-date-formats';\r\nexport * from './lib/core/date-formats';\r\nexport * from './lib/core/native-date.module';\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"]}